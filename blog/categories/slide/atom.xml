<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Slide | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.io/blog/categories/slide/atom.xml" rel="self"/>
  <link href="http://yagays.github.io/"/>
  <updated>2014-10-25T13:34:14+09:00</updated>
  <id>http://yagays.github.io/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[スライドメモ:KDD2014 Tutorial "The Recommender Problem Revisited"]]></title>
    <link href="http://yagays.github.io/blog/2014/09/08/kdd2014-tutorial-recommendation/"/>
    <updated>2014-09-08T15:21:00+09:00</updated>
    <id>http://yagays.github.io/blog/2014/09/08/kdd2014-tutorial-recommendation</id>
    <content type="html"><![CDATA[<p>Netflixの中の人によるKDD2014 Tutorialの"The Recommender Problem Revisited"のスライド1を読んだので，簡単にまとめてみた．レコメンドのこれまでと現状をひと通り網羅したチュートリアルという感じ．このスライドはKDD2014 Tutorial向けだけれど，今度のRecSys 2014のTutorialでも同様の発表があるようだ(<a href="http://recsys.acm.org/recsys14/tutorials/">link</a>)．</p>

<ul>
<li><strong>レコメンドの大まかな流れを知りたい人</strong>

<ul>
<li>このチュートリアルもいいけど，日本語で書かれた<a href="http://www.kamishima.net/archive/recsys.pdf">しましま先生の資料</a>の方が丁寧でわかりやすいかも</li>
</ul>
</li>
<li><strong>レコメンドの具体的な手法や流行を知りたい人</strong>

<ul>
<li>このチュートリアルで興味ある分野の箇所を見て個別にReferenceを当たる</li>
</ul>
</li>
</ul>


<p>どっちにしろ素人のまとめなので，以下のメモは参考程度にお願いします．</p>

<p><a href="http://www.slideshare.net/xamat/kdd-2014-tutorial-the-recommender-problem-revisited">Kdd 2014 Tutorial - the recommender problem revisited</a></p>

<iframe src="http://yagays.github.io//www.slideshare.net/slideshow/embed_code/38241291" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/xamat/kdd-2014-tutorial-the-recommender-problem-revisited" title="Kdd 2014 Tutorial - the recommender problem revisited" target="_blank">Kdd 2014 Tutorial - the recommender problem revisited</a> </strong> from <strong><a href="http://www.slideshare.net/xamat" target="_blank">Xavier Amatriain</a></strong> </div></p>

<p><strong>(追記:2014.10.8) RECSYSのスライドも公開された．</strong></p>

<p><a href="http://www.slideshare.net/xamat/recsys-2014-tutorial-the-recommender-problem-revisited">Recsys 2014 Tutorial - The Recommender Problem Revisited</a></p>

<h3>TL;DR</h3>

<p>レコメンドのこれまでと現状をひと通り網羅した資料．情報過多の時代においてレコメンドは必要不可欠な技術であり，いまでは従来のレコメンドに加えてパーソナライズやインターフェイスなどの複合要素を考慮したレコメンドが必要になってきた．それにともなって，レコメンド手法としても古典的な協調フィルタリングから，Netflix Prizeにより出現した次元削除の手法，ランキングアルゴリズムやディープラーニングを用いたコンテンツベースのレコメンドなどへと広がりをみせている．</p>

<h3>1. The Recommender Problem</h3>

<ul>
<li>レコメンデーションは必須

<ul>
<li>情報量の肥大化(情報過多)</li>
<li>個人向けの推薦（パーソナライズ）

<ul>
<li><a href="http://www.huffingtonpost.com/2013/08/21/netflix-my-list_n_3790472.html">Netflix's New 'My List' Feature Knows You Better Than You Know Yourself (Because Algorithms)</a></li>
</ul>
</li>
</ul>
</li>
<li>レコメンドの定義

<ul>
<li>今までの定義：ユーザが好きなアイテムを自動的に予測する効用関数を作る</li>
<li>これからのレコメンド：今までのレコメンド＋α

<ul>
<li>セレンディピティ（偶然の発見＆ユーザが既に知っているアイテムを推薦しない）</li>
<li>ユーザインターフェイス，パーソナライズなど</li>
</ul>
</li>
</ul>
</li>
<li>レコメンドの進化

<ul>
<li>単純なレート付け→ランキング→ページ最適化→コンテキストを含めたレコメンドへ</li>
</ul>
</li>
</ul>


<h3>2. Traditional Approaches</h3>

<h4>2.1 Collaborative Filtering (CF)</h4>

<p><strong>協調フィルタリングの基本</strong></p>

<ul>
<li>協調フィルタリングの構成要素

<ul>
<li>ユーザがアイテムに付けたレートが基本</li>
<li>レートが無くても購買履歴などから補完することもできる</li>
</ul>
</li>
<li>アクティブユーザの情報がメイン</li>
<li>ユーザ間の類似度を使う

<ul>
<li>一種のパーソナライズと取れる</li>
<li>ピアソンの相関係数/コサイン類似度</li>
</ul>
</li>
<li>あるユーザに類似したユーザを探しだしてレート付けされてない作品を推測する</li>
<li>ユーザベースの協調フィルタリング / アイテムベースの協調フィルタリング</li>
<li>協調フィルタリングの特徴

<ul>
<li>長所：最小限の情報で計算できて，だいたいにおいて性能が良い</li>
<li>短所：アイテム数が増えるとスパースになる＆スケールが難しい

<ul>
<li>ユーザ数xアイテム数のうち，値が入っているのはごく僅か(1%以下)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><strong>モデルベースの協調フィルタリング Model-based CF</strong></p>

<ul>
<li><p><a href="http://www.netflixprize.com/">Netflix Prize</a></p>

<ul>
<li>アルゴリズム的にRMSE基準でトップ2つのアルゴリズム

<ul>
<li>SVD</li>
<li>RBM</li>
</ul>
</li>
<li>今でもNetflixのレート推定の一部に使われている

<ul>
<li>SVD++とRBMの組み合わせ</li>
</ul>
</li>
</ul>
</li>
<li><p>Simon Funk's SVD</p>

<ul>
<li>Netflix Prizeで出てきた面白いアルゴリズム（Blogが初出）</li>
<li><a href="http://www.recsyswiki.com/wiki/SVD%2B%2B">SVD++</a></li>
</ul>
</li>
<li><p>Restricted Boltzmann Machines</p>

<ul>
<li>制限ボルツマンマシン</li>
<li><a href="http://machinelearning.wustl.edu/mlpapers/paper_files/icml2007_SalakhutdinovMH07.pdf">Restricted Boltzmann Machines for Collaborative Filtering</a></li>
</ul>
</li>
</ul>


<p><strong>クラスタリング Clustering</strong></p>

<p>クラスタリング：ユーザを特定の好みごとにクラスタリングして推薦する</p>

<ul>
<li>Locality-sensitive Hashing(LSH)

<ul>
<li>高次元空間で類似したアイテムをクラスタリングする手法</li>
<li>似たアイテムが近くにくるようなハッシュ関数を探す</li>
<li>最近傍探索(NN)によく使われる</li>
</ul>
</li>
<li>他のクラスタリングアルゴリズム

<ul>
<li>k-means</li>
<li>Affinity Propagation</li>
<li>Spectral Clustering</li>
<li>HDPs</li>
</ul>
</li>
</ul>


<p><strong>相関ルール Association Rule</strong></p>

<ul>
<li>アプリオリ・アルゴリズムなど</li>
</ul>


<p><strong>分類器 Classifiers</strong></p>

<ul>
<li>いわゆる普通の分類器

<ul>
<li>使い勝手が良くて組み合わせも可能だが，トレーニングセットが必要で正則化などが必要</li>
<li>ロジスティック回帰，ベイジアンネット，SVM，決定木など</li>
</ul>
</li>
</ul>


<p><strong>協調フィルタリングの限界 Limitations of Collaborative Filtering</strong></p>

<ul>
<li>コールドスタート問題

<ul>
<li>他のユーザの評価が十分に無いと機能しない</li>
<li>新しいアイテムなどで推薦が難しい</li>
</ul>
</li>
<li>人気バイアス

<ul>
<li>既に人気のあるアイテムを推薦しがち</li>
</ul>
</li>
</ul>


<h3>2.2 Content-based Recommenders</h3>

<ul>
<li>他のユーザの挙動ではなくアイテムの内容をベースにしたレコメンド

<ul>
<li>テキスト，キーワードなど</li>
</ul>
</li>
<li>目標：ユーザの好みに沿ったアイテムを推薦する</li>
<li>コンテンツベースのほうがうまくいくとは限らない

<ul>
<li><a href="http://dl.acm.org/citation.cfm?id=1639731">Recommending new movies: even a few ratings are more valuable than metadata</a>, RecSys2009</li>
</ul>
</li>
</ul>


<p><strong>コンテンツベースの特徴</strong></p>

<ul>
<li>長所

<ul>
<li>他のユーザ情報が不要なためコールドスタートやスパース性を考慮しなくて良い</li>
<li>ユーザ独自の好みに合わせることができる</li>
<li>新しいアイテムを推薦することができる</li>
<li>レコメンドの理由を説明しやすい</li>
</ul>
</li>
<li>短所

<ul>
<li>アイテムの内容から意味のある特徴量を抽出する必要がある</li>
<li>セレンディピティのある推薦が難しい</li>
<li>ユーザに最適化されすぎる</li>
</ul>
</li>
</ul>


<h3>2.3 Hybrid Approach</h3>

<ul>
<li>Content-based recommendation with Bayesian classifier</li>
<li>Hybridization Method

<ul>
<li>(see P.68)</li>
</ul>
</li>
</ul>


<h3>3. Beyond traditional Approarches to Recommendation</h3>

<h4>3.1 Ranking</h4>

<ul>
<li>ほとんどのレコメンドアルゴリズムは推薦するアイテムをソート済みのリストで返すから，レコメンドはランキングの問題とも捉えることができる</li>
<li>レートでランキングの順位を付ける</li>
<li>RMSEはランキングに使えない(?)

<ul>
<li>Linear modelで考えた時に，RMSEを最小にした結果ランキングに違いが生じる（Predicted RankingとFinal Rankingが違う）</li>
<li>(詳しくは図を参照)</li>
</ul>
</li>
<li>ランキングを測る指標

<ul>
<li>Normalized Discounted Cumulative Gain</li>
<li>Mean Reciprocal Rank (MRR)</li>
<li>Fraction of Concordant Pairs (FCP)</li>
</ul>
</li>
<li>最近はランキング指標自体を最適化する研究も</li>
</ul>


<h4>3.2 Similarity</h4>

<ul>
<li>SimRank

<ul>
<li>グラフベースの類似度を考える</li>
</ul>
</li>
<li>幾つかの類似度を組み合わせる

<ul>
<li>データごとに様々な類似度がある（e.g. タグ，ユーザの行動，ユーザのレート付け）</li>
<li>組み合わせの時の重みは回帰で学習する</li>
</ul>
</li>
</ul>


<h4>3.3 Deep Learning for Recommendation</h4>

<ul>
<li>Spotifyのプレイリスト推薦の例

<ul>
<li><a href="http://erikbern.com/?p=589">Recurrent Neural Networks for Collaborative Filtering | Erik Bernhardsson</a></li>
<li><a href="http://benanne.github.io/2014/08/05/spotify-cnns.html">Recommending music on Spotify with deep learning – Sander Dieleman</a></li>
</ul>
</li>
</ul>


<h4>3.4 Social Recommendations</h4>

<ul>
<li>(詳細は省略)</li>
</ul>


<h4>3.5 Page Optimization</h4>

<ul>
<li>どうやって推薦したアイテムを表示させるかというページ構成の話

<ul>
<li>デバイスによって表示できるアイテム数などが違う</li>
</ul>
</li>
<li>ユーザの注目度をモデリング，ヒートマップで可視化</li>
<li>限られた状態で何を重視するか

<ul>
<li>正確さか多様性か，新しものか続き物か，狭く深くか広く浅くか，など</li>
<li><a href="http://dl.acm.org/citation.cfm?id=2124337">Fair and balanced: learning to present news stories</a>,WSDM2014</li>
</ul>
</li>
<li>共存させるためのモデル

<ul>
<li>Navigational/Attention Model</li>
<li>Personalized Relevance Model</li>
<li>Diversity Model</li>
</ul>
</li>
</ul>


<h4>3.6 Tensor Factorization &amp; Factirization Machines</h4>

<ul>
<li>ユーザxアイテムxコンテキストのテンソルを[U,M,C]に分解する

<ul>
<li>Tensor Factorization</li>
</ul>
</li>
<li>Factorization Machines</li>
<li>(参考)

<ul>
<li><a href="http://qiita.com/ysks3n/items/c81ff24da0390a74fc6c">機械学習 - Matrix Factorizationとは - Qiita</a></li>
<li><a href="http://d.hatena.ne.jp/harapon1012/20140906/1410013995">すべてがMFになる - Fire and Motion</a></li>
</ul>
</li>
</ul>


<h4>3.7 MAB Explore/Exploit</h4>

<ul>
<li>多腕バンディット Multi-armed Bandits</li>
<li>パーソナライズは以下の2つのトレードオフ

<ul>
<li>Exploitation：活用</li>
<li>Exploration：探索</li>
</ul>
</li>
<li><a href="http://www.ueo-workshop.com/wp-content/uploads/2013/10/UEO-Deepak.pdf">http://www.ueo-workshop.com/wp-content/uploads/2013/10/UEO-Deepak.pdf</a>, CIKM2013</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スライドメモ："Differential expression analysis of de novo assembled transcriptomes - Nadia Davidson"]]></title>
    <link href="http://yagays.github.io/blog/2013/06/18/slide-diffexp-denovo-assembled-transcriptomes/"/>
    <updated>2013-06-18T13:43:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/06/18/slide-diffexp-denovo-assembled-transcriptomes</id>
    <content type="html"><![CDATA[<p>de novoトランスクリプトームアセンブリに関して配列クラスタリングを解説しているスライドがあったので，ちょっと読んで大まかな流れを追ってみた．ただし後半のクラスタリングの具体的な部分は少し割愛しているほか，内容の正確性は保証できないので注意．</p>

<h2>de novoトランスクリプトームアセンブリの発現差異解析</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/18507979?rel=0" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/AustralianBioinformatics/differential-expression-analysis-of-de-novo-assembled-transcriptomes" title="Differential expression analysis of de novo assembled transcriptomes - Nadia Davidson" target="_blank">Differential expression analysis of de novo assembled transcriptomes - Nadia Davidson</a> </strong> from <strong><a href="http://www.slideshare.net/AustralianBioinformatics" target="_blank">Australian Bioinformatics Network</a></strong> </div></p>

<h4>非モデル生物におけるRNA-Seq</h4>

<ul>
<li>非モデル生物におけるRNA-Seq；トランスクリプトームのde novoアセンブル

<ul>
<li>ゲノムアノテーションやゲノム配列が無い状態での解析</li>
</ul>
</li>
</ul>


<h4>トランスクリプトームアセンブラ</h4>

<p>ゲノムアセンブリにおいてはカバレッジに合わせてk-merの長さを最適化していたが，トランスクリプトームアセンブリでは遺伝子ごとに発現量が違うためカバレッジに大きな幅がある</p>

<ul>
<li>解決方法1：ゲノムアセンブラを使って異なるk-merのアセンブル結果を組み合わせる

<ul>
<li><a href="http://www.bcgsc.ca/platform/bioinfo/software/trans-abyss">Trans-ABySS</a>や<a href="http://www.ebi.ac.uk/~zerbino/oases/">Oases</a></li>
</ul>
</li>
<li>解決方法2：トランスクリプトームに特化したアセンブラで単一のk-merでアセンブルする

<ul>
<li><a href="http://trinityrnaseq.sourceforge.net/">Trinity</a></li>
</ul>
</li>
</ul>


<h4>リード数の増加によるアセンブル配列の増加</h4>

<p>横軸がNGSで得られたリード数，縦軸がアセンブルされた配列数を表しており，データ数が増加するにしたがってアセンブルされる配列数も線形に増加する．</p>

<p>スライドでは著者名が間違っているが，ここで引用している図は以下の論文のもの．</p>

<blockquote><p>Francis, W. R. et al. A comparison across non-model animals suggests an optimal sequencing depth for de novo transcriptome assembly. BMC Genomics 14, 167 (2013).</p>

<p><a href="http://www.biomedcentral.com/1471-2164/14/167">http://www.biomedcentral.com/1471-2164/14/167</a></p></blockquote>

<p>余談だが，この論文によるとデータ数が増加するとアセンブルされた配列数が増えるものの，アセンブルされた配列の平均長やN50は途中でサチることが確認されている．この論文の結論としてはデータ数は20M〜30M付近で十分だよねという感じらしい．</p>

<h4>De Bruijn Graphの複雑性</h4>

<p>シーケンスエラーやヘテロ接合箇所などの僅かな配列の違いも異なる配列として出力</p>

<h4>カバレッジの変動</h4>

<p>単一遺伝子内でNGSのショートリードのカバレッジに差があると，複数本の細切れの配列になってしまうことがある</p>

<h4>アイソフォーム単位で発現解析するか遺伝子単位で発現解析するか？</h4>

<ul>
<li>アイソフォーム単位

<ul>
<li>扱う配列が多くなるので大変</li>
<li>発現量解析のときに複数箇所にマッピングされる配列が生じるので発現量推定が大変</li>
<li>全ての転写物に関してアイソフォームがあるわけではない</li>
</ul>
</li>
<li>遺伝子単位

<ul>
<li>スプライシングなどを無視することになる</li>
<li>どうやって複数の転写物を幾つかの遺伝子にまとめるのか？</li>
</ul>
</li>
</ul>


<h4>どうやってアセンブルされた転写物を遺伝子単位にクラスタリングするのか</h4>

<p>アセンブルされた転写物のクラスタリングにおいて決定打は無いものの，幾つか方法はある（配列で共通している箇所を見つけてクラスタリングするとか）</p>

<h4>クラスタリングする際に使える情報</h4>

<ul>
<li>アセンブルする際に出力されるlocus/componentの情報</li>
<li>CD-HITやBlastclustなどの配列相同性によるクラスタリングツール</li>
</ul>


<h4>クラスタリングにはTP・TN・FP・FNを数えて適合率Precisionや再現率Recallを見る</h4>

<p>どうやらTrinityのクラスタリングは良くて，OasesとCD-HIT-ESTの組み合わせは良くないらしい（Trinity's clusteringはRSEMのこと？）</p>

<ul>
<li>CD-HIT-ESTは適合率は高いが再現率は低い

<ul>
<li>配列情報しか使用しないので精度が低い</li>
</ul>
</li>
<li>考えられる他の方法

<ul>
<li>発現量が低い領域は重みを軽くしたい</li>
<li>サンプル間で発現量の違う配列は区別したい</li>
<li>ペアエンドリードを考慮したい</li>
</ul>
</li>
</ul>


<h4>(クラスタリングの具体的な部分は省略)</h4>

<h4>どのようにしてリード数から発現量に変換するのか</h4>

<ul>
<li>TrinityやOasesが推奨する方法

<ul>
<li>アセンブルされた配列に対してマッピング（複数箇所にマップされてもいい）</li>
<li>複数箇所にマップされた配列も考慮して発現量を求めるプログラムを使う(RSEMとか)</li>
</ul>
</li>
</ul>


<p>実際に行われている方法としてよくあるのは，一番長くアセンブルされた配列に代表させてマッピングして発現量を推定するというもの</p>

<h4>まとめ</h4>

<ul>
<li><strong>Q1. なんでそんなにアセンブルされた転写物が出てくるの？</strong>

<ul>
<li>既にアノテーションされている転写物よりも多くアセンブルされるから</li>
<li>de novoトランスクリプトームアセンブリはそもそも難しいから（完全長のアセンブリは目指しているのだけれども）</li>
<li>インタージェニックやノンコーティングの転写物も多くでてくるから</li>
</ul>
</li>
<li><strong>Q2. アイソフォーム単位か遺伝子単位か</strong>

<ul>
<li>遺伝子単位の方がアイソフォーム単位より良さそう</li>
</ul>
</li>
<li><strong>Q3. どうやってアセンブルされた転写物から遺伝子にクラスタリングするか</strong>

<ul>
<li>Trinityのクラスタリングは良くて，OasesとCD-HIT-ESTの組み合わせは良くない</li>
</ul>
</li>
<li><strong>Q4. どのようにしてリード数から発現量に変換するのか</strong>

<ul>
<li>3つの異なる方法で検証したが似た結果を示した</li>
<li>正確なクラスタリングによる結果を得るほうが他のパイプラインを使って発現量差異を見るほうがインパクトがある（と主張している）</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
