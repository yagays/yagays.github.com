<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SOAPdenovo2 | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.io/blog/categories/soapdenovo2/atom.xml" rel="self"/>
  <link href="http://yagays.github.io/"/>
  <updated>2014-05-12T09:06:40+09:00</updated>
  <id>http://yagays.github.io/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SOAPdenovo2がGPLv3を宣言しているにも関わらずソースコードを公開していない件について]]></title>
    <link href="http://yagays.github.io/blog/2012/12/28/soapdenovo2-gplv3/"/>
    <updated>2012-12-28T14:48:00+09:00</updated>
    <id>http://yagays.github.io/blog/2012/12/28/soapdenovo2-gplv3</id>
    <content type="html"><![CDATA[<p>つい先日<a href="http://www.gigasciencejournal.com/content/1/1/18/abstract">SOAPdenovo2というゲノムアセンブリのツールに関する論文</a>が公開されたのだが，このツールのライセンスに関して問題が出ているようだ．というもの，SOAPdenovo2の論文内で宣言されているライセンスがGNU General Public License version 3.0 (GPLv3)にも関わらず，ツールの配布はバイナリ形式に限定されており，そのソースコードが公開されていない状態になっているからだ．SOAPdenovo2の公開とライセンスに関する問題は，以下のBlogで詳しく取り上げられている．</p>

<ul>
<li><a href="http://dskernel.blogspot.ca/2012/12/the-source-code-of-soapdenovo2-sits-in.html">The Bioinformatics Adventure: The source code of SOAPdenovo2 sits in the shadows</a></li>
<li><a href="http://www.homolog.us/blogs/2012/12/27/should-soapdenovo2-source-code-be-made-public/">Should SOAPdenovo2 Source Code be Made Public? « Homologus</a></li>
</ul>


<p>SOAPdenovo2は，<a href="http://soap.genomics.org.cn/soapdenovo.html">SOAPdenovo</a>というアセンブリツールの改良版として開発が進められてきたソフトフェアである．以前からバイナリ形式での配布は行われており，アップデートも度々行われてきたという経緯がある．そして今回SOAPdenovo2の論文がアクセプトされて公開されたわけだが，それでもなおソースコードが未だに手に入らない状態となっている．</p>

<p>この問題に関して，上記Blogでリンクが貼られている<a href="http://www.gigasciencejournal.com/imedia/1713065231860845_comment.pdf">論文のReviewer's report</a>に書かれている通り，論文著者は「論文がアクセプトされたらすぐにでもソースコードを公開する予定だ」と言っていたようだが，実際はそうならなかったらしい．これに対し論文誌の中の人が<a href="http://dskernel.blogspot.jp/2012/12/the-source-code-of-soapdenovo2-sits-in.html?showComment=1356635323574#c1974728922130779068">コメント</a>しており，すぐにでもソースコードを公開させるとのことだが，現在のところ(2012/12/28 14:00)SOAPdenovo2のソースコードは公開されていない．</p>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/files/SOAPdenovo2/src/revision223/">http://sourceforge.net/projects/soapdenovo2/files/SOAPdenovo2/src/revision223/</a></li>
</ul>


<h3>追記(2012/12/28 18:30)</h3>

<p>どうやら公開されたようだ．</p>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/files/SOAPdenovo2/src/r223/">http://sourceforge.net/projects/soapdenovo2/files/SOAPdenovo2/src/r223/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOAPdenovo2のインストール方法]]></title>
    <link href="http://yagays.github.io/blog/2012/10/13/soapdenovo2-install/"/>
    <updated>2012-10-13T07:30:00+09:00</updated>
    <id>http://yagays.github.io/blog/2012/10/13/soapdenovo2-install</id>
    <content type="html"><![CDATA[<p>前回<a href="http://yagays.github.com/blog/2012/10/11/soapdenovo2-stats/">SOAPdenovo2の話</a>を書いたが，そういえばSOAPdenovo2といえばインストールまわりが不親切だったので，ちょっと解説みたいなものを書いてみる．</p>

<h3>ダウンロード</h3>

<p>SOAPdenovoのパッケージがおかれているSourceForgeにアクセスする</p>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
</ul>


<p>まずここで注意しなければいけないのは，緑のアイコンででかでかと表示されている「Download」をクリックしてはいけないということだ．よくよく見ると「GapCloser」と書いてあり，これは本体とは別のプログラムファイルである．欲しいのはSOAPdenovo2の実行ファイルなので，「Browse All File」をクリックしてアップロードされているファイルの中から欲しいものを探す．なお，上部の「File」をクリックしても同じ．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_1.jpg" alt="" /></p>

<p>「bin」をクリックする．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_2.jpg" alt="" /></p>

<p>これでSOAPdenovo2の一連のファイルが表示される．この中で必要なのは「SOAPdenovo2_revision210.tgz」というファイル．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_3.jpg" alt="" /></p>

<p>そして「SOAPdenovo2_revision210.tgz」クリックすると，ページが遷移したあと自動でダウンロードが開始される．もしサーバなどにダウンロードしたい場合は，画面上部にある「Direct link」のリンクURLを使って以下のようにwgetなどでダウンロードする．</p>

<p><code>bash
$ wget http://downloads.sourceforge.net/project/soapdenovo2/bin/SOAPdenovo2_revision210.tgz
</code></p>

<h3>解凍およびインストール</h3>

<p>あとは，ダウンロードしたSOAPdenovo2_revision210.tgzを解凍するだけでSOAPdenovo2のバイナリが得られる．SOAPdenovo2はまだソースコードの公開をしておらず，プログラムはすべて実行可能なバイナリ形式で配布されている．</p>

<p><code>
$ tar zxvf SOAPdenovo2_revision210.tgz
</code></p>

<p>なお，上記のコマンドでは，カレントディレクトリに全てのファイルが展開されるので，もし特定のディレクトリに展開したい場合には，以下のように<strong><code>-C</code></strong>オプションを付ける．展開先のディレクトリが無いとエラーになるので，実行前に<strong><code>mkdir</code></strong>などで作っておく．</p>

<p><code>
$ tar zxvf SOAPdenovo2_revision210.tgz -C path/to/SOAPdenovo2_revision210
</code></p>

<p>展開すると，以下のようになる．</p>

<p><code>bash
$ ls -l
total 7040
-rw-r--r-- 1 yag_ays users   16199 Sep 13 15:54 MANUAL
-rwxr-xr-x 1 yag_ays users 1958292 Sep 13 13:50 pregraph_sparse_127mer.v1.0.3*
-rwxr-xr-x 1 yag_ays users 1941908 Sep 13 13:50 pregraph_sparse_63mer.v1.0.3*
-rwxr-xr-x 1 yag_ays users 1718828 Sep 13 13:49 SOAPdenovo-127mer*
-rwxr-xr-x 1 yag_ays users 1562546 Sep 13 13:49 SOAPdenovo-63mer*
</code></p>

<p><strong>SOAPdenovo-63mer</strong>と<strong>SOAPdenovo-127mer</strong>がSOAPdenovo2の本体になる．ここで少し注意が必要なのだが，SOAPdenovo2なのに実行ファイル名がSOAPdenovoとなっていてややこしいのに加えて，SOAPdenovoは「SOAPdenovo63mer」なのに対し，今回はK-merの値の前にハイフンが入っていて余計混乱を招きそうな名前になっている．パイプラインで処理させている人は，名前の変更に注意しよう．</p>

<p>また，SOAPdenovo2では新たに<strong>pregraph_sparce</strong>というモジュールが追加されている．これは，SOAPdenovo2のアセンブル第1段階で行われるpregraphというコマンドの改良版で，コンティグとしてグラフをつなげていく前段階で候補を減らしておき，後々の処理の無駄を省くというもののようだ．基本的にSOAPdenovo2を実行するだけならpregraph_sparseは必要ないが，高速化をしたいといった場合には試してみてもいいと思われる．pregraph_sparseの詳しい使い方はMANUALに書かれているので，そちらを参考していただきたい．ちなみに，MANUALでは"consumption"の綴りが間違っている．</p>

<h3>実行の確認</h3>

<p>ファイルを展開したディレクトリでSOAPdenovo2を実行して，以下のようにバージョンとヘルプが表示されれば，インストールは成功している．なお，いまのところLinuxにしか対応してないようで，Mac OS Xでは実行できないので注意．</p>

<p>```
$ ./SOAPdenovo-63mer</p>

<p>Version 2.04: released on July 13th, 2012
Compile Sep 13 2012     12:48:54</p>

<p>Usage: SOAPdenovo <command> [option]</p>

<pre><code>pregraph     construct kmer-graph
contig       eliminate errors and output contigs
map          map reads to contigs
scaff        construct scaffolds
all          do all the above in turn
</code></pre>

<p>```</p>

<h3>最後に愚痴</h3>

<p>そもそも，SourceForgeは様々なプログラムが配布場所として使用しているが，そもそも色々と不便で分かりにくい．広告が多い上に画面がごちゃごちゃしていて構造を把握しづらいし，ファイルを自動ダウンロードにしてるのもいい迷惑だし，慣れていないとなかなかに辛いものがある．元のプロジェクトの概要を機械翻訳で日本語にしただけの有りもしない日本語版のページなど，Google検索などでのノイズも非常に多い．まあ結論としては，今回はこれが言いたかっただけです，はい．</p>

<h3>参考</h3>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
<li><a href="http://cell-innovation.nig.ac.jp/wiki/tiki-index.php?page=SOAPdenovo%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%AD%E3%82%B0">http://cell-innovation.nig.ac.jp/wiki/tiki-index.php?page=SOAPdenovo%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%AD%E3%82%B0</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOAPdenovo2のアセンブル情報を集計するスクリプト]]></title>
    <link href="http://yagays.github.io/blog/2012/10/11/soapdenovo2-stats/"/>
    <updated>2012-10-11T16:08:00+09:00</updated>
    <id>http://yagays.github.io/blog/2012/10/11/soapdenovo2-stats</id>
    <content type="html"><![CDATA[<p>SOAPdenovo2になって，アセンブリで得られた配列の統計情報がscafStatisticsというファイルに出力されるようになった．そのため，自分でアセンブリ結果を解析しなくとも，コンティグ数やN50などの基本情報をチェックすることができる……のだが，scafStatisticsは項目を並べただけのテキストファイルなので，複数のアセンブリ結果を比較しようと思った場合，いちいちファイルを開いて統計情報を集計するのが非常に面倒になる．</p>

<p>ということで，SOAPdenovo2のアセンブルで出力される情報を一つにまとめるスクリプトを簡単に書いてみた．タブ区切りテキストで出力されるので，Excelなどでも見やすいようにしてある．</p>

<br />


<h2>インストール</h2>

<ul>
<li><a href="https://gist.github.com/3870629">https://gist.github.com/3870629</a></li>
</ul>


<p>上記のgistに置いてあるソースコードをダウンロードするか，wgetでソースコードを落としてくる．</p>

<p><code>bash
$ wget --no-check-certificate https://raw.github.com/gist/3870629/6547d69e768e3d87a140d6405fdf19102ff525cb/soapdenovo2_stats.rb    
</code></p>

<p>動作確認はRuby 1.8.7および1.9.3で行っているが，まあ変なことはしてないのでどんな環境でもだいたい動くと思う．RubyのバージョンよりかはSOAPdenovo2の未知の部分や仕様変更などが怖いわけで，そもそも以下のデータセットで出てきたscafStatisticsを参考にしているため，SOAPdenovo2のパラメータなどによっては期待通りの動きをしないかもしれない．あと，例外処理などをあまり真面目に書いていないので，入力ファイルが見つからない場合にエラーを吐かなかったりするが，そこらへんは後々修正するかも．</p>

<br />


<h2>使い方</h2>

<h3>基本的な使い方</h3>

<p><strong><code>ruby soapdenovo2_stats.rb</code></strong>のあとにscafStatisticsのファイルを並べるだけ．標準出力に表示される情報は，scafStatistics内のInformation for assembly Scaffoldのうち，重要な統計量のみとなっている．</p>

<p><code>
$ ruby soapdenovo2_stats.rb path/to/k23.scafStatistics path/to/k25.scafStatistics
Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
</code></p>

<h3>その他の詳細な統計量を出力する</h3>

<p><strong><code>-a</code></strong>または<strong><code>--all</code></strong>オプションをつけることでscafStatistics内のすべての統計量を出力するようにしている．また，<strong><code>-c</code></strong>または<strong><code>--contig</code></strong>オプションをつけることによって，ScaffoldではなくContigの情報（scafStatistics内のInformation for assembly Contig より下側の情報）を出力できる．</p>

<p><code>bash
$ ruby soapdenovo2_stats.rb -a -c path/to/k23.scafStatistics
Size_includeN   Size_withoutN   Contig_Num      Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Contig&gt;100      Contig&gt;100 (%)  Contig&gt;500      Contig&gt;500 (%)  Contig&gt;1K       Contig&gt;1K (%)   Contig&gt;10K      Contig&gt;10K (%)  Contig&gt;100K     Contig&gt;100K (%) Contig&gt;1M       Contig&gt;1M (%)   Nucleotide_A    Nucleotide_A (%)        Nucleotide_C    Nucleotide_C (%)    Nucleotide_G    Nucleotide_G (%)        Nucleotide_T    Nucleotide_T (%)        GapContent_N    GapContent_N (%)        Non_ACGTN       Non_ACGTN (%)   GC_Content      N10     Contigs &gt;0 in N10       N20     Contigs &gt;0 in N20       N30     Contigs &gt;0 in N30       N40     Contigs &gt;0 in N40       N50     Contigs &gt;0 in N50       N60     Contigs &gt;0 in N60   N70     Contigs &gt;0 in N70       N80     Contigs &gt;0 in N80       N90     Contigs &gt;0 in N90       NG50    Contigs &gt;0 in NG50      N50_contig-NG50_contig_length_difference        Number_of_contigs_in_scaffolds  Number_of_contigs_not_in_scaffolds(Singleton)   Average_number_of_contigs_per_scaffold
4533843 4533843 845     5365    2919    55290   100     840     99.41   646     76.45   589     69.7    147     17.4    0       0.0     0       0.0     1122311 24.75   1154274 25.46   1146494 25.29   1110764 24.5    0       0.0     0       0.0     50.75   29554   13      21527   31      17094   55      13748   85      11457   121     9180    165     7136    2225257     296     3315    403     NaN     NaN     NaN     0       845     0
</code></p>

<h3>ワイルドカードを使って入力ファイルを複数指定する</h3>

<p>Zshなどのシェルコマンドと同様に，入力ファイルの指定には<strong><code>*</code></strong>や<strong><code>?</code></strong>などのワイルドカードなどが使用できる．</p>

<p><code>bash
$ ruby soapdenovo2_stats.rb  path/to/*.scafStatistics
Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
k27.scafStatistics      4539473 4539473 578     7853    3781    79498   100     578     18157
k29.scafStatistics      4544164 4544164 570     7972    3672    103369  100     570     17945
k31.scafStatistics      4550461 4550461 621     7327    3306    77302   100     621     17052
k33.scafStatistics      4582773 4582773 1655    2769    1688    22953   100     1655    5435
k35.scafStatistics      2393501 2393501 16300   146     132     1345    105     16300   142
</code></p>

<h3>特定のカラムでソートする</h3>

<p><strong><code>-s</code></strong>オプションを使うことで，特定のカラムで値をソートした結果を出力することができる．ここではN50を降順で並び替えており，一番右端の列を見るとN50が一番大きいものはk=27であったことがわかる．</p>

<p><code>bash
$ ruby soapdenovo2_stats.rb -s N50 path/to/*.scafStatistics
Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
k27.scafStatistics      4539473 4539473 578     7853    3781    79498   100     578     18157
k29.scafStatistics      4544164 4544164 570     7972    3672    103369  100     570     17945
k31.scafStatistics      4550461 4550461 621     7327    3306    77302   100     621     17052
k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
k33.scafStatistics      4582773 4582773 1655    2769    1688    22953   100     1655    5435
k35.scafStatistics      2393501 2393501 16300   146     132     1345    105     16300   142
</code></p>

<h2>今回用いたサンプルデータ</h2>

<p>なお，今回上記で示したデータは，E.coliのSRR001665のデータを用いてSOAPdenovo2_revision210でアセンブルしたものを使用している．アセンブルのコマンドとconfigファイルは以下のとおり．SEQanswersのWikiにあったExampleをそのまま使わせてもらっている（ <a href="http://seqanswers.com/wiki/How-to/de_novo_assembly#SOAP_denovo">http://seqanswers.com/wiki/How-to/de_novo_assembly#SOAP_denovo</a>）．</p>

<p><code>bash
$ SOAPdenovo-63mer all -K 25 -R -s cont.config -o output/k25
</code></p>

<ul>
<li>cont.config</li>
</ul>


<p>```</p>

<h1>maximal read length</h1>

<p>max_rd_len=36
[LIB]</p>

<h1>average insert size</h1>

<p>avg_ins=200</p>

<h1>if sequence needs to be reversed</h1>

<p>reverse_seq=0</p>

<h1>use for contig building only</h1>

<p>asm_flags=1</p>

<h1>in which order the reads are used while scaffolding</h1>

<p>rank=1</p>

<h1>fastq files</h1>

<p>q1=/home/yag_ays/tmp/soapdenovo2_testrun/SRR001665_1.fastq
q2=/home/yag_ays/tmp/soapdenovo2_testrun/SRR001665_2.fastq
```</p>

<h3>参考</h3>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
<li><a href="http://www.homolog.us/blogs/2012/07/10/testing-soapdenovo2-prerelease-v-map-and-scaff/">http://www.homolog.us/blogs/2012/07/10/testing-soapdenovo2-prerelease-v-map-and-scaff/</a></li>
</ul>


<h3>ソースコード</h3>

<!-- more -->


<p><div><script src='https://gist.github.com/3870629.js'></script>
<noscript><pre><code>#/usr/bin/env ruby

require &quot;optparse&quot;

def v(s)
  if s == &quot;NaN&quot;
    return s
  elsif s.include?(&quot;%&quot;)
    return s.gsub(&quot;%&quot;,&quot;&quot;).to_f
  else
    return s.to_i
  end
end

def parse_scafstatistics(file)
  stats = []
  header = []
  open(file) { |f|
    header &lt;&lt; &quot;Filename&quot;
    stats &lt;&lt; File.basename(file)
    f.each_line do |line|
      if !line.include?(&quot;&lt;--&quot;) &amp;&amp; line != &quot;\n&quot;
        l = line.chomp.split(&quot;\t&quot;)
        if l[0] == &quot;GC_Content&quot;
          header &lt;&lt; l[0]
          stats &lt;&lt; v(l[1])
        elsif l.length == 3
          if l[2].include?(&quot;%&quot;)
            header &lt;&lt; l[0].strip
            header &lt;&lt; l[0].strip + &quot; (%)&quot;
            stats &lt;&lt; v(l[1])
            stats &lt;&lt; v(l[2])
          else
            header &lt;&lt; l[0]
            header &lt;&lt; &quot;Contigs &gt;0 in &quot; + l[0]
            stats &lt;&lt; v(l[1])
            stats &lt;&lt; v(l[2])
          end
        else
          header &lt;&lt; l[0]
          stats &lt;&lt; v(l[1])
        end
      end
    end
  }
  return header, stats
end

def print_tsv(header, stats, print_all, print_scaffold)
  h = []
  s = []
  if print_scaffold
    if print_all
      h = header[0..57]
      s = stats.map{|a| a[0..57]}
    else
      h = [header[0..8],header[45]]
      s = stats.map{|a| [a[0..8],a[45]]}
    end
  else
    if print_all
      h = header[58..header.length]
      s = stats.map{|a| a[58..a.length]}
    else
      h = [header[58..65].flatten,header[98]]
      s = stats.map{|a| [a[58..65].flatten,a[98]]}
    end
  end
  puts h.join(&quot;\t&quot;)
  s.each do |f|
    puts f.join(&quot;\t&quot;)
  end
end


if __FILE__ == $PROGRAM_NAME
  header = []
  stats = []

  sort_column = nil
  print_all = false
  print_scaffold = true

  ARGV.options do |opt|
    opt.on( &quot;-a&quot;,&quot;--all&quot;) { print_all = true }
    opt.on( &quot;-s VAL&quot;,&quot;--sort&quot;) { |a| sort_column = a }
    opt.on( &quot;-c&quot;, &quot;--contig&quot;) { print_scaffold = false }
    opt.on( &quot;-h&quot;,&quot;--help&quot;) { puts opt ;exit }
    opt.parse!
  end

  Dir.glob(ARGV).each do |f|
    h, s = parse_scafstatistics(f)
    header = h
    stats &lt;&lt; s
  end

  if sort_column
    i = header.index(sort_column)
    if i == nil
      puts &quot;ERROR : unknown column name '#{sort_column}' &quot;
      exit 1
    end
    stats = stats.sort{|a,b| b[i] &lt;=&gt; a[i] }
  end

  print_tsv(header, stats, print_all, print_scaffold)
end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
