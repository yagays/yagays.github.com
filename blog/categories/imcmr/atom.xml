<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: imcmr | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.com/blog/categories/imcmr/atom.xml" rel="self"/>
  <link href="http://yagays.github.com/"/>
  <updated>2012-11-17T02:15:04+09:00</updated>
  <id>http://yagays.github.com/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 確率的勾配法]]></title>
    <link href="http://yagays.github.com/blog/2012/11/11/imcmr-5-4/"/>
    <updated>2012-11-11T06:17:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/11/11/imcmr-5-4</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：確率的勾配法(Stochastic Gradient Methods)で関数の最大値を求める</h3>

<p>目的関数からの直接的なシミュレーションが難しい場合，関数の表面をローカルになぞって最大値を探索するという手法が使える．探索に用いる系列は以下のように表す事ができる．</p>

<p>{% gctex \theta_{j+1} = \theta_j +  \epsilon_j %}</p>

<p>これは現在のステップに摂動項{% gctex \epsilon_j %}を加えて次のステップとすることを表している．つまりこれはマルコフ連鎖となるのだが，今回はそれほどマルコフ性は重要にはならない．</p>

<p>概念的に目的関数の分布を山の斜面と考えるならば，現在の位置からちょっと動いて…を繰り返して山を登っていくような動きをする．ただし，単純に傾斜の上の方に登っていくのではなく，どちらかに進むかはランダムなので，たまに斜面を下ったりもする．その試行を繰り返していくことで，山の頂上を目指すような方法となっている．</p>

<h4>有限差分法</h4>

<p>有限差分法では，関数の勾配は</p>

<p>{% gctex \nabla h(\theta_j) \approx \frac{h(\theta_j+\beta_j\zeta_j)-h(\theta_j-\beta_j\zeta_j)}{2\beta_j}\zeta_j = \frac{\Delta h(\theta_j,\beta_j\zeta_j)}{2\beta_j}\zeta_j %}</p>

<p>とし，摂動項{% gctex \epsilon_j %}を組み込んだ系列の更新は以のようになる．</p>

<p>{% gctex \theta_{j+1} = \theta_j +  \frac{\alpha_j}{2\beta_j}\Delta h(\theta_j,\beta_j\zeta_j)\zeta_j %}</p>

<h3>例 5.7</h3>

<p><a href="http://yagays.github.com/blog/2012/11/06/imcmr-5-3/">例5.6</a>の続き．有限差分法を用いて以下の式を最小化することを目的とする．</p>

<p>{% gctex h(x,y)=(x\sin(20y)+y\sin(20x))<sup>2\cosh(\sin(10x)x)+</sup> (x\cos(10y)-y\sin(10x))<sup>2\cosh(\cos(20y)y)</sup> %}</p>

<p>今回は最大化ではなく最小化することが目的なので，この関数をマイナスにする必要がある．</p>

<p>```r
h &lt;- function(x){
  -(x[1]<em>sin(20</em>x[2]) + x[2]<em>sin(20</em>x[1]))<sup>2</sup> * cosh(sin(10<em>x[1])</em>x[1]) -</p>

<pre><code>(x[1]*cos(10*x[2]) - x[2]*sin(10*x[1]))^2 * cosh(cos(20*x[2])*x[2])
</code></pre>

<p>}
```</p>

<h4>アルゴリズム</h4>

<ul>
<li>勾配の値が10<sup>-5</sup> になるまで以下を繰り返す

<ol>
<li>{% gctex \zeta_j %}を生成する</li>
<li>{% gctex \theta_{j} %}を使って勾配{% gctex \frac{\alpha_j}{2\beta_j}\Delta h(\theta_j,\beta_j\zeta_j)\zeta_j %}を生成する</li>
<li>{% gctex \theta<em>{j}+\epsilon_j %}を{% gctex \theta</em>{j+1} %}とする</li>
<li>{% gctex \alpha_j %}と{% gctex \beta_j %}を更新する</li>
</ol>
</li>
</ul>


<p>なお，実際のソースコードでは勾配の値が発散しないように，scaleが1以上になった場合には内部でループをして値を再計算するようにしている．</p>

<br />




<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274068307" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h4>{% gctex \zeta_j %}の生成方法と有限差分法における役割</h4>

<p>さて，ここで有限差分法のポイントとなる{% gctex \zeta_j %}に関して，実際にどうやって値を生成するのか，そしてこの値がどういう意味を持っているかについて考えてみる．</p>

<p>まずは{% gctex \zeta_j %}の生成方法について．本文中では<strong>「{% gctex \zeta_j %}は単位球{% gctex \| \zeta_j \| = 1 %}上に一様に分布しています」</strong>とあるだけで，コードの方を参照してみてもzeta / sqrt(t(zeta) %*% zeta)としか書かれていない．ではこれは一体何をしているのかというと，一言で言うと「球面上の一様分布から乱数を生成する」，つまり今回の場合は単位円の円周の上からある一点を取ってきて{% gctex \zeta_j %}の値にするということをしている．</p>

<p>このような球面上の一様分布に関しては「<a href="http://www.amazon.co.jp/gp/product/4274068307/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4274068307&linkCode=as2&tag=yagays-22">Ｒによる計算機統計学</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4274068307" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」のP.96に詳しく書かれており，この本ではD次元の球面上の一様乱数を生成する方法についてrunif.sphere()関数を定義している．今回の場合はxとyの2次元について考えているので，「<a href="http://www.amazon.co.jp/gp/product/4274068307/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4274068307&linkCode=as2&tag=yagays-22">Ｒによる計算機統計学</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4274068307" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」に倣ってrunif.sphere(1,2)とすれば，{% gctex \zeta_j %}と同様の値が得られる．</p>

<p>```r</p>

<h1>Ｒによる計算機統計学 P.87より</h1>

<h1>http://personal.bgsu.edu/~mrizzo/SCR/SCRch3.R</h1>

<p>runif.sphere &lt;- function(n, d) {</p>

<pre><code># return a random sample uniformly distributed
# on the unit sphere in R ^d
M &lt;- matrix(rnorm(n*d), nrow = n, ncol = d)
L &lt;- apply(M, MARGIN = 1,
           FUN = function(x){sqrt(sum(x*x))})
D &lt;- diag(1 / L)
U &lt;- D %*% M
U
</code></pre>

<p>}
```</p>

<p>次に，有限差分法における{% gctex \zeta_j %}の役割について考えてみる．</p>

<p>そもそも，確率的勾配法はローカルに関数の表面をなぞるように探索して，値の大きいポイントを探す確率的なアプローチだった．概念的には，<a href="http://yagays.github.com/blog/2012/11/06/imcmr-5-3/">前回3Dプロットをした</a>ような山みたいになっている関数の上をあちこち動いて頂上を探し出すということだが，あちこち動きまわるためには，歩く「方向」と「距離」を考えなければならない．今回の有限差分法における勾配は{% gctex \epsilon_j = \frac{\alpha_j}{2\beta_j}\Delta h(\theta_j,\beta_j\zeta_j)\zeta_j %}で表されていたが，その「方向」が{% gctex \zeta_j %}，「距離」が{% gctex \frac{\alpha_j}{2\beta_j}\Delta h(\theta_j,\beta_j\zeta_j) %}に対応している．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-7_3.png" alt="" /></p>

<p>では実際に{% gctex \zeta_j %}と勾配{% gctex \epsilon_j %}を図示して，「方向」と「距離」の意味を確かめてみよう．以下の図は，{% gctex \zeta_j %}の取りうる単位円と，赤い矢印{% gctex \zeta_j %}，黒い矢印{% gctex \epsilon_j %}を示した図になっている（{% gctex j=1 %}）．この図を見ると，赤い矢印で方向が示され，黒い矢印でどれくらいの距離を進むかが見て取れる．{% gctex \zeta_j %}は乱数で生成された値なので，本書の「そのつど方向をランダムに選択する」という勾配の説明の通り，単位円の円周上からどこか一点を選択して進む方向を決めている．</p>

<p>といったように，この有限差分法では関数の山の傾斜を考えて進む方向を決めるのではなく，何も考えずに動いてみるといったアプローチとなっている．ただし，距離に関しては別で，関数を使って傾斜を見つつ調整しているので，その点は注意．</p>

<p><code>r
plot(runif.sphere(1000,2), xlim=c(-2,2), ylim=c(-2,2), cex=0.1)
arrows(0,0,grad[1],grad[2], lwd=2)             # 黒の矢印が勾配
arrows(0,0,zeta[1],zeta[2], lwd=2, col="red")  # 赤の矢印がゼータ
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-7_2.png" alt="" /></p>

<h4>今回実験を行う4つのシナリオ</h4>

<p>この有限差分法において，{% gctex \alpha_j %}と{% gctex \beta_j %}の系列の更新式は任意に設定できる．今回は4つのシナリオを用意して実験を行った．それぞれのシナリオの更新式は以下の通り．</p>

<ul>
<li>シナリオ1：{% gctex 1/\log(j+1) %}，{% gctex 1/\log(j+1)<sup>{0.1}</sup> %}</li>
<li>シナリオ2：{% gctex 1/100\log(j+1) %}，{% gctex 1/\log(j+1)<sup>{0.1}</sup> %}</li>
<li>シナリオ3：{% gctex 1/(j+1) %}，{% gctex 1/(j+1)<sup>{0.5}</sup> %}</li>
<li>シナリオ4：{% gctex 1/(j+1) %}，{% gctex 1/(j+1)<sup>{0.1}</sup> %}</li>
</ul>


<p>(※シナリオ1と2に関しては後述の「本問題の疑問点」を参考)</p>

<h4>例 5.7のソースコード</h4>

<p>前置きがだいぶ長くなってしまったが，本題のソースコードおよび4つのシナリオにおける確率的勾配法の探索過程を示した図は以下のようになる．</p>

<p>```r
h &lt;- function(x){
  -(x[1]<em>sin(20</em>x[2]) + x[2]<em>sin(20</em>x[1]))<sup>2</sup> * cosh(sin(10<em>x[1])</em>x[1]) -</p>

<pre><code>(x[1]*cos(10*x[2]) - x[2]*sin(10*x[1]))^2 * cosh(cos(20*x[2])*x[2])
</code></pre>

<p>}</p>

<p>start &lt;- c(0.65, 0.8)
theta &lt;- matrix(start, ncol=2)
dif &lt;- 1
iter &lt;- 1
alpha &lt;- 1
beta &lt;- 1</p>

<p>while(dif > 10<sup>-5){</sup>
  zeta &lt;- rnorm(2)
  zeta &lt;- zeta / sqrt(t(zeta) %<em>% zeta)
  grad &lt;- alpha[iter]</em>zeta * (h(theta[iter,]+beta[iter]*zeta) -</p>

<pre><code>h(theta[iter,]-beta[iter]*zeta)) / 2*beta[iter]
</code></pre>

<p>  scale <- sqrt(t(grad) %*% grad)
  while(scale > 1){</p>

<pre><code>zeta &lt;- rnorm(2)
zeta &lt;- zeta / sqrt(t(zeta) %*% zeta)
grad &lt;- alpha[iter]*zeta * (h(theta[iter,]+beta[iter]*zeta) - 
  h(theta[iter,]-beta[iter]*zeta)) / 2*beta[iter]
scale &lt;- sqrt(t(grad) %*% grad)
</code></pre>

<p>  }
  theta &lt;- rbind(theta, theta[iter,]+grad)
  dif &lt;- scale
  iter &lt;- iter + 1</p>

<h1>scenario1</h1>

<p>  alpha &lt;- cbind(alpha, 1/log(iter+1))
  beta &lt;- cbind(beta, 1/(log(iter+1))<sup>(0.1))</sup>
}</p>

<p>hcur &lt;- h(start)
hval &lt;- h(start)
x &lt;- seq(-1,1,le=435)
y &lt;- seq(-1,1,le=435)
z &lt;- matrix(0, nrow=435, ncol=435)
for (i in 1:435){
  for (j in 1:435){</p>

<pre><code>z[i,j] &lt;- h(c(x[i], y[j]))
</code></pre>

<p>  }
}</p>

<p>image(x, y, z, col=terrain.colors(150))
lines(theta, lwd=2)
points(theta[1,1], theta[1,2], col="gold", pch=19)
title(main="scenario 1")</p>

<p>```</p>

<p>シナリオ2,3,4の場合は，whileループの最後の{% gctex \alpha_j %}と{% gctex \beta_j %}の更新式を以下の通りにする．</p>

<p>```r</p>

<h1>scenario2</h1>

<p>  alpha &lt;- cbind(alpha, 1/(100*log(iter+1)))
  beta &lt;- cbind(beta, 1/(log(iter+1))<sup>(0.1))</sup></p>

<h1>scenario3</h1>

<p>  alpha &lt;- cbind(alpha, 1/(iter+1))
  beta &lt;- cbind(beta, 1/sqrt(iter+1))</p>

<h1>scenario4</h1>

<p>  alpha &lt;- cbind(alpha, 1/(iter+1))
  beta &lt;- cbind(beta, 1/(iter+1)<sup>(0.1))</sup>
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-7_1.png" alt="" /></p>

<p>上の図の解釈だが，この4つのシナリオの場合において</p>

<ul>
<li>シナリオ1では，動きまわる距離が大きすぎて（{% gctex \alpha_j %}が収束するのに時間がかかって）なかなかアルゴリズムが停止しない</li>
<li>シナリオ2では，動きまわる距離が小さすぎて（{% gctex \alpha_j %}がすぐ収束してしまって）ローカルミニマムにはまっている</li>
<li>シナリオ3では，動きまわる距離はシナリオ2より改善しているが，最大値を見つけられていない</li>
<li>シナリオ4では，上手い具合に最大値を見つけることができている</li>
</ul>


<p>ことが分かる．</p>

<p>なお，この解釈は本書（P.156）に書かれているものとは多少異なっているということを注意していただきたい．それに関しては次の疑問点のところで述べる．</p>

<h3>本問題の疑問点</h3>

<p>さて，この問題を素直に解いてもP.157の図5.7のようにはいかない．色々と試してみた結果，どうやら<strong>本書におけるシナリオ1と2の{% gctex \beta_j %}において，分母にかかっている0.1乗の表記がおかしい気がする．</strong>この0.1乗がlogの中の括弧にかかっていると考えて0.1*log()としてコードを組むと，値が発散しすぎてなかなか収束しなくなる．ということで，ここでは以下のように式を解釈して問題を解いた．正直なところ，これが正しいのかよくわかっていない．</p>

<ul>
<li>シナリオ1と2の{% gctex \beta_j %}：{% gctex \frac{1}{\log(j+1)<sup>{0.1}}</sup> %}→{% gctex \frac{1}{(\log(j+1))<sup>{0.1}}</sup> %}</li>
</ul>


<p>これにともなって，シナリオの図示や解釈にも少し違いが出てきている．そのため，今回は本書の解説（P.156）からは少し外れることになったが，自分がスクリプトを回して得た結果を解釈に用いた．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 確率的探索 その2]]></title>
    <link href="http://yagays.github.com/blog/2012/11/06/imcmr-5-3/"/>
    <updated>2012-11-06T11:25:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/11/06/imcmr-5-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>例 5.4 数値的最適化法と確率的探索を比較する</h3>

<p><a href="http://yagays.github.com/blog/2012/10/30/imcmr-5-1/">例5.1</a>の続き．前回は数値的最適化法によって{% gctex \theta %}の値を推定したが，今回は確率的探索による推定を行なって，両者の手法の比較を行う．問題としては，以下の対数尤度を最大化する．</p>

<p>{% gctex \log l(\theta| x_1,\ldots,x_n) = \sum_{i=1}<sup>{n}</sup> \log \frac{1}{1+(x_i-\theta)<sup>2}</sup> %}</p>

<p>この式は{% gctex n \rightarrow \infty %}において{% gctex \theta<sup>*</sup> =0 %}になる．すなわちこれから求める推定値の答えは0ということになる．</p>

<h4>ソースコード</h4>

<p>以下のソースコードにおける変数の対応は以下のようになっている．</p>

<ul>
<li>数値的最適化法

<ul>
<li>trul：推定値</li>
<li>truv：対数尤度</li>
</ul>
</li>
<li>確率的探索

<ul>
<li>loc：推定値</li>
<li>maxv：対数尤度</li>
</ul>
</li>
</ul>


<p>なお，mcsmパッケージに付随するデモスクリプトでは，数値的最適化法における乱数を正規乱数としていたり対数尤度の関数が微妙に違っているが，今回は例5.1の解法と同様のコーシー乱数と対数尤度の式を用いている．</p>

<p>```r
ref &lt;- rcauchy(5001)
f &lt;- function(y){-sum(log(1+(x-y)<sup>2))}</sup></p>

<p>maxv &lt;- NULL
loc &lt;- NULL
truv &lt;- NULL
trul &lt;- NULL</p>

<p>for (i in 10:length(ref)){
  # 数値的最適化
  x &lt;- ref[1:i]
  tru &lt;- optimize(f,c(-5,5),maximum=T)
  trul &lt;- c(trul, tru$max)
  truv &lt;- c(truv, tru$ob)</p>

<p>  # 確率的探索
  prop &lt;- runif(10<sup>3,-5,5)</sup>
  vale &lt;- apply(as.matrix(prop),1,f)
  loc &lt;- c(loc, prop[order(-vale)[1]])
  maxv &lt;- c(maxv, max(vale))
}</p>

<p>par(mar=c(4,4,1,1), mfrow=c(2,1))
plot(trul, loc, cex=.5, pch=19, xlab=expression(theta<sup>0),</sup> ylab=expression(hat(theta)))
abline(a=0, b=1, col="grey")
plot(10:length(ref), (truv-maxv)/abs(truv), type="l", lwd=2, xlab="Sample size", ylab="Relative error", ylim=c(0,0.02))
```</p>

<p>まず，上のプロットは，数値的最適化法による推定値を横軸に，確率的探索による推定値を縦軸に取った図となっている．真の値が{% gctex \theta<sup>*</sup> =0 %}なので，当然ながら両者ともに推定値は(0,0)付近に集まっている．また，推定値が外れる場合では，どちらかの値が大きくなればもう片方も大きくなるといった具合に，そのパターンはグレーの線で示した{% gctex \theta<sup>0</sup> = \hat{\theta} %}の線分の上に乗るような形となる．</p>

<p>次に，下のプロットは，横軸にサンプルサイズを取り，縦軸に推定値における対数尤度の差を取った図となっている．今回は相対的誤差なので，(数値的最適化法-確率的探索)/(数値的最適化法)といった形で値を求めている．相対的誤差が大きいということは，数値的最適化法と確率的探索それぞれ求めた対数尤度に差がある，すなわち{% gctex \theta %}に差があるということで，上のプロットにおけるグレーの線分から離れれば離れるほど相対的誤差も大きくなるということになる．なお，図示しているサンプルサイズは{% gctex n=10 %}から{% gctex n=5001 %}までの値となっており，これは両者の手法がどちらも一定サイズのサンプルサイズを必要とするからである（つまり1から10までは図示していない）．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-4.png" alt="" /></p>

<h3>例 5.6 グローバルミニマムのまわりにローカルミニマムが配置されている関数を可視化する</h3>

<p>以下の関数の最小化を検討する．</p>

<p>{% gctex h(x,y)=(x\sin(20y)+y\sin(20x))<sup>2\cosh(\sin(10x)x)+</sup> (x\cos(10y)-y\sin(10x))<sup>2\cosh(\cos(20y)y)</sup> %}</p>

<p>今回は可視化するだけだが，この後の例5.7などで度々登場する関数となる．3Dプロットを描写すると，(0,0)に最小値があり，その周りには山あり谷ありとローカルミニマムがたくさん配置されている関数だとわかる．この図を上から見ると，P.157のプロットのようになる．</p>

<p>```r
h &lt;- function(x,y){
  (x<em>sin(20</em>y) + y<em>sin(20</em>x))<sup>2</sup> * cosh(sin(10<em>x)</em>x) +</p>

<pre><code>(x*cos(10*y) - y*sin(10*x))^2 * cosh(cos(20*y)*y)
</code></pre>

<p>}
x &lt;- seq(-3, 3, le=435)
y &lt;- seq(-3, 3, le=435)
z &lt;- outer(x, y, h)
par(bg="wheat", mar=c(1,1,1,1))
persp(x, y, z, theta=155, phi=30, col="green4",</p>

<pre><code>  ltheta=-120, shade=0.75, border=NA, box=FALSE)
</code></pre>

<p>```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-6.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 確率的探索]]></title>
    <link href="http://yagays.github.com/blog/2012/11/01/imcmr-5-2/"/>
    <updated>2012-11-01T02:18:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/11/01/imcmr-5-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>例 5.3 確率的探索を使って，一様分布からのシミュレーションにより関数の最大値を求める</h3>

<p><a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">例 3.3</a>で積分を考えた関数{% gctex h(x) = [\cos(50x) + \sin(20x) ]<sup>2</sup> %}について，今度はその最大値について考える．</p>

<p>今回の実験は1000回シミュレーションを行う．それぞれのシミュレーションには，まず一様乱数{% gctex \mathcal{U}<em>{[0,1]} = u_1, \ldots , u_m %}を1000個作成し，それぞれに関数を掛けた値の中から最大値{% gctex h</em>{m}<sup>{*}</sup> = \max(h(u_1), \ldots ,h(u_m)) %}を求める．</p>

<p>確率的探索といっても，今回の場合にやっていることは結局のところ定義域内で乱数を発生させて関数の値が大きいところを探しているだけとなる．今回は一様乱数で定義域内をまんべんなく探すという方法を取っているが，この後の確率的探索の例では「密度」を考えて，関数の値が大きい領域でのシミュレーションの確率を高くし，その他の関数の値の小さい領域での確率を小さくするという方法が取られる．</p>

<h4>今回のシミュレーションの仕組み</h4>

<p>今回のコードは少しややこしいので，まずは試しにシミュレーションを1回だけ行なってみよう．今回は推定値がどのように更新されていくかを見るために，単純にmax()関数を使うのではなく，cummax()関数を使用している．これにより，ベクトルの前から順に値を見ていって，最大値を更新していく様子を見ることができる．以下の図の黒の線が推定値{% gctex h_{m}<sup>{*}</sup> %}，赤の線がoptimize()関数で求めた定義域内における関数{% gctex h(x) %}の最大値を示している．</p>

<p><code>r
h &lt;- function(x){(cos(50*x) + sin(20*x))^2}
plot(cummax(h(runif(10^3))),type="l")
abline(h=optimize(h,int=c(0,1), maximum=T)$ob,col="red")
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_3.png" alt="" /></p>

<h4>実際に例5.3のシミュレーションを行う</h4>

<p>では実際に1000回のシミュレーションを行なって，推定値がどのように更新されていくのか，そしてその値がどれほどバラけるのかを見ていく．</p>

<p>以下の図が今回の結果となっている．まず，本書に載っている左図ではなく，右の赤い線が重なった図から説明する．この図は1000回シミュレーションした中から10回だけ抜き出してプロットしたものとなっている．これを見ると，最初のうちは0に近いような値から始まっていたりと値が安定しないものの，200回もすると実際の値と殆ど変わらないような推定値になり落ち着いているのがわかる．このように，値がきちんと実際の値に近づくかどうかを見るために，各イテレーションごとの最小値を求めてプロットしたのが左図となっている．灰色の部分は，イテレーションごとの推定値の幅を示しており，これを見ると，800回程度実験すれば一応どのシミュレーションでも実際の値と推定値がほぼ同じになることが分かる．</p>

<p>```r
h &lt;- function(x){(cos(50<em>x) + sin(20</em>x))<sup>2}</sup>
rangom &lt;- h(matrix(runif(10<sup>6),</sup> ncol=10<sup>3))</sup>
monitor &lt;- t(apply(rangom, 1, cummax))</p>

<p>par(mfrow=c(1,2))
plot(monitor[1,], type="l", col="white", ylim=c(0, optimize(h,int=c(0,1), maximum=T)$ob),</p>

<pre><code> xlab="Iterations", ylab="h(theta)") # 描写する領域をplotしているだけ
</code></pre>

<p>par(new=T)
polygon(c(1:10<sup>3,</sup> 10<sup>3:1),</sup> c(apply(monitor,2,max), rev(apply(monitor, 2, min))), col="gray")
abline(h=optimize(h, int=c(0,1), maximum=T)$ob)</p>

<p>plot(monitor[1,],type="l",col="red", ylim=c(0,optimize(h, int=c(0,1), maximum=T)$ob),</p>

<pre><code> xlab="Iterations", ylab="h(theta)")
</code></pre>

<p>for(i in 2:10){
  lines(monitor[i,],col="red")
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_1.png" alt="" /></p>

<h3>練習問題 5.3 一様分布を用いたシミュレーションのパフォーマンスを向上させるために使用する定義域における制約を可視化する</h3>

<p>まず最初に注意．この問題は解けないわけではないが，厳密には間違っているらしい．訂正は<a href="http://www.ceremade.dauphine.fr/~xian/shortManual.pdf">解答</a>(pdf)に書かれているが，つまりは定義域{% gctex \it{\Theta} %}の制約は，</p>

<blockquote><p>{% gctex x<sup>2(1+\sin(3y)\cos(8x))</sup> + y<sup>2(2+\cos(5x)\cos(8y))</sup> \leq 1 %}</p></blockquote>

<p>ではなく，</p>

<blockquote><p> {% gctex x<sup>2(1+\sin(\frac{3}{y})\cos(8x))</sup> + y<sup>2(2+\cos(5x)\cos(8y))</sup> \leq 1 %}</p></blockquote>

<p>としなければいけないようだ．今回はどちらの式も試してみて，本に書かれている式の何がおかしかったのを見てみる．</p>

<p>まず，左図は解答に記載されている修正後の式を使った場合，右図は本書に載っているオリジナルの式を使った場合となっている．これを見ると，左図では黒の円の中に式で表された制約の定義域が収まっているのに対し，右図では黒の円から一部制約の定義域がはみ出ているように見える．</p>

<p>```r
theta=runif(10<sup>5)<em>2</em>pi</sup>
rho &lt;- runif(10<sup>5)</sup>
xunif &lt;- rho<em>cos(theta)/.77
yunif &lt;- rho</em>sin(theta)</p>

<p>par(mfrow=c(1,2))
plot(xunif, yunif, pch=19, cex=.4, xlab="x", ylab="y")
const &lt;- (xunif<sup>2<em>(1+sin(yunif/3)</em>cos(xunif*8))+</sup>
  yunif<sup>2<em>(2+cos(5</em>xunif)<em>cos(8</em>yunif))&lt;1)</sup>
points(xunif[const], yunif[const], col="cornsilk2", pch=19,cex=.4)</p>

<p>plot(xunif, yunif, pch=19, cex=.4, xlab="x", ylab="y")
const2 &lt;- (xunif<sup>2<em>(1+sin(yunif</em>3)<em>cos(xunif</em>8))+</sup>
  yunif<sup>2<em>(2+cos(5</em>xunif)<em>cos(8</em>yunif))&lt;1)</sup>
points(xunif[const2], yunif[const2], col="red", pch=19, cex=.4)
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_2.png" alt="" /></p>

<p>また，この方法のパフォーマンスを測定するために，棄却された点の平均数で評価してみる．生成した乱数の総数が10<sup>5</sup> 個なので，74%は受理され，26%が棄却されたことがわかる．</p>

<p>```r
summary(const)</p>

<h1>Mode   FALSE    TRUE    NA's</h1>

<h1>logical   26285   73715       0</h1>

<p>```</p>

<p>それにしても，この図に何とも言えない可愛らしさを感じる，宇宙の侵略者を撃ち落とす某ゲームで見たことがあるような…．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 数値的最適化法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/30/imcmr-5-1/"/>
    <updated>2012-10-30T15:54:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/30/imcmr-5-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>本章の概要</h3>

<p>乱数を使って最適化問題を解くには2つの方法がある．</p>

<ul>
<li>確率的探索を用いて関数の最大値を探す（本章前半）</li>
<li>シミュレーションを使って最適化する関数を近似する（本章後半，5.4以降）</li>
</ul>


<h3>内容：モンテカルロ最適化で関数の最大値を求める</h3>

<h4>最適化問題には2種類ある</h4>

<p>最適化問題には大きくわけて2種類存在する．</p>

<ul>
<li>定義域{% gctex \it{\Theta} %}で関数{% gctex h(\theta)%}の極値を求める</li>
<li>定義域{% gctex \it{\Theta} %}で陰的方程式{% gctex g(\theta) = 0 %}の解を求める</li>
</ul>


<p>問題設定はそれぞれ違うのだが，今回は最大化問題だけを取り上げる．つまり，以下の式のように定義域{% gctex \it{\Theta} %}で一番大きな値を求めたい．</p>

<p>{% gctex max_{\theta \in \Theta}=h(\theta)%}</p>

<h4>解き方にも2種類ある</h4>

<ul>
<li>数値的手法（5.2 数値的最適化法）

<ul>
<li>目標関数の特性に強く依存する</li>
</ul>
</li>
<li>確率的手法（5.3 確率的探索）</li>
</ul>


<p>さて，ある関数のある定義域内における最大値を求めようと思った場合にじゃあどうするかというと，定義域内の値を片っ端から入れていって大きいものを探すといったアプローチと，別の分布をシミュレーションしてそこから最大値が現れるまでシミュレーションし続けるという方法の2通りがあるということになる．ここで重要になるポイントが定義域で，3章のモンテカルロ積分において積分する範囲を決めていたように，5章モンテカルロ最適化においても定義域内で最大値を探すということに繋がる．ただし，モンテカルロ積分よりもモンテカルロ最適化のほうが，全体の平均を求めるよりもピンポイントで値の大きい極値を求めるという点で，一般的に難しい．</p>

<h3>例 5.1 コーシー分布から得られたサンプルの尤度を最大化する</h3>

<h4>左の図</h4>

<p>何かしらのコーシー分布から生成された乱数{% gctex {x_1, \dots ,x_n}%}が与えられた時に，それを生成したコーシー分布{% gctex \mathcal{C}(\theta,1) %}の{% gctex \theta %}を最尤法で推定しようという問題．尤度は以下の式で表される</p>

<p>{% gctex l(\theta| x_1,\ldots,x_n) = \prod_{i=1}<sup>{n}\frac{1}{1+(x_i-\theta)<sup>2}</sup></sup> %}</p>

<p>実際に計算するときには以下の対数尤度を使う．</p>

<p>{% gctex \log l(\theta| x_1,\ldots,x_n) = \sum_{i=1}<sup>{n}</sup> \log \frac{1}{1+(x_i-\theta)<sup>2}</sup> %}</p>

<p>今回は実験として，上の尤度と対数尤度の2パターンで計算したときに，どういう違いが現れるかを示す．数式上は違いはないが，計算機上では値の取り扱いにおいて違いが出てくる．</p>

<p>```r
xm &lt;- rcauchy(500)
loglik &lt;- function(y){-sum(log(1+(x-y)<sup>2))}</sup>
lik &lt;- function(y){prod(1/(1+(x-y)<sup>2))}</sup></p>

<p>mi &lt;- numeric(500)
mi2 &lt;- numeric(500)
for(i in 1:500){
  x &lt;- xm[1:i]
  mi[i] &lt;- optimize(loglik, interval=c(-10,10), maximum=T)$max
  mi2[i] &lt;- optimize(lik, interval=c(-10,10),maximum=T)$max
}</p>

<p>plot(mi, type="l", ylim=c(-5, 10), ylab="theta", xlab="sample size")
par(new=T)
plot(mi2, type="l", ylim=c(-5,10),col="red", ylab="theta", xlab="sample size")
```</p>

<p>尤度で計算した(赤)と対数尤度で計算した計算(黒)を以下のプロットの左側の図に示してある．これをみると，対数尤度で計算した場合では着実に推定値が収束していくのに対し，尤度で計算した場合ではある地点で値が発散してるのがわかる．これは，Rのoptimizeにおいて，尤度を直接観察すると値が発散することがあるからである．このように，確率を扱う場合には，値が非常に小さくなることに注意しなければならない．</p>

<h4>右の図</h4>

<p>次に，上記の尤度を，摂動が加えられた尤度に置き換える．これは{% gctex -[\sin(100y)]<sup>2</sup> %}という0から1の間の値を取るノイズを加えている．</p>

<p>```r
perturbedloglik &lt;- function(y){-sin(y<em>100)<sup>2</sup> - sum(log(1+(x-y)<sup>2))}</sup>
perturbedlik &lt;- function(y){-sin(y</em>100)<sup>2</sup> + prod(1/(1+(x-y)<sup>2))}</sup>
mi &lt;- numeric(500)
mi2 &lt;- numeric(500)
for(i in 1:500){
  x &lt;- xm[1:i]
  mi[i] &lt;- optimize(perturbedloglik, interval=c(-10,10), maximum=T)$max
  mi2[i] &lt;- optimize(perturbedlik, interval=c(-10,10),maximum=T)$max
}</p>

<p>plot(mi, type="l", ylim=c(-5, 10), ylab="theta", xlab="sample size")
par(new=T)
plot(mi2, type="l", ylim=c(-5,10),col="red", ylab="theta", xlab="sample size")</p>

<p>```</p>

<p>これをみると，尤度に関しては左図で示したように発散してしまっている．対数尤度を見てみると，左図と比べて値がばらつきグラフがギザギザになっている．当然だが，ノイズを加えれば値がばらついてしまう．</p>

<p>(個人的な感想)右図は何が言いたいのかちょっと分からない．ここの解釈は本書では出てこないと思うのだが，尤度関数に何らかの関数が加わる状況といえば，最小二乗法などにおける正則化項を加えて過学習を押さえる場合だろうか？　正則化項は摂動というよりかは，lassoやridgeのように1次/2次の関数になるので，今回の場合みたいにノイズのようにはならないと思うのだが…．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-1.png" alt="" /></p>

<h3>例 5.2 Newton-Raphson法を用いて混合正規分布モデルから得られたサンプルの尤度を最大化する</h3>

<p>今回の混合正規モデルでは，</p>

<p>{% gctex \frac{1}{4}\mathcal{N}(\mu_1,1)+\frac{3}{4}\mathcal{N}(\mu_2,1) %}</p>

<p>を考える．まずは分布の形を調べるために，{% gctex \mu_1 = 0 %}，{% gctex \mu_2 = 2.5 %}における対数尤度の分布を示してみる．そして，初期値(1,1)からスタートして，Newton-Raphson法がどのように推定値に収束していくかを図示する．</p>

<p>```r
da &lt;- sample(c(rnorm(10<sup>2),</sup> 2.5+rnorm(3<em>10<sup>2)))</sup>
like &lt;- function(mu){ -sum(log((0.25</em>dnorm(da-mu[1]) + 0.75*dnorm(da-mu[2])))) }</p>

<p>mu1 &lt;- seq(-2, 5, le=250)
mu2 &lt;- seq(-2, 5, le=250)
lli=matrix(0,nco=250,nro=250)
for (i in 1:250){
  for (j in 1:250){</p>

<pre><code>lli[i,j] &lt;- like(c(mu1[i],mu2[j]))
</code></pre>

<p>  }
}
image(mu1, mu2, -lli)
contour(mu1, mu2, -lli,nlevels=100, add=T)</p>

<p>sta &lt;- c(1,1)
mmu &lt;- sta
for(i in 1:(nlm(like, sta)$it)){
  mmu &lt;- rbind(mmu, nlm(like, sta, iterlim=i)$est)
}
lines(mmu, pch=19, lwd=2)
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-2_1.png" alt="" /></p>

<h4>アニメーションにしてみる</h4>

<p>例が1つだけでは面白くないので，初期値をバラバラに選んで何回もシミュレーションしてみて，初期値からどのように推定値が更新されていくのかを見てみる．今回は，初期値として{% gctex \mu_1 %}，{% gctex \mu_2 %}ともに図に表されている-2から5の範囲内でランダムに値を取るようにして，そこからのNewton-Raphson法による推定値の変化を1ステップごとにアニメーションとして作成した．それを25パターン作成して繋げている．</p>

<p>```r
library(animation)</p>

<p>mixtureloglik &lt;- function(Niter){
  for(n in 1:Niter){</p>

<pre><code>sta &lt;- c(runif(1,2-2,5),runif(1,-2,5))
mmu &lt;- sta
da &lt;- sample(c(rnorm(10^2), 2.5+rnorm(3*10^2)))
for(i in 1:(nlm(like, sta)$it)){
  mmu &lt;- rbind(mmu, nlm(like, sta, iterlim=i)$est)
}
for(j in 1:nrow(mmu)){
  image(mu1, mu2, -lli, main=paste("Iter:",n))
  contour(mu1, mu2, -lli,nlevels=100, add=T)
  lines(mmu[1:j,1],mmu[1:j,2], pch=19, lwd=2)
}
</code></pre>

<p>  }
}</p>

<p>saveMovie(mixtureloglik(25), interval=0.05, moviename="",</p>

<pre><code>      movietype="gif", outdir=getwd(),
      width=640, height=480)
</code></pre>

<p>```</p>

<p>Rのanimationというパッケージを使用して作成している．このパッケージでは標準でmpgも出力できるらしいのだが，今回上手くいかなかったので，gifアニメとして出力したのちにImagemagickとffmpegを使用してmpgの動画として出力した．gifアニメは思いの外重いので，今回はYoutubeにアップロードした．</p>

<p><code>bash
$ convert animation.gif Rplot%d.png
$ ffmpeg -f image2 -i Rplot%d.png animation.mpg
</code></p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/ZbppoIltz3E" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 重点サンプリング]]></title>
    <link href="http://yagays.github.com/blog/2012/10/28/imcmr-3-3/"/>
    <updated>2012-10-28T09:45:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/28/imcmr-3-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：重点サンプリングにより推定量の分散と効率を改善する</h3>

<h3>例 3.5 {% gctex Z \sim \mathcal{N}(0,1) %}で{% gctex P(Z > 4.5) %}の確率を求める</h3>

<p>確率を求めると書いてあるが，要するに正規分布の確率密度関数において4.5からInfまでの面積（{% gctex \int_{4.5}<sup>{\infty}\frac{1}{\sqrt{2\pi}}e<sup>{-\frac{x<sup>2}{2}}</sup></sup></sup> dx %}）を求めるというもの．ただし，正規分布でxの値が4.5ともなると確率そのものがものすごく小さいので，普通のモンテカルロ積分で正規分布から乱数を生成したとしても，シミュレーション回数を非常に大きくしないと精度の良い値が求まらない．</p>

<p>```r
pnorm(-4.5,log=T)</p>

<h1>[1] -12.59242</h1>

<p>pnorm(-4.5)</p>

<h1>[1] 3.397673e-06</h1>

<p>```</p>

<p>ということで，重点サンプリングでシミュレーション回数を抑える．{% gctex g(y) = \frac{e<sup>{-y}}{\int_{4.5}<sup>{\infty}e<sup>{-x}dx}</sup></sup></sup> = e<sup>{-(y-4.5)}</sup> %}として，{% gctex \frac{1}{m}\sum_{i=1}<sup>{m}\frac{f(Y<sup>{(i)})}{g(Y<sup>{(i)})}</sup></sup></sup> %}を求める．ここで，gの選択の箇所は「gを，4.5で切り詰めた指数分布の密度{% gctex \mathcal{Exp}(1) %}とする」ということ(P.81)．</p>

<p><code>r
Nsim &lt;- 10^3
y &lt;- rexp(Nsim)+4.5
weit &lt;- dnorm(y)/dexp(y-4.5)
plot(cumsum(weit)/1:Nsim, type="l")
abline(h=pnorm(-4.5), col="red", lwd=2)
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_1.png" alt="" /></p>

<h3>練習問題 3.5 切り詰められた指数分布{% gctex \mathcal{Exp}(\lambda) %}をg(x)としたときの近似値の分散への影響を調べる</h3>

<p>例3.5で{% gctex \lambda = 1 %}だった指数分布の値を色々と変えてみて実験する．以下の図は，{% gctex \lambda = 1,5,10,20 %}の時の推定値の変化を示している．左上の図が例3.5と同じ条件となり，そこから右上・左下・右下と{% gctex \lambda %}の値を大きくしている．黒の線が推定値の推移，上下の黄色の線が推定値の誤差の範囲（＝分散）となっている．
このプロットを見ると，{% gctex \lambda %}の値が大きくなるにつれて，分散も大きくなることがわかる．</p>

<p><code>r
par(mfrow=c(2,2))
for(lambda in c(1, 5, 10, 20)){
  Nsim &lt;- 10^4
  y &lt;- rexp(Nsim)/lambda+4.5
  weit &lt;- dnorm(y)/dexp(y-4.5, lambda)
  estint &lt;- cumsum(weit)/1:Nsim
  esterr &lt;- sqrt(cumsum((weit-estint)^2))/(1:Nsim)
  plot(estint, xlab="Mean and error range", ylab="prob", type="l", main=paste("lambda = ",lambda))
  lines(estint+2*esterr, col="gold", lwd=2)
  lines(estint-2*esterr, col="gold", lwd=2)
  abline(h=pnorm(-4.5), col="red")
}
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_2.png" alt="" /></p>

<p>また，がくっと値が変わっている部分は乱数でかなりレアな値を引いて全体的に値が引きずられたからだと思われる．weitの中から値の非常に大きいものを10個選び出して，その時の推定値の変化を見たのが以下の図になる．青の点線で示した箇所が，weitの値が非常に大きくなったポイントを示している．</p>

<p><code>r
abline(v=seq(1,Nsim)[rank(weit)&gt;Nsim-10], col="blue", lty=2)
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_3.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
