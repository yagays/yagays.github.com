<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: imcmr | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.com/blog/categories/imcmr/atom.xml" rel="self"/>
  <link href="http://yagays.github.com/"/>
  <updated>2012-10-31T01:36:28+09:00</updated>
  <id>http://yagays.github.com/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 数値的最適化法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/30/imcmr-5-1/"/>
    <updated>2012-10-30T15:54:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/30/imcmr-5-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>本章の概要</h3>

<p>乱数を使って最適化問題を解くには2つの方法がある．</p>

<ul>
<li>確率的探索を用いて関数の最大値を探す（本章前半）</li>
<li>シミュレーションを使って最適化する関数を近似する（本章後半，5.4以降）</li>
</ul>


<h3>内容：モンテカルロ最適化で関数の最大値を求める</h3>

<h4>最適化問題には2種類ある</h4>

<p>最適化問題には大きくわけて2種類存在する．</p>

<ul>
<li>定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で関数<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28%5Ctheta%29>の極値を求める</li>
<li>定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で陰的方程式<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28%5Ctheta%29+%3D+0+>の解を求める</li>
</ul>


<p>問題設定はそれぞれ違うのだが，今回は最大化問題だけを取り上げる．つまり，以下の式のように定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で一番大きな値を求めたい．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=max_%7B%5Ctheta+%5Cin+%5CTheta%7D%3Dh%28%5Ctheta%29></p>

<h4>解き方にも2種類ある</h4>

<ul>
<li>数値的手法（5.2 数値的最適化法）

<ul>
<li>目標関数の特性に強く依存する</li>
</ul>
</li>
<li>確率的手法（5.3 確率的探索）</li>
</ul>


<p>さて，ある関数のある定義域内における最大値を求めようと思った場合にじゃあどうするかというと，定義域内の値を片っ端から入れていって大きいものを探すといったアプローチと，別の分布をシミュレーションしてそこから最大値が現れるまでシミュレーションし続けるという方法の2通りがあるということになる．ここで重要になるポイントが定義域で，3章のモンテカルロ積分において積分する範囲を決めていたように，5章モンテカルロ最適化においても定義域内で最大値を探すということに繋がる．ただし，モンテカルロ積分よりもモンテカルロ最適化のほうが，全体の平均を求めるよりもピンポイントで値の大きい極値を求めるという点で，一般的に難しい．</p>

<h3>例 5.1 コーシー分布から得られたサンプルの尤度を最大化する</h3>

<h4>左の図</h4>

<p>何かしらのコーシー分布から生成された乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%7Bx_1%2C+%5Cdots+%2Cx_n%7D>が与えられた時に，それを生成したコーシー分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BC%7D%28%5Ctheta%2C1%29+>の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta+>を最尤法で推定しようという問題．尤度は以下の式で表される</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=l%28%5Ctheta%7C+x_1%2C%5Cldots%2Cx_n%29+%3D+%5Cprod_%7Bi%3D1%7D%3Csup%3E%7Bn%7D%5Cfrac%7B1%7D%7B1%2B%28x_i-%5Ctheta%29%3Csup%3E2%7D%3C%2Fsup%3E%3C%2Fsup%3E+></p>

<p>実際に計算するときには以下の対数尤度を使う．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clog+l%28%5Ctheta%7C+x_1%2C%5Cldots%2Cx_n%29+%3D+%5Csum_%7Bi%3D1%7D%3Csup%3E%7Bn%7D%3C%2Fsup%3E+%5Clog+%5Cfrac%7B1%7D%7B1%2B%28x_i-%5Ctheta%29%3Csup%3E2%7D%3C%2Fsup%3E+></p>

<p>今回は実験として，上の尤度と対数尤度の2パターンで計算したときに，どういう違いが現れるかを示す．数式上は違いはないが，計算機上では値の取り扱いにおいて違いが出てくる．</p>

<p>```r
xm &lt;- rcauchy(500)
loglik &lt;- function(y){-sum(log(1+(x-y)<sup>2))}</sup>
lik &lt;- function(y){prod(1/(1+(x-y)<sup>2))}</sup></p>

<p>mi &lt;- numeric(500)
mi2 &lt;- numeric(500)
for(i in 1:500){
  x &lt;- xm[1:i]
  mi[i] &lt;- optimize(loglik, interval=c(-10,10), maximum=T)$max
  mi2[i] &lt;- optimize(lik, interval=c(-10,10),maximum=T)$max
}</p>

<p>plot(mi, type="l", ylim=c(-5, 10), ylab="theta", xlab="sample size")
par(new=T)
plot(mi2, type="l", ylim=c(-5,10),col="red", ylab="theta", xlab="sample size")
```</p>

<p>尤度で計算した(赤)と対数尤度で計算した計算(黒)を以下のプロットの左側の図に示してある．これをみると，対数尤度で計算した場合では着実に推定値が収束していくのに対し，尤度で計算した場合ではある地点で値が発散してるのがわかる．これは，Rのoptimizeにおいて，尤度を直接観察すると値が発散することがあるからである．このように，確率を扱う場合には，値が非常に小さくなることに注意しなければならない．</p>

<h4>右の図</h4>

<p>次に，上記の尤度を，摂動が加えられた尤度に置き換える．これは<img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5B%5Csin%28100y%29%5D%3Csup%3E2%3C%2Fsup%3E+>という0から1の間の値を取るノイズを加えている．</p>

<p>```r
perturbedloglik &lt;- function(y){-sin(y<em>100)<sup>2</sup> - sum(log(1+(x-y)<sup>2))}</sup>
perturbedlik &lt;- function(y){-sin(y</em>100)<sup>2</sup> + prod(1/(1+(x-y)<sup>2))}</sup>
mi &lt;- numeric(500)
mi2 &lt;- numeric(500)
for(i in 1:500){
  x &lt;- xm[1:i]
  mi[i] &lt;- optimize(perturbedloglik, interval=c(-10,10), maximum=T)$max
  mi2[i] &lt;- optimize(perturbedlik, interval=c(-10,10),maximum=T)$max
}</p>

<p>plot(mi, type="l", ylim=c(-5, 10), ylab="theta", xlab="sample size")
par(new=T)
plot(mi2, type="l", ylim=c(-5,10),col="red", ylab="theta", xlab="sample size")</p>

<p>```</p>

<p>これをみると，尤度に関しては左図で示したように発散してしまっている．対数尤度を見てみると，左図と比べて値がばらつきグラフがギザギザになっている．当然だが，ノイズを加えれば値がばらついてしまう．</p>

<p>(個人的な感想)右図は何が言いたいのかちょっと分からない．ここの解釈は本書では出てこないと思うのだが，尤度関数に何らかの関数が加わる状況といえば，最小二乗法などにおける正則化項を加えて過学習を押さえる場合だろうか？　正則化項は摂動というよりかは，lassoやridgeのように1次/2次の関数になるので，今回の場合みたいにノイズのようにはならないと思うのだが…．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-1.png" alt="" /></p>

<h3>例 5.2 Newton-Raphson法を用いて混合正規分布モデルから得られたサンプルの尤度を最大化する</h3>

<p>今回の混合正規モデルでは，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B4%7D%5Cmathcal%7BN%7D%28%5Cmu_1%2C1%29%2B%5Cfrac%7B3%7D%7B4%7D%5Cmathcal%7BN%7D%28%5Cmu_2%2C1%29+></p>

<p>を考える．まずは分布の形を調べるために，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_1+%3D+0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_2+%3D+2.5+>における対数尤度の分布を示してみる．そして，初期値(-1,-1)からスタートして，Newton-Raphson法がどのように推定値に収束していくかを図示する．</p>

<p>```r
da &lt;- sample(c(rnorm(10<sup>2),</sup> 2.5+rnorm(3<em>10<sup>2)))</sup>
like &lt;- function(mu){ -sum(log((0.25</em>dnorm(da-mu[1]) + 0.75*dnorm(da-mu[2])))) }</p>

<p>mu1 &lt;- seq(-2, 5, le=250)
mu2 &lt;- seq(-2, 5, le=250)
lli=matrix(0,nco=250,nro=250)
for (i in 1:250)
  for (j in 1:250)</p>

<pre><code>lli[i,j]=like(c(mu1[i],mu2[j]))
</code></pre>

<p>image(mu1, mu2, -lli)
contour(mu1, mu2, -lli,nlevels=100, add=T)</p>

<p>sta &lt;- c(1,1)
mmu &lt;- sta
for(i in 1:(nlm(like, sta)$it)){
  mmu &lt;- rbind(mmu, nlm(like, sta, iterlim=i)$est)
}</p>

<h1>plot(mi,ty="l",lwd=2,xlab="",ylab="arg")</h1>

<p>lines(mmu, pch=19, lwd=2)
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-2_1.png" alt="" /></p>

<h4>アニメーションにしてみる</h4>

<p>例が1つだけでは面白くないので，初期値をバラバラに選んで何回もシミュレーションしてみて，初期値からどのように推定値が更新されていくのかを見てみる．今回は，初期値として<img src=http://chart.apis.google.com/chart?cht=tx&chl=mu_1+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=mu_2+>ともに図に表されている-2から5の範囲内でランダムに値を取るようにして，そこからのNewton-Raphson法による推定値の変化を1ステップごとにアニメーションとして作成した．それを25パターン作成して繋げている．</p>

<p>```r
library(animation)</p>

<p>mixtureloglik &lt;- function(Niter){
  for(n in 1:Niter){</p>

<pre><code>sta &lt;- c(runif(1,2-2,5),runif(1,-2,5))
mmu &lt;- sta
da &lt;- sample(c(rnorm(10^2), 2.5+rnorm(3*10^2)))
for(i in 1:(nlm(like, sta)$it)){
  mmu &lt;- rbind(mmu, nlm(like, sta, iterlim=i)$est)
}
for(j in 1:nrow(mmu)){
  image(mu1, mu2, -lli, main=paste("Iter:",n))
  contour(mu1, mu2, -lli,nlevels=100, add=T)
  lines(mmu[1:j,1],mmu[1:j,2], pch=19, lwd=2)
}
</code></pre>

<p>  }
}</p>

<p>saveMovie(mixtureloglik(10), interval=0.05, moviename="",</p>

<pre><code>      movietype="gif", outdir=getwd(),
      width=640, height=480)
</code></pre>

<p>```</p>

<p>Rのanimationというパッケージを使用して作成している．このパッケージでは標準でmpgも出力できるらしいのだが，今回上手くいかなかったので，gifアニメとして出力したのちにImagemagickとffmpegを使用してmpgの動画として出力した．gifアニメは思いの外重いので，今回はYoutubeにアップロードした．</p>

<p><code>bash
$ convert animation.gif Rplot%d.png
$ ffmpeg -f image2 -i Rplot%d.png animation.mpg
</code></p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/ZbppoIltz3E" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 重点サンプリング]]></title>
    <link href="http://yagays.github.com/blog/2012/10/28/imcmr-3-3/"/>
    <updated>2012-10-28T09:45:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/28/imcmr-3-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：重点サンプリングにより推定量の分散と効率を改善する</h3>

<h3>例 3.5 <img src=http://chart.apis.google.com/chart?cht=tx&chl=Z+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+>で<img src=http://chart.apis.google.com/chart?cht=tx&chl=P%28Z+%3E+4.5%29+>の確率を求める</h3>

<p>確率を求めると書いてあるが，要するに正規分布の確率密度関数において4.5からInfまでの面積（<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B4.5%7D%3Csup%3E%7B%5Cinfty%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+dx+>）を求めるというもの．ただし，正規分布でxの値が4.5ともなると確率そのものがものすごく小さいので，普通のモンテカルロ積分で正規分布から乱数を生成したとしても，シミュレーション回数を非常に大きくしないと精度の良い値が求まらない．</p>

<p>```r
pnorm(-4.5,log=T)</p>

<h1>[1] -12.59242</h1>

<p>pnorm(-4.5)</p>

<h1>[1] 3.397673e-06</h1>

<p>```</p>

<p>ということで，重点サンプリングでシミュレーション回数を抑える．<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28y%29+%3D+%5Cfrac%7Be%3Csup%3E%7B-y%7D%7D%7B%5Cint_%7B4.5%7D%3Csup%3E%7B%5Cinfty%7De%3Csup%3E%7B-x%7Ddx%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+%3D+e%3Csup%3E%7B-%28y-4.5%29%7D%3C%2Fsup%3E+>として，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bi%3D1%7D%3Csup%3E%7Bm%7D%5Cfrac%7Bf%28Y%3Csup%3E%7B%28i%29%7D%29%7D%7Bg%28Y%3Csup%3E%7B%28i%29%7D%29%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+>を求める．ここで，gの選択の箇所は「gを，4.5で切り詰めた指数分布の密度<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D%281%29+>とする」ということ(P.81)．</p>

<p><code>r
Nsim &lt;- 10^3
y &lt;- rexp(Nsim)+4.5
weit &lt;- dnorm(y)/dexp(y-4.5)
plot(cumsum(weit)/1:Nsim, type="l")
abline(h=pnorm(-4.5), col="red", lwd=2)
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_1.png" alt="" /></p>

<h3>練習問題 3.5 切り詰められた指数分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D%28%5Clambda%29+>をg(x)としたときの近似値の分散への影響を調べる</h3>

<p>例3.5で<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+%3D+1+>だった指数分布の値を色々と変えてみて実験する．以下の図は，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+%3D+1%2C5%2C10%2C20+>の時の推定値の変化を示している．左上の図が例3.5と同じ条件となり，そこから右上・左下・右下と<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+>の値を大きくしている．黒の線が推定値の推移，上下の黄色の線が推定値の誤差の範囲（＝分散）となっている．
このプロットを見ると，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+>の値が大きくなるにつれて，分散も大きくなることがわかる．</p>

<p><code>r
par(mfrow=c(2,2))
for(lambda in c(1, 5, 10, 20)){
  Nsim &lt;- 10^4
  y &lt;- rexp(Nsim)/lambda+4.5
  weit &lt;- dnorm(y)/dexp(y-4.5, lambda)
  estint &lt;- cumsum(weit)/1:Nsim
  esterr &lt;- sqrt(cumsum((weit-estint)^2))/(1:Nsim)
  plot(estint, xlab="Mean and error range", ylab="prob", type="l", main=paste("lambda = ",lambda))
  lines(estint+2*esterr, col="gold", lwd=2)
  lines(estint-2*esterr, col="gold", lwd=2)
  abline(h=pnorm(-4.5), col="red")
}
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_2.png" alt="" /></p>

<p>また，がくっと値が変わっている部分は乱数でかなりレアな値を引いて全体的に値が引きずられたからだと思われる．weitの中から値の非常に大きいものを10個選び出して，その時の推定値の変化を見たのが以下の図になる．青の点線で示した箇所が，weitの値が非常に大きくなったポイントを示している．</p>

<p><code>r
abline(v=seq(1,Nsim)[rank(weit)&gt;Nsim-10], col="blue", lty=2)
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_3.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分 その2]]></title>
    <link href="http://yagays.github.com/blog/2012/10/27/imcmr-3-2/"/>
    <updated>2012-10-27T12:33:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/27/imcmr-3-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>練習問題 3.1 正規・コーシー-ベイズ推定量のモンテカルロ積分を2通りの方法で計算する</h3>

<p>正規・コーシー-ベイズ推定量について，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>だとしてモンテカルロ積分を計算する．</p>

<blockquote><p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+%3D+%5Cfrac%7B%5Cint%3Cem%3E%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+%5Cfrac%7B%5Ctheta%7D%7B1%2B%5Ctheta%3Csup%3E2%7De%3Csup%3E%7B-%28x-%5Ctheta%29%3Csup%3E2%2F2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+d%5Ctheta%7D%7B%5Cint%3C%2Fem%3E%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B1%2B%5Ctheta%3Csup%3E2%7De%3Csup%3E%7B-%28x-%5Ctheta%29%3Csup%3E2%2F2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+d%5Ctheta%7D+></p></blockquote>

<p>さて，この式だけだと何のことか全然分からないのだが，式中で消えている係数をしっかり書くと，</p>

<ul>
<li>分子：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%5Ctheta%5Ctimes%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%3Csup%3E2%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%28x-%5Ctheta%29%3Csup%3E2%2F2%7Dd%5Ctheta%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+></li>
<li>分母：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%3Csup%3E2%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%28x-%5Ctheta%29%3Csup%3E2%2F2%7Dd%5Ctheta%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+></li>
</ul>


<p>に分解され，結局はコーシー分布と正規分布の掛け算をしていることになる．模式的に書くと以下のようになる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+%3D+%5Cfrac%7B%5Cint%3Cem%3E%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+%5Ctheta+%5Ctimes+Cauchy+%5Ctimes+Normal%7D%7B%5Cint%3C%2Fem%3E%7B-%5Cinfty%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+Cauchy+%5Ctimes+Normal%7D+></p>

<p>このように，上と下でそれぞれ積分しているので，モンテカルロ積分の実装においても上下別々に推定値を計算した後に<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の推定値を求める．また，コーシー分布と正規分布を掛けた形となっているため，どちらの分布からも乱数を生成してモンテカルロ積分ができる．</p>

<p>ちなみに，本問題は4章の例4.2（P.107）にも同様の推定量を扱った問題が出てくる．</p>

<h3>a.1 被積分関数をプロットする</h3>

<p>左から順に，</p>

<ul>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の分子の分布</li>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の分母の分布</li>
</ul>


<p>を，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>についてプロットしたのが以下の図になる．</p>

<p>```r
delta_num &lt;- function(t){t/(1+t<sup>2)*exp(-(x-t)<sup>2/2)}</sup></sup>
delta_den &lt;- function(t){1/(1+t<sup>2)*exp(-(x-t)<sup>2/2)}</sup></sup></p>

<p>par(mfrow=c(3,2))
for(x in c(0,2,4)){
  curve(delta_num, from=-10, to=10, main=paste("numerator : x=",x))
  curve(delta_den, from=-10, to=10, main=paste("denominator : x=",x))
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3.png" alt="" /></p>

<h3>a.2 コーシー・シミュレーションにもとづくモンテカルロ積分を計算する</h3>

<p>コーシー分布から乱数を生成してモンテカルロ積分をシミュレーションする．イテレーションごとの推定値と標準分散のプロットは<a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">例3.3</a>のプロットと同じで，黒の線が推定値の推移，上下の黄色の線が推定値の誤差の範囲となっている．</p>

<p>モンテカルロ積分の結果としては</p>

<ul>
<li>x=0のとき：-0.01243</li>
<li>x=2のとき：1.282</li>
<li>x=4のとき：3.389</li>
</ul>


<p>となった．</p>

<p>```r
Nsim &lt;- 10<sup>4</sup>
par(mfrow=c(1,3))
for(x in c(0,2,4)){
  theta &lt;- rcauchy(Nsim)
  num &lt;- theta * dnorm(theta, mean=x)
  den &lt;- dnorm(theta, mean=x)</p>

<p>  n &lt;- num[den != 0]
  d &lt;- den[den != 0] # ゼロ除算を起こさないようにしている
  y &lt;- n / d
  estint &lt;- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
  esterr &lt;- sqrt(cumsum((y - estint)<sup>2))/(1:length(y))</sup>
  plot(estint, xlab="Iterations", main=paste("x = ",x,", Estimate= ",mean(estint)),</p>

<pre><code>   type="l", lwd=2, xlim=c(0,10^4), ylim=c(x-1,x+1))
</code></pre>

<p>  lines(estint+2<em>esterr, col="gold", lwd=2)
  lines(estint-2</em>esterr, col="gold", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-1_1.png" alt="" /></p>

<h3>b. 収束する様子を推定値の標準誤差でモニタリングする</h3>

<p>上図の黄色の幅で示してある．</p>

<h3>c. 正規近似によるモンテカルロ積分を計算する</h3>

<p>以下のグラフでは，コーシー乱数のシミュレーションのグラフを重ねてプロットすることで，コーシー乱数を使った場合と正規乱数を使った場合の標準誤差を比較をしている．正規乱数を使ったシミュレーションの結果は，赤とピンクの線で表している．このプロットを見ると，正規乱数を使った場合の方がより誤差が少なく推定値を求められることがわかる．</p>

<ul>
<li>黒＆黄色：コーシー乱数（問題 a.）</li>
<li>赤＆ピンク：正規乱数（問題 c.）</li>
</ul>


<p>```r
Nsim &lt;- 10<sup>4</sup>
par(mfrow=c(1,3))
for(x in c(0,2,4)){
  theta &lt;- rnorm(Nsim, mean=x)
  num &lt;- theta * dcauchy(theta)
  den &lt;- dcauchy(theta)</p>

<p>  n &lt;- num[den != 0]
  d &lt;- den[den != 0]
  y &lt;- n / d
  estint &lt;- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
  esterr &lt;- sqrt(cumsum((y - estint)<sup>2))/(1:length(y))</sup>
  plot(estint, xlab="Iterations", main=paste("x = ",x,", Estimate= ",mean(estint)),</p>

<pre><code>   type="l", lwd=2, col="red", xlim=c(0,10^4), ylim=c(x-1,x+1))
</code></pre>

<p>  lines(estint+2<em>esterr, col="pink", lwd=2)
  lines(estint-2</em>esterr, col="pink", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-1_3.png" alt="" /></p>

<h3>練習問題 3.9</h3>

<p>この問題は，練習問題3.1の続き．</p>

<h4>a.コーシー候補にもとづく受理・棄却アルゴリズムから推定量を計算する</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=X+%5Csim+%5Cmathcal%7BN%7D%28%5Ctheta%2C1%29><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta+%5Csim+%5Cmathcal%7BC%7D%280%2C1%29>において，事後分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%7Cx%29+>は以下のように表される．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%7Cx%29%3D%5Cfrac%7Bp%28x%7C%5Ctheta%29p%28%5Ctheta%29%7D%7Bp%28x%29%7D></p>

<p>ここで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28x%7C%5Ctheta%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%5Cfrac%7B%28x-%5Ctheta%29%3Csup%3E2%7D%7B2%7D%7D%3C%2Fsup%3E%3C%2Fsup%3E+>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Balign%7D+p%28%5Ctheta%7Cx%29+%3D%26amp%3B+%5Cfrac%7Bp%28%5Ctheta%29%7D%7Bp%28x%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%5Cfrac%7B%28x-%5Ctheta%29%3Csup%3E2%7D%7B2%7D%7D%3C%2Fsup%3E%3C%2Fsup%3E+%5C+%5Cpropto%26amp%3B+p%28%5Ctheta%29e%3Csup%3E%7B-%5Cfrac%7B%28x-%5Ctheta%29%3Csup%3E2%7D%7B2%7D%7D%3C%2Fsup%3E%3C%2Fsup%3E+%5Cend%7Balign%7D+></p>

<p>となる．受理・棄却アルゴリズムにおける目標分布と候補分布は</p>

<ul>
<li>目標分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28%5Ctheta%29+>：<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%29e%3Csup%3E%7B-%28x-%5Ctheta%29%3Csup%3E2%2F2%7D></sup></sup></li>
<li><p>候補分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28%5Ctheta%29+>：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%3Csup%3E2%29%7D></sup></p></li>
<li><p>受理・棄却条件：<img src=http://chart.apis.google.com/chart?cht=tx&chl=U%5Ctimes+M+%5Cleq+%5Cfrac%7Bf%28Y%29%7D%7Bg%28Y%29%7D+>，（<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+%5Cmathcal%7BC%7D%280%2C1%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D>）</p></li>
</ul>


<p>のようになる．受理・棄却アルゴリズムの実験は，練習問題3.1と同様に<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>で実行している．以下の図は，受理された乱数のヒストグラムと，その乱数の平均値の値を赤い線で示してある．</p>

<p>```r
Nsim &lt;- 10<sup>4</sup>
x &lt;- rep(0, Nsim)
M &lt;- pi
f &lt;- function(theta){ exp(-(xx-theta)<sup>2/2)/(1+theta<sup>2)}</sup></sup></p>

<p>par(mfrow=c(3,1))
for(xx in c(0,2,4)){
  for(i in 1:Nsim){</p>

<pre><code>y &lt;- rcauchy(1)
while(runif(1)*M &gt; f(y)/dcauchy(y)){
  y &lt;- rcauchy(1)
}
x[i] &lt;- y
</code></pre>

<p>  }
  hist(x, freq=F, nclass=150, main=paste("x = ",xx))
  abline(v=mean(x), col="red", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-9_1.png" alt="" /></p>

<h4>b. 正規・コーシー-ベイズ推定量のモンテカルロ積分における，分母と分子の乱数の選択</h4>

<p>分母と分子で同じ乱数を使う場合と違う乱数を使う場合で，どのような誤差の影響が出るかを比較する．今回は正規乱数を用いたモンテカルロ積分で試してみる．</p>

<ul>
<li>黒＆黄色：分母と分子で同じ乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta_i+>を使う場合</li>
<li>青＆水色：分母と分子で違う乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta_i+>を使う場合</li>
</ul>


<p>以下の図を見ると，xの値が大きい時に違う乱数を使う場合の方が標準誤差が大きい．つまり，分母と分子で別々にシミュレーションを行う際にも，乱数から生成する値を統一することで推定値の分散を押さえることができる．逆に言えば，分母と分子で別々の乱数を使うと，分母と分子どちらかが極端な値を引いてしまったときには推定値が変な値を取ってしまう場合がある．</p>

<p>```r
Nsim &lt;- 10<sup>4</sup>
par(mfrow=c(1,3))
for(x in c(0,2,4)){
  theta &lt;- rnorm(Nsim, mean=x)
  theta_2 &lt;- rnorm(Nsim, mean=x)</p>

<p>  num &lt;- theta * dcauchy(theta)
  den &lt;- dcauchy(theta)
  num_2 &lt;- theta * dcauchy(theta)
  den_2 &lt;- dcauchy(theta_2)</p>

<p>  n &lt;- num[den != 0]
  d &lt;- den[den != 0]
  y &lt;- n / d
  n_2 &lt;- num_2[den_2 != 0]
  d_2 &lt;- den_2[den_2 != 0]
  y_2 &lt;- n_2 / d_2</p>

<p>  estint &lt;- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
  esterr &lt;- sqrt(cumsum((y - estint)<sup>2))/(1:length(y))</sup>
  estint_2 &lt;- (cumsum(n_2)/(1:length(n_2))) / (cumsum(d_2)/(1:length(d_2)))
  esterr_2 &lt;- sqrt(cumsum((y_2 - estint_2)<sup>2))/(1:length(y_2))</sup></p>

<p>  plot(estint, xlab="Iterations", ylab="" ,type="l", lwd=2, col="black", xlim=c(0,10<sup>4),</sup> ylim=c(x-1,x+1))
  lines(estint+2<em>esterr, col="gold", lwd=2)
  lines(estint-2</em>esterr, col="gold", lwd=2)</p>

<p>  par(new=T)
  plot(estint_2, xlab="Iterations", ylab="", type="l", lwd=2, col="blue", xlim=c(0,10<sup>4),</sup> ylim=c(x-1,x+1))
  lines(estint_2+2<em>esterr_2, col="skyblue", lwd=2)
  lines(estint_2-2</em>esterr_2, col="skyblue", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-9_2.png" alt="" /></p>

<h3>参考</h3>

<ul>
<li><a href="http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html">http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html</a></li>
</ul>


<p>1章から3章途中までの解説とRのコードがある．今回の作図に関しては，このページのBook Notesを参考にさせていただいた．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分]]></title>
    <link href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/"/>
    <updated>2012-10-25T20:33:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/25/imcmr-3-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：乱数を利用して積分を数値的に求める</h3>

<p>モンテカルロ積分とは，乱数を利用して単変量や多変数の積分を近似し，解析的に解けない問題を数値的に解くという手法である．これは2章で示したように，任意の分布に従う乱数を理論上無限に生成できるからこそ成り立つ手法であり，本手法はi.i.dを前提とした大数の法則や中心極限定理のような確率論に落としこんで解析している．具体的なモンテカルロ法の利用例としては確率分布を積分といったことが挙げられ，ベイズなどに限らず確率分布を仮定するような統計手法などにおいて必要となる．</p>

<h3>例 3.3 モンテカルロ積分の具体例</h3>

<p>図の上半分は<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28x%29+%3D+%5B%5Ccos%2850x%29+%2B+%5Csin%2820x%29+%5D%3Csup%3E2%3C%2Fsup%3E+>を0から1の間で図示したもの．モンテカルロ積分ではこの曲線の下側の面積を求めることになる．
図の下半分は，実際にモンテカルロ積分のシミュレーションをしたもの．横軸がシミュレーション回数（サンプル数m）で，縦軸が経験平均<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7Bh%7D%3Cem%3Em+%3D+%5Cfrac%7B1%7D%7Bm%7D%5Csum%3C%2Fem%3E%7Bj%3D1%7D%3Csup%3E%7Bm%7Dh%28x_j%29%3C%2Fsup%3E+>を示したもの．黒の線が平均値の推移，上下の黄色の線が推定標準誤差に基づく信頼幅，赤の直線がRのintegrate関数で求めた積分値を示している．この図から，シミュレーション回数を重ねるごとに数値的に求めた値が実際の積分値に収束していく様子がわかる．</p>

<p><code>r
h &lt;- function(x){(cos(50*x) + sin(20*x))^2}
par(mar=c(2,2,1,1), mfrow=c(2,1))
curve(h, xlab="Function", ylab="", lwd=2)
integrate(h,0,1)
x &lt;- h(runif(10^4))
estint &lt;- cumsum(x)/(1:10^4)
esterr &lt;- sqrt(cumsum((x-estint)^2))/(1:10^4)
plot(estint, xlab="Mean and error range", type="l", lwd=2, ylim=mean(x)+20*c(-esterr[10^4], esterr[10^4]))
lines(estint+2*esterr, col="gold", lwd=2)
lines(estint-2*esterr, col="gold", lwd=2)
abline(h=integrate(h,0,1)$value,lwd=2,col="red")
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_1.png" alt="" /></p>

<h3>例 3.4 正規分布のモンテカルロ積分における値の精度と効率</h3>

<p>「裾」と呼ばれる部分は正規分布において釣鐘型の山の頂点から遠く離れた部分のことを指しており，正規分布の平均から外れるということは起こる確率がきわめて低い部分である．そのため，正規乱数を基にしたモンテカルロ積分においては，山の頂点に近い部分の値は乱数でよく引きあてるので数は十分なのだが，裾の部分の「値が大きい/小さい」値は乱数でなかなか引き当てることができない．精度に大きな影響を与える部分でありながらもシミュレーションを重ねないと十分な数を得ることができないため，古典的なモンテカルロ積分の方法で精度を上げるためには，試行回数を多くしなければならない．</p>

<p>以下の実験では，実際に有効数字4ケタで正確な数値を出すために，10<sup>8</sup> 回ものシミュレーションを行なっている．最終的な表3.1は，行が試行回数，列が<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+>のときのxに対応している．一番下の行の値がboundという変数のそれぞれ値と同じになっていることから，10<sup>8</sup> もの試行回数が必要であることがわかる．</p>

<p>```r
x &lt;- rnorm(10<sup>8)</sup>
bound &lt;- qnorm(c(0.5, 0.75, 0.8, 0.9, 0.95, 0.99, 0.999, 0.9999))
res &lt;- matrix(0, ncol=8, nrow=7)
for(i in 2:8)
  for(j in 1:8)</p>

<pre><code>res[i-1, j] &lt;- mean(x[1:10^i] &lt; bound[j])
</code></pre>

<p>matrix(as.numeric(format(res, digi=4)), ncol=8)
```</p>

<p>```r</p>

<h1>> matrix(as.numeric(format(res, digi=4)), ncol=8)</h1>

<h1>[,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]</h1>

<h1>[1,] 0.5200 0.7600 0.8000 0.9300 0.9800 1.0000 1.0000 1.0000</h1>

<h1>[2,] 0.4760 0.7400 0.7880 0.8980 0.9550 0.9950 1.0000 1.0000</h1>

<h1>[3,] 0.4980 0.7477 0.7967 0.8981 0.9480 0.9889 0.9993 0.9999</h1>

<h1>[4,] 0.4994 0.7503 0.7996 0.8992 0.9504 0.9899 0.9989 0.9999</h1>

<h1>[5,] 0.4999 0.7503 0.8002 0.9001 0.9501 0.9899 0.9990 0.9999</h1>

<h1>[6,] 0.4999 0.7500 0.8000 0.9001 0.9500 0.9900 0.9990 0.9999</h1>

<h1>[7,] 0.5000 0.7500 0.8000 0.9000 0.9500 0.9900 0.9990 0.9999</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 練習問題]]></title>
    <link href="http://yagays.github.com/blog/2012/10/23/imcmr-2-3/"/>
    <updated>2012-10-23T08:57:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/23/imcmr-2-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>練習問題 2.18</h3>

<h3>a. f(x)とMg(x)をプロットする</h3>

<p>定数Mは例2.7のようにoptimize()関数で求めている．以下の図はfとgの分布を図示したもので，黒い曲線fに対して，青い曲線Mg(x)が全体を覆い被さるようになっていることがわかる．</p>

<p>```r
f &lt;- function(x){exp(-x<sup>2/2)</sup> * (sin(6<em>x)<sup>2</sup> + 3</em>cos(x)<sup>2<em>sin(4</em>x)<sup>2</sup></sup> + 1)}
g &lt;- function(x){exp(-x<sup>2/2)/sqrt(2*pi)}</sup>
M &lt;- optimize(f=function(x){f(x)/g(x)}, interval=c(0,1),maximum=T)$objective</p>

<p>par(mfrow=c(1,1))
curve(f(x),from=-5,to=5,ylim=c(0,5))
curve(M*g(x),add=T,col="blue")
```
<img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_7.png" alt="" /></p>

<h3>b. 受理・棄却アルゴリズムを使ってfから2500個の乱数を生成する</h3>

<p>ここで標準正規分布からの乱数を使うのは，g(x)が標準正規密度だから（P.59の受理・棄却法のアルゴリズムの1.にある<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+g+>の部分に該当する）．</p>

<p>この問題では2500個の<strong>受理された</strong>乱数が欲しいので，P.61のコードを真似て作成している．ただし，このコードは少々効率が悪く，決められた数の乱数を作ったらループが終わりというものではない（受理確率を元にして多めに作ってる）ので，ヒストグラムとして図示する際には2500個のみを取り出して作図している．</p>

<p>```r
Nsim &lt;- 2500
x &lt;- NULL
while(length(x) &lt; Nsim){
  y &lt;- rnorm(Nsim<em>M)
  x &lt;- c(x, y[runif(Nsim</em>M,0,M) * g(y) &lt; f(y) ])  <br/>
}
hist(x[1:Nsim],freq=F,nclass=150,main="Nsim = 2500")
curve(f(x)/integrate(f,-Inf,Inf)$value, add=T, col="red")</p>

<h1>curveの中のintegrateに関しては後述(本問のc.)</h1>

<p>```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_8.png" alt="" /></p>

<p>概ねfの分布に沿った乱数が生成されているようだ．乱数が2500個だけでは少し不明瞭のため，Nsimの数を10<sup>4</sup> にして再試したのが下の図．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_9.png" alt="" /></p>

<h3>c. シミュレーションから得られた受理率から正規化定数を求める</h3>

<p>P.60にあるように，受理確率は基本的に1/Mだけれども，正規化されていない関数に関しては定数CがMに吸収されているので注意が必要となる．今回の場合，シミュレーションから求めた受理確率rを使うことで，以下の式から正規化定数を近似することができる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=r+%3D+%5Cfrac%7B1%7D%7BC+%5Ctimes+M%7D+></p>

<p>今回の場合，Mは10.94，rは0.54となったので，Cは0.17程度だと見積もった．</p>

<p><code>r
Nsim &lt;- 10^4
x &lt;- NULL # xは受理した乱数
z &lt;- NULL # zは生成した乱数すべて
while(length(x) &lt; Nsim){
  y &lt;- rnorm(Nsim*M)
  x &lt;- c(x, y[runif(Nsim*M,0,M) * g(y) &lt; f(y) ])
  z &lt;- c(z, y)
}
r &lt;- length(x)/length(z)
C &lt;- 1/(M*r)
</code></p>

<p>```r</p>

<blockquote><p>M; r; C
[1] 10.94031
[1] 0.5369048
[1] 0.1702445
```</p></blockquote>

<p>さて，答え合わせ(?)だが，正規化定数は単純にfの<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5B-%5Cinfty%2C%5Cinfty%5D>の積分を求めることによって計算することができる．これにはRのintegrate()関数を使って-infからinfまでを計算すればよい．確率分布の定義から，これが1になるように正規化定数を定めれば良いということで，以下のように計算した結果，0.1696543となった．</p>

<p>```r</p>

<blockquote><p>1/integrate(f,-Inf,Inf)$value
[1] 0.1696543
```</p></blockquote>

<h3>練習問題 2.19 二重指数分布が候補分布の受理・棄却アルゴリズムにおいて標準正規分布から乱数を生成する際のMとg(x)の最適化</h3>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D+%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+%5C+g%28x%29+%3D+%5Cfrac%7B%5Calpha%7D%7B2%7D+%5Cexp%28-%5Calpha+%7Cx%7C%29></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%2Fg+%3D+%5Cfrac%7B%5Csqrt%7B2%2F%5Cpi%7D%7D%7B%5Calpha%7D+%5Cexp%28%5Calpha%7Cx%7C-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+>より，上界Mを取るときのx_maxの値を調べるには，とりあえずxで微分して0になるときの値を求めれば良い．expの部分を微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28%5Calpha+-+x%29+>みたいな項が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3Cem%3E%7Bmax%7D+%3D+%5Calpha+>（厳密には<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3C%2Fem%3E%7Bmax%7D+%3D+%5Cpm+%5Calpha+>）．</p>

<p>次に，受理率を最適化するということは1/Mの値を大きくすれば良いので，結局はMの値の最大値を求めれば良い．<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Calpha+>のときのMを<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>に関して微分して0になるときの値ということで計算していくと
<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B%28%5Calpha%3Csup%3E2-1%29%5Cexp%28%5Calpha%3Csup%3E2%2F2%29%7D%7B%5Calpha%3Csup%3E2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+>みたいな項が出てくるので，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+1+>の時にMが最大値を取り，受理率が最適化される．</p>

<h3>練習問題 2.22 切断正規分布から正規乱数を生成する</h3>

<h4>a. 切断正規分布から乱数を生成する</h4>

<p>```r
library(msm) # dtnorm()のため
mu &lt;- 0
sigma &lt;- 1</p>

<p>par(mfrow=c(4,2))
for(a in c(-2.32, -0.84, -0.67, 0, 0.67, 0.84, 2.32)){
  N &lt;- 10<sup>4</sup>
  X &lt;- rep(0,N)
  for(i in 1:N){</p>

<pre><code>z &lt;- rnorm(1, mean=mu, sd=sigma)
while(z &lt; a){
z &lt;- rnorm(1, mean=mu, sd=sigma)
}
</code></pre>

<p>  X[i] &lt;- z
  }
  hist(X, freq=F, nclass=150, main=paste("Truncated Normal Distribution: a = ",a))
  curve(dtnorm(x, mean=mu, sd=sigma, lower=a, upper=Inf), add=T, col="red", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_10.png" alt="" /></p>

<h4>b. シミュレーションので受理する確率を求める</h4>

<p>上で示したアルゴリズムで考える．z &lt; aならアタリ，それ以外ならハズレというようなときにどれだけ数を撃てばz&lt;aに入るかということを考えると，正規分布のz &lt; aの面積を求めればいいことがわかる．なお，ここで出てくる<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28x%29+>という関数は定義されていないが，以下のような累積標準正規分布（本書P.78に出てくる）のことだと思われる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28t%29+%3D+%5Cint_%7B-%5Cinfty%7D%3Csup%3E%7Bt%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-y%3Csup%3E2%2F2%7Ddy%3C%2Fsup%3E%3C%2Fsup%3E+></p>

<p>この形式になるように，aからの累積正規分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28x%7C%5Cmu%2C+%5Csigma%3Csup%3E2%2C%3C%2Fsup%3E+a%29+%5Csim++%5Cint_%7Ba%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7De%3Csup%3E%7B-%5Cfrac%7B%28x-%5Cmu%29%3Csup%3E2%7D%7B2%5Csigma%3Csup%3E2%7D%7Ddx>を変形していけばよい．</sup></sup></sup></p>

<p>ここで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v+%3D+-%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D+>とおくと，<img src=http://chart.apis.google.com/chart?cht=tx&chl=dv+%3D+-%5Cfrac%7Bdx%7D%7B%5Csigma%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3Aa+%5Crightarrow+%5Cinfty+> のとき，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v%3A-%5Cinfty+%5Crightarrow+%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D+>をとる．よって，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28v%7C%5Cmu%2C%5Csigma%3Csup%3E2%2Ca%29%3C%2Fsup%3E+%3D+%5Cint_%7B%5Cinfty%7D%3Csup%3E%7B%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%5Cfrac%7Bv%3Csup%3E2%7D%7B2%7D%7Ddv%3C%2Fsup%3E%3C%2Fsup%3E+%3D+%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>  となる．</p>

<p>また，aの値が裾にある（値が大きくなる）と，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>の値が小さくなるので，シミュレーション回数が多くなる．</p>

<h4>c. 切断正規分布の乱数を正規分布から生成することを考える</h4>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+></li>
</ul>


<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq%3C%2Fsup%3E+z%7D%7D%7B%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%3Csup%3E2%7D%7B2%7D%29%7D%5C%3C%2Fsup%3E+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-x%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></p>

<p>となり候補分布の制約を満たすので，正規候補にもとづく受理・棄却アルゴリズムは切断正規分布から乱数を生成するために使える．</p>

<p>次に，このときの最適なMを考える．x=aにおいて<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D+%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+>より，この式を<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D+>で微分すると</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D%5CBigr%29%27+%3D+%5Csqrt%7B2%5Cpi%7D%28-a%2B%5Cbar%7B%5Cmu%7D%29%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></p>

<p>となるので，Mは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D%3Da+>のとき最適値をとる．</p>

<h3>d. 候補分布に指数分布を使うことを考える</h3>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=g_%7B%5Calpha%7D%28z%29%3D%5Calpha+e%3Csup%3E%7B-%5Calpha%28z-a%29%7D%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
</ul>


<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Balign%7D%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%26amp%3B%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq%3C%2Fsup%3E+a%7D%7D%7B%5Calpha+e%3Csup%3E%7B-%5Calpha%28z-a%29%7D%7D%5C%26amp%3B%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%2B%5Calpha%28x-a%29%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E%3C%2Fsup%3E+%5Cgeq+a%7D%5Cend%7Balign%7D+></p>

<p>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D+%5Cpropto+e%3Csup%3E%7B%5Calpha%28x-a%29%7De%3Csup%3E%7B-z%3Csup%3E2%2F2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+></p>

<p>となる．上式を前と同じように微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28-x%2B%5Calpha%29+>が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha+>のとき最大値を取り，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28%5Calpha%3Csup%3E2%2F2-%5Calpha%3C%2Fsup%3E+a%29+>で極限が与えられる．</p>

<p>次に，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に正当な候補密度になることを導く．f/gの比が0より大きいことを示せば良いのだが，上式を見ると結局expの外側の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Calpha%7D+>，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>を調べないといけない．ということで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>で微分して最適値の時の値を求める．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha>のとき<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D+%3D+%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E+a%29+>なので，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D%5CBigr%29%27+%3D+-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E%3C%2Fsup%3E+a%29%2B%5Cfrac%7B1%7D%7B%5Calpha%7D%28%5Calpha-a%29%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E+a%29+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cbigl%28-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%2B%28%5Calpha-a%29%5Cbigr%29%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E%3C%2Fsup%3E+a%29></p>

<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%2B%28%5Calpha-a%29%3C%2Fsup%3E+%3D+0+></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha%3Csup%3E2%3C%2Fsup%3E+-+a+%5Calpha+-+1+%3D+0+></p>

<p>よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+>となる．</p>

<p>じゃあプラスかマイナスかどっちなんだという話になるのだが，ここで<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%5Cgeq+a+>という前提条件を使うと，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+%5Cgeq+a+></p>

<p>が成り立つ． <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D+>というのはaよりちょっとだけ大きい数なので，上式を満たすaは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%2B+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+>となり，この式は常に正である．よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に，正当な候補密度になる．</p>
]]></content>
  </entry>
  
</feed>
