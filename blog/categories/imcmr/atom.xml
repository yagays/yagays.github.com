<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: imcmr | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.com/blog/categories/imcmr/atom.xml" rel="self"/>
  <link href="http://yagays.github.com/"/>
  <updated>2012-10-26T01:15:04+09:00</updated>
  <id>http://yagays.github.com/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分]]></title>
    <link href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/"/>
    <updated>2012-10-25T20:33:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/25/imcmr-3-1</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：乱数を利用して積分を数値的に求める</h3>

<p>モンテカルロ積分とは，乱数を利用して単変量や多変数の積分を近似し，解析的に解けない問題を数値的に解くという手法である．これは2章で示したように，任意の分布に従う乱数を理論上無限に生成できるからこそ成り立つ手法であり，本手法はi.i.dを前提とした大数の法則や中心極限定理のような確率論に落としこんで解析している．具体的なモンテカルロ法の利用例としては確率分布を積分といったことが挙げられ，ベイズなどに限らず確率分布を仮定するような統計手法などにおいて必要となる．</p>

<h3>例 3.3 モンテカルロ積分の具体例</h3>

<p>図の上半分は<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28x%29+%3D+%5B%5Ccos%2850x%29+%2B+%5Csin%2820x%29+%5D%3Csup%3E2%3C%2Fsup%3E+>を0から1の間で図示したもの．モンテカルロ積分ではこの曲線の下側の面積を求めることになる．
図の下半分は，実際にモンテカルロ積分のシミュレーションをしたもの．横軸がシミュレーション回数（サンプル数m）で，縦軸が経験平均<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7Bh%7D%3Cem%3Em+%3D+%5Cfrac%7B1%7D%7Bm%7D%5Csum%3C%2Fem%3E%7Bj%3D1%7D%3Csup%3E%7Bm%7Dh%28x_j%29%3C%2Fsup%3E+>を示したもの．黒の線が平均値の推移，上限の黄色の線が推定標準誤差に基づく信頼幅，赤の直線がRのintegrate関数で求めた積分値を示している．この図から，シミュレーション回数を重ねるごとに数値的に求めた値が実際の積分値に収束していく様子がわかる．</p>

<p><code>r
h &lt;- function(x){(cos(50*x) + sin(20*x))^2}
par(mar=c(2,2,1,1), mfrow=c(2,1))
curve(h, xlab="Function", ylab="", lwd=2)
integrate(h,0,1)
x &lt;- h(runif(10^4))
estint &lt;- cumsum(x)/(1:10^4)
esterr &lt;- sqrt(cumsum((x-estint)^2))/(1:10^4)
plot(estint, xlab="Mean and error range", type="l", lwd=2, ylim=mean(x)+20*c(-esterr[10^4], esterr[10^4]))
lines(estint+2*esterr, col="gold", lwd=2)
lines(estint-2*esterr, col="gold", lwd=2)
abline(h=integrate(h,0,1)$value,lwd=2,col="red")
</code></p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_1.png" alt="" /></p>

<h3>例 3.4 正規分布のモンテカルロ積分における値の精度と効率</h3>

<p>「裾」と呼ばれる部分は正規分布において釣鐘型の山の頂点から遠く離れた部分のことを指しており，正規分布の平均から外れるということは起こる確率がきわめて低い部分である．そのため，正規乱数を基にしたモンテカルロ積分においては，山の頂点に近い部分の値は乱数でよく引きあてるので数は十分なのだが，裾の部分の「値が大きい/小さい」値は乱数でなかなか引き当てることができない．精度に大きな影響を与える部分でありながらもシミュレーションを重ねないと十分な数を得ることができないため，古典的なモンテカルロ積分の方法で精度を上げるためには，試行回数を多くしなければならない．</p>

<p>以下の実験では，実際に有効数字4ケタで正確な数値を出すために，10<sup>8</sup> 回ものシミュレーションを行なっている．最終的な表3.1は，行が試行回数，列が<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+>のときのxに対応している．一番下の行の値がboundという変数のそれぞれ値と同じになっていることから，10<sup>8</sup> もの試行回数が必要であることがわかる．</p>

<p>```r
x &lt;- rnorm(10<sup>8)</sup>
bound &lt;- qnorm(c(0.5, 0.75, 0.8, 0.9, 0.95, 0.99, 0.999, 0.9999))
res &lt;- matrix(0, ncol=8, nrow=7)
for(i in 2:8)
  for(j in 1:8)</p>

<pre><code>res[i-1, j] &lt;- mean(x[1:10^i] &lt; bound[j])
</code></pre>

<p>matrix(as.numeric(format(res, digi=4)), ncol=8)
```</p>

<p>```r</p>

<h1>> matrix(as.numeric(format(res, digi=4)), ncol=8)</h1>

<h1>[,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]</h1>

<h1>[1,] 0.5200 0.7600 0.8000 0.9300 0.9800 1.0000 1.0000 1.0000</h1>

<h1>[2,] 0.4760 0.7400 0.7880 0.8980 0.9550 0.9950 1.0000 1.0000</h1>

<h1>[3,] 0.4980 0.7477 0.7967 0.8981 0.9480 0.9889 0.9993 0.9999</h1>

<h1>[4,] 0.4994 0.7503 0.7996 0.8992 0.9504 0.9899 0.9989 0.9999</h1>

<h1>[5,] 0.4999 0.7503 0.8002 0.9001 0.9501 0.9899 0.9990 0.9999</h1>

<h1>[6,] 0.4999 0.7500 0.8000 0.9001 0.9500 0.9900 0.9990 0.9999</h1>

<h1>[7,] 0.5000 0.7500 0.8000 0.9000 0.9500 0.9900 0.9990 0.9999</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 練習問題]]></title>
    <link href="http://yagays.github.com/blog/2012/10/23/imcmr-2-3/"/>
    <updated>2012-10-23T08:57:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/23/imcmr-2-3</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>練習問題 2.18</h3>

<h3>a. f(x)とMg(x)をプロットする</h3>

<p>定数Mは例2.7のようにoptimize()関数で求めている．以下の図はfとgの分布を図示したもので，黒い曲線fに対して，青い曲線Mg(x)が全体を覆い被さるようになっていることがわかる．</p>

<p>```r
f &lt;- function(x){exp(-x<sup>2/2)</sup> * (sin(6<em>x)<sup>2</sup> + 3</em>cos(x)<sup>2<em>sin(4</em>x)<sup>2</sup></sup> + 1)}
g &lt;- function(x){exp(-x<sup>2/2)/sqrt(2*pi)}</sup>
M &lt;- optimize(f=function(x){f(x)/g(x)}, interval=c(0,1),maximum=T)$objective</p>

<p>par(mfrow=c(1,1))
curve(f(x),from=-5,to=5,ylim=c(0,5))
curve(M*g(x),add=T,col="blue")
```
<img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_7.png" alt="" /></p>

<h3>b. 受理・棄却アルゴリズムを使ってfから2500個の乱数を生成する</h3>

<p>ここで標準正規分布からの乱数を使うのは，g(x)が標準正規密度だから（P.59の受理・棄却法のアルゴリズムの1.にある<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+g+>の部分に該当する）．</p>

<p>この問題では2500個の<strong>受理された</strong>乱数が欲しいので，P.61のコードを真似て作成している．ただし，このコードは少々効率が悪く，決められた数の乱数を作ったらループが終わりというものではない（受理確率を元にして多めに作ってる）ので，ヒストグラムとして図示する際には2500個のみを取り出して作図している．</p>

<p>```r
Nsim &lt;- 2500
x &lt;- NULL
while(length(x) &lt; Nsim){
  y &lt;- rnorm(Nsim<em>M)
  x &lt;- c(x, y[runif(Nsim</em>M,0,M) * g(y) &lt; f(y) ])  <br/>
}
hist(x[1:Nsim],freq=F,nclass=150,main="Nsim = 2500")
curve(f(x)/integrate(f,-Inf,Inf)$value, add=T, col="red")</p>

<h1>curveの中のintegrateに関しては後述(本問のc.)</h1>

<p>```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_8.png" alt="" /></p>

<p>概ねfの分布に沿った乱数が生成されているようだ．乱数が2500個だけでは少し不明瞭のため，Nsimの数を10<sup>4</sup> にして再試したのが下の図．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_9.png" alt="" /></p>

<h3>c. シミュレーションから得られた受理率から正規化定数を求める</h3>

<p>P.60にあるように，受理確率は基本的に1/Mだけれども，正規化されていない関数に関しては定数CがMに吸収されているので注意が必要となる．今回の場合，シミュレーションから求めた受理確率rを使うことで，以下の式から正規化定数を近似することができる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=r+%3D+%5Cfrac%7B1%7D%7BC+%5Ctimes+M%7D+></p>

<p>今回の場合，Mは10.94，rは0.54となったので，Cは0.17程度だと見積もった．</p>

<p><code>r
Nsim &lt;- 10^4
x &lt;- NULL # xは受理した乱数
z &lt;- NULL # zは生成した乱数すべて
while(length(x) &lt; Nsim){
  y &lt;- rnorm(Nsim*M)
  x &lt;- c(x, y[runif(Nsim*M,0,M) * g(y) &lt; f(y) ])
  z &lt;- c(z, y)
}
r &lt;- length(x)/length(z)
C &lt;- 1/(M*r)
</code></p>

<p>```r</p>

<blockquote><p>M; r; C
[1] 10.94031
[1] 0.5369048
[1] 0.1702445
```</p></blockquote>

<p>さて，答え合わせ(?)だが，正規化定数は単純にfの<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5B-%5Cinfty%2C%5Cinfty%5D>の積分を求めることによって計算することができる．これにはRのintegrate()関数を使って-infからinfまでを計算すればよい．確率分布の定義から，これが1になるように正規化定数を定めれば良いということで，以下のように計算した結果，0.1696543となった．</p>

<p>```r</p>

<blockquote><p>1/integrate(f,-Inf,Inf)$value
[1] 0.1696543
```</p></blockquote>

<h3>練習問題 2.19 二重指数分布が候補分布の受理・棄却アルゴリズムにおいて標準正規分布から乱数を生成する際のMとg(x)の最適化</h3>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D+%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+%5C+g%28x%29+%3D+%5Cfrac%7B%5Calpha%7D%7B2%7D+%5Cexp%28-%5Calpha+%7Cx%7C%29></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%2Fg+%3D+%5Cfrac%7B%5Csqrt%7B2%2F%5Cpi%7D%7D%7B%5Calpha%7D+%5Cexp%28%5Calpha%7Cx%7C-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+>より，上界Mを取るときのx_maxの値を調べるには，とりあえずxで微分して0になるときの値を求めれば良い．expの部分を微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28%5Calpha+-+x%29+>みたいな項が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3Cem%3E%7Bmax%7D+%3D+%5Calpha+>（厳密には<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3C%2Fem%3E%7Bmax%7D+%3D+%5Cpm+%5Calpha+>）．</p>

<p>次に，受理率を最適化するということは1/Mの値を大きくすれば良いので，結局はMの値の最大値を求めれば良い．<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Calpha+>のときのMを<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>に関して微分して0になるときの値ということで計算していくと
<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B%28%5Calpha%3Csup%3E2-1%29%5Cexp%28%5Calpha%3Csup%3E2%2F2%29%7D%7B%5Calpha%3Csup%3E2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+>みたいな項が出てくるので，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+1+>の時にMが最大値を取り，受理率が最適化される．</p>

<h3>練習問題 2.22 切断正規分布から正規乱数を生成する</h3>

<h4>a. 切断正規分布から乱数を生成する</h4>

<p>```r
library(msm) # dtnorm()のため
mu &lt;- 0
sigma &lt;- 1</p>

<p>par(mfrow=c(4,2))
for(a in c(-2.32, -0.84, -0.67, 0, 0.67, 0.84, 2.32)){
  N &lt;- 10<sup>4</sup>
  X &lt;- rep(0,N)
  for(i in 1:N){</p>

<pre><code>z &lt;- rnorm(1, mean=mu, sd=sigma)
while(z &lt; a){
z &lt;- rnorm(1, mean=mu, sd=sigma)
}
</code></pre>

<p>  X[i] &lt;- z
  }
  hist(X, freq=F, nclass=150, main=paste("Truncated Normal Distribution: a = ",a))
  curve(dtnorm(x, mean=mu, sd=sigma, lower=a, upper=Inf), add=T, col="red", lwd=2)
}
```</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_10.png" alt="" /></p>

<h4>b. シミュレーションので受理する確率を求める</h4>

<p>上で示したアルゴリズムで考える．z &lt; aならアタリ，それ以外ならハズレというようなときにどれだけ数を撃てばz&lt;aに入るかということを考えると，正規分布のz &lt; aの面積を求めればいいことがわかる．なお，ここで出てくる<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28x%29+>という関数は定義されていないが，以下のような累積標準正規分布（本書P.78に出てくる）のことだと思われる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28t%29+%3D+%5Cint_%7B-%5Cinfty%7D%3Csup%3E%7Bt%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-y%3Csup%3E2%2F2%7Ddy%3C%2Fsup%3E%3C%2Fsup%3E+></p>

<p>この形式になるように，aからの累積正規分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28x%7C%5Cmu%2C+%5Csigma%3Csup%3E2%2C%3C%2Fsup%3E+a%29+%5Csim++%5Cint_%7Ba%7D%3Csup%3E%7B%5Cinfty%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7De%3Csup%3E%7B-%5Cfrac%7B%28x-%5Cmu%29%3Csup%3E2%7D%7B2%5Csigma%3Csup%3E2%7D%7Ddx>を変形していけばよい．</sup></sup></sup></p>

<p>ここで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v+%3D+-%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D+>とおくと，<img src=http://chart.apis.google.com/chart?cht=tx&chl=dv+%3D+-%5Cfrac%7Bdx%7D%7B%5Csigma%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3Aa+%5Crightarrow+%5Cinfty+> のとき，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v%3A-%5Cinfty+%5Crightarrow+%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D+>をとる．よって，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28v%7C%5Cmu%2C%5Csigma%3Csup%3E2%2Ca%29%3C%2Fsup%3E+%3D+%5Cint_%7B%5Cinfty%7D%3Csup%3E%7B%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%7D%3C%2Fsup%3E+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%3Csup%3E%7B-%5Cfrac%7Bv%3Csup%3E2%7D%7B2%7D%7Ddv%3C%2Fsup%3E%3C%2Fsup%3E+%3D+%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>  となる．</p>

<p>また，aの値が裾にある（値が大きくなる）と，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>の値が小さくなるので，シミュレーション回数が多くなる．</p>

<h4>c. 切断正規分布の乱数を正規分布から生成することを考える</h4>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+></li>
</ul>


<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq%3C%2Fsup%3E+z%7D%7D%7B%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%3Csup%3E2%7D%7B2%7D%29%7D%5C%3C%2Fsup%3E+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-x%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></p>

<p>となり候補分布の制約を満たすので，正規候補にもとづく受理・棄却アルゴリズムは切断正規分布から乱数を生成するために使える．</p>

<p>次に，このときの最適なMを考える．x=aにおいて<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D+%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+>より，この式を<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D+>で微分すると</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D%5CBigr%29%27+%3D+%5Csqrt%7B2%5Cpi%7D%28-a%2B%5Cbar%7B%5Cmu%7D%29%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></p>

<p>となるので，Mは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D%3Da+>のとき最適値をとる．</p>

<h3>d. 候補分布に指数分布を使うことを考える</h3>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=g_%7B%5Calpha%7D%28z%29%3D%5Calpha+e%3Csup%3E%7B-%5Calpha%28z-a%29%7D%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E+%5Cgeq+a%7D+></li>
</ul>


<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Balign%7D%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%26amp%3B%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%3Csup%3E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq%3C%2Fsup%3E+a%7D%7D%7B%5Calpha+e%3Csup%3E%7B-%5Calpha%28z-a%29%7D%7D%5C%26amp%3B%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%2B%5Calpha%28x-a%29%29%5Cmathbb%7BI%7D_%7Bx%3C%2Fsup%3E%3C%2Fsup%3E+%5Cgeq+a%7D%5Cend%7Balign%7D+></p>

<p>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D+%5Cpropto+e%3Csup%3E%7B%5Calpha%28x-a%29%7De%3Csup%3E%7B-z%3Csup%3E2%2F2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+></p>

<p>となる．上式を前と同じように微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28-x%2B%5Calpha%29+>が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha+>のとき最大値を取り，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28%5Calpha%3Csup%3E2%2F2-%5Calpha%3C%2Fsup%3E+a%29+>で極限が与えられる．</p>

<p>次に，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に正当な候補密度になることを導く．f/gの比が0より大きいことを示せば良いのだが，上式を見ると結局expの外側の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Calpha%7D+>，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>を調べないといけない．ということで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>で微分して最適値の時の値を求める．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha>のとき<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D+%3D+%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E+a%29+>なので，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D%5CBigr%29%27+%3D+-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E%3C%2Fsup%3E+a%29%2B%5Cfrac%7B1%7D%7B%5Calpha%7D%28%5Calpha-a%29%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E+a%29+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cbigl%28-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%2B%28%5Calpha-a%29%5Cbigr%29%5Cexp%28%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D-%5Calpha%3C%2Fsup%3E%3C%2Fsup%3E+a%29></p>

<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5Cfrac%7B1%7D%7B%5Calpha%3Csup%3E2%7D%2B%28%5Calpha-a%29%3C%2Fsup%3E+%3D+0+></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha%3Csup%3E2%3C%2Fsup%3E+-+a+%5Calpha+-+1+%3D+0+></p>

<p>よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+>となる．</p>

<p>じゃあプラスかマイナスかどっちなんだという話になるのだが，ここで<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%5Cgeq+a+>という前提条件を使うと，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+%5Cgeq+a+></p>

<p>が成り立つ． <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D+>というのはaよりちょっとだけ大きい数なので，上式を満たすaは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%2B+%5Csqrt%7Ba%3Csup%3E2%3C%2Fsup%3E+%2B+4%7D%7D%7B2%7D+>となり，この式は常に正である．よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に，正当な候補密度になる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 受理・棄却法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/22/imcmr-2-2/"/>
    <updated>2012-10-22T21:38:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/22/imcmr-2-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ:<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：逆変換法や一般変換法で生成できない分布から乱数を生成する</h3>

<p>逆変換法や一般変換法では，一様分布から生成される乱数に何らかの関数を通すことで任意の乱数を生成してきた．しかし，このような直接的な方法で乱数を生成できない分布の場合には，間接的な方法によって乱数を生成する必要がある．そのような場合には，本来求めたい乱数の分布とは違った分布から乱数を生成し，それが受理できる値か棄却できる値かを選り分けることで，間接的に求めたい分布から生成された乱数を表現する．</p>

<ul>
<li>目標密度（target）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=f+></li>
<li>手段密度・候補密度（candidate）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=g+></li>
</ul>


<p>この受理・棄却法では1つの乱数の値<img src=http://chart.apis.google.com/chart?cht=tx&chl=X+>につき，2つの乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+g+>と<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>を考える．前者は候補密度から乱数を生成したもの，後者は受理・棄却に用いる一様乱数．この2つの乱数を，以下の式にあてはめて受理するか棄却するかを判断する．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Cleq+%5Cfrac%7Bf%28Y%29%7D%7BM+%5Ctimes+g%28Y%29%7D+></p>

<p>ここで登場するMは提案分布と候補密度から見積もった定数で，候補密度の制約の中で登場する値．基本的にある値より大きければ何でも良いのだが，シミュレーションの効率に関わってくる．これが小さい値であればあるほど，シミュレーションで棄却される乱数の候補が少なくて済むので，結果として効率が良くなる．最適なMは以下の式で与えられる（<a href="http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf">UserR!資料pdf</a> p.51）．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=M+%3D+%5Csup_x+%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D+></p>

<br />


<h3>例 2.7, 例2.8 ベータ分布の乱数を生成する(2通り)</h3>

<p>黒の点が一様分布/ベータ分布から生成した乱数，赤の点がアルゴリズムで受理された乱数（今回求めたかった乱数），青の線が極限<img src=http://chart.apis.google.com/chart?cht=tx&chl=M+g%28x%29+>．</p>

<p>受理・棄却の条件</p>

<ul>
<li>例2.7: <img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%26lt%3B+f%28Y%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2CM%5D%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=f+%5Csim+%5Cmathcal%7BBe%282.7%2C6.3%29%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g+%3A+1+>

<ul>
<li>ここでgは何らかの分布ではなく「gは1に等しい」としているので，上式の1つ目の式の中にgが含まれていない．この場合，gで生成される乱数は一様乱数．</li>
<li>一様分布のグラフを考えてみるとわかりやすい．区間[0,1]の間で常に値1を取る関数なので，上では1に等しいと表している．</li>
</ul>
</li>
<li>例2.8: <img src=http://chart.apis.google.com/chart?cht=tx&chl=Ug%28Y%29+%26lt%3B+f%28Y%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2CM%5D%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=f+%5Csim+%5Cmathcal%7BBe%282.7%2C6.3%29%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g+%5Csim+%5Cmathcal%7BBe%282%2C6%29%7D+></li>
</ul>


<p>例2.8における「提案分布」という言葉は，新しく設定した候補分布のこと．</p>

<p>```r</p>

<h1>例2.7</h1>

<p>Nsim &lt;- 2500
a &lt;- 2.7
b &lt;- 6.3
M &lt;- 2.67
u &lt;- runif(Nsim, max=M)
y &lt;- runif(Nsim)
x &lt;- y[u &lt; dbeta(y,a,b)]</p>

<p>y2 &lt;- rbeta(Nsim,2,6)
u2 &lt;- runif(Nsim, max=1.67) * dbeta(y2,2,6)
x2 &lt;- y2[u2 &lt; dbeta(y2,2.7,6.3)]</p>

<p>par(mfrow=c(1,2))
plot(y, u, xlim=c(0,1.0), ylim=c(0,2.8), cex=0.5, xlab="y", ylab="u.g(y)")
par(new=T)
plot(x, u[u &lt; dbeta(y,a,b)], col="red", xlim=c(0,1.0), ylim=c(0,2.8), cex=0.5, xlab="y", ylab="u.g(y)")
curve(dbeta(x,a,b), add=T, col="red", lwd=2)
abline(h=M, lwd=2, col="blue")</p>

<p>plot(y2, u2, xlim=c(0,1.0), ylim=c(0,5), cex=0.5, xlab="y", ylab="u.g(y)")
par(new=T)
plot(x2, u2[u2 &lt; dbeta(y2,2.7,6.3)], col="red", xlim=c(0,1.0), ylim=c(0,5), cex=0.5, xlab="y", ylab="u.g(y)")
curve(dbeta(x,2.7,6.3), add=T, col="red", lwd=2)
curve(dbeta(x,2,6)*1.67, add=T, col="blue", lwd=2)
```</p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_6.png )</p>

<h4>上の図の解釈</h4>

<p>乱数の値が赤の分布の線より中に入れば受理となる．候補として生成される乱数は青の分布の線の中でランダムに生成されるので，赤と青の線の間の部分が棄却された乱数になる．この赤と青の線の間の部分が少なければ少ないほど，この受理・棄却法の効率も良くなる．じゃあ効率を良くするにはどうすればいいかというと，いじることのできるポイントは2つ</p>

<ul>
<li>提案分布gを良い感じにする（青の線の形を決める）</li>
<li>定数Mを出来るだけ小さくする（青の線の高さを決める，fとgの間の幅を決める）</li>
</ul>


<p>この受理・棄却法の前提として<strong>目標分布（赤の線）から乱数は生成できない</strong>のだから，100％受理されるようなシミュレーションは理論上不可能．だから，乱数が生成できるような候補分布を使って，定数Mを定めて，間接的に乱数を発生させようということ．</p>

<br />


<h3>練習問題 2.7 目標分布fと候補密度gがともにベータ分布だった場合に，どのような制約があるのか</h3>

<h4><img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>が必要なことの証明</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29++%3D+%5Cfrac%7B%5CGamma%28%5Calpha%2B%5Cbeta%29%7D%7B%5CGamma%28%5Calpha%29%5CGamma%28%5Cbeta%29%7D+x%3Csup%3E%7B%5Calpha-1%7D%3C%2Fsup%3E+%281-x%29%3Csup%3E%7B%5Cbeta-1%7D%3C%2Fsup%3E+%5Csim+%5Cmathcal%7BBe%7D%28%5Calpha%2C%5Cbeta%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28x%29++%3D+%5Cfrac%7B%5CGamma%28a%2Bb%29%7D%7B%5CGamma%28a%29%5CGamma%28b%29%7D+x%3Csup%3E%7Ba-1%7D%3C%2Fsup%3E+%281-x%29%3Csup%3E%7Bb-1%7D%3C%2Fsup%3E+%5Csim+%5Cmathcal%7BBe%7D%28a%2Cb%29+>
より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D++%3D+%5Cfrac%7B%5CGamma%28%5Calpha%2B%5Cbeta%29%5CGamma%28a%29%5CGamma%28b%29%7D%7B%5CGamma%28a%2Bb%29%5CGamma%28%5Calpha%29%5CGamma%28%5Cbeta%29%7D+x%3Csup%3E%7B%5Calpha-a%7D%3C%2Fsup%3E+%281-x%29%3Csup%3E%7B%5Cbeta-b%7D%3C%2Fsup%3E+></p>

<p>となり，比<img src=http://chart.apis.google.com/chart?cht=tx&chl=f%2Fg+>が有界になる（どっかのxの値が<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cinf+>になったりしない）には，xや(1-x)のベキ数の部分が0以上でである必要がある．よって<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>が必要．</p>

<p>上の細かい証明は省略するが，要するにベータ分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBe%7D%28a%2Cb%29+>において，aとbが1未満の時には0と1の両端で値が跳ね上がる．以下の図は，「<a href="http://www.amazon.co.jp/gp/product/4621061224/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4621061224&linkCode=as2&tag=yagays-22">パターン認識と機械学習 上</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4621061224" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」のP.70を参考にベータ分布を作図したもの．これを見ると，aとbが1のときにちょうど一様分布のような形をとり，それより小さいと下に凸，それより大きいと上に凸のような分布の形になることがわかる．なので，ベータ分布が有界であるにはxや(1-x)のベキ数の部分がポイントになってくる．</p>

<p>```r</p>

<h1>練習問題 2.7 ベータ関数の分布を図示してみる</h1>

<p>par(mfrow=c(2,2))
curve(dbeta(x,0.1,0.1),col="red",lwd=2,ylim=c(0,3),main="Be(0.1,0.1)")
curve(dbeta(x,1,1),col="red",lwd=2,ylim=c(0,3),main="Be(1,1)")
curve(dbeta(x,2,3),col="red",lwd=2,ylim=c(0,3),main="Be(2,3)")
curve(dbeta(x,8,4),col="red",lwd=2,ylim=c(0,3),main="Be(8,4)")
```</p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_beta.png )</p>

<h4><img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Cleft%5Clfloor+%5Calpha+%5Cright%5Crfloor+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=b+%3D+%5Cleft%5Clfloor+%5Cbeta+%5Cright%5Crfloor+>の証明</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29%2Fg%28x%29+>を微分して最大値を取る時のxを求めると，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Cfrac%7B%5Calpha-a%7D%7B%5Calpha-a%2B%5Cbeta-b%7D+>となる．よって，上で証明した<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>を満たしつつ自然数aとbが最適な値を取るには，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Cleft%5Clfloor+%5Calpha+%5Cright%5Crfloor+%2C+b+%3D+%5Cleft%5Clfloor+%5Cbeta+%5Cright%5Crfloor+>となる．これもまあ厳密な証明はできなくても直感的に考えれば明らかだろう．</p>

<br />


<h3>練習問題 2.8 二重指数分布から正規乱数を生成する</h3>

<ul>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+></li>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28x%7C%5Calpha%29+%3D+%5Cfrac%7B%5Calpha%7D%7B2%7D%7D%5Cexp%28-%5Calpha+%7Cx%7C%29+></li>
</ul>


<h4>a. 定数Mの取りうる範囲と最小値を求める</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%7C%5Calpha%29%7D+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%3Csup%3E%7B-1%7D%5Cexp%28-%5Cfrac%7Bx%3Csup%3E2%7D%7B2%7D%3C%2Fsup%3E%3C%2Fsup%3E+%2B+%5Calpha%7Cx%7C%29+></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha+>のとき，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%3Csup%3E%7B-1%7D%5Cexp%28-%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D%3C%2Fsup%3E%3C%2Fsup%3E+%2B+%5Calpha%3Csup%3E2%29%3C%2Fsup%3E+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%3Csup%3E%7B-1%7De%3Csup%3E%7B%5Calpha%3Csup%3E2%2F2%7D%3C%2Fsup%3E%3C%2Fsup%3E%3C%2Fsup%3E+>となり，与式を満たす．</p>

<p>Mの最小値は，上式を微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28-%5Calpha%3Csup%3E2%2B1%29%5Cexp%28-%5Cfrac%7B%5Calpha%3Csup%3E2%7D%7B2%7D%29%3C%2Fsup%3E%3C%2Fsup%3E+>が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cpm+1+>となる．候補分布に課された制約(P.59)より，fとgどちらか一方だけ負になることは無いので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+1+>が正解．（二階微分すれば-1のとき最小値，1のとき最大値だとわかる）</p>

<h4>b. 受理確率を求める</h4>

<p>受理確率は1/Mで表される．最適なMの値は<img src=http://chart.apis.google.com/chart?cht=tx&chl=M+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7De%3Csup%3E%7B1%2F2%7D%3C%2Fsup%3E+>となるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=1%2FM+%3D+%5Csqrt%7B%5Cpi%2F2e%7D+%3D+1%2F0.76+%5Csimeq+1.3+>となる．</p>

<h4>c. 候補分布から乱数を生成するために逆変換をする</h4>

<p>受理・棄却法を使うには，当然候補分布から乱数が生成できなければいけない．今回は二重指数分布から乱数を生成して間接的に正規乱数を求めているので，二重指数分布から乱数を生成するために，2章前半で行った逆変換を行う．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=G%28x%29+%3D+%5Cint_%7B-%5Cinfty%7D%3Csup%3E%7Bx%7D%3C%2Fsup%3E+g%28y%7C%5Calpha%29+dy+%3D+%5Cbegin%7Bcases%7D+%5Cfrac%7B1%7D%7B2%7De%3Csup%3E%7B%5Calpha%3C%2Fsup%3E+x%7D+%26amp%3B+%28x+%26lt%3B+0%29+%5C+1+-+%5Cfrac%7B1%7D%7B2%7De%3Csup%3E%7B%5Calpha%3C%2Fsup%3E+x%7D+%26amp%3B+%28x+%3E+0%29+%5Cend%7Bcases%7D+></p>

<p>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Bcases%7D+x+%3D+%5Cfrac%7B1%7D%7B%5Calpha%7D%5Clog%282u%29+%26amp%3B+%28u+%26lt%3B+%5Cfrac%7B1%7D%7B2%7D%29+%5C+x+%3D+-%5Cfrac%7B1%7D%7B%5Calpha%7D%5Clog%282%281-u%29%29+%26amp%3B+%28%5Cfrac%7B1%7D%7B2%7D+%26lt%3B+u+%26lt%3B+1+%29%5Cend%7Bcases%7D+></p>

<p>となる．あとは<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>で生成される乱数を上式に当てはめて計算すればよい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 逆変換・一般変換法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/21/imcmr-2-1/"/>
    <updated>2012-10-21T06:26:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/21/imcmr-2-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ:<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：一様分布を元にして様々な確率分布に従う乱数を生成する</h3>

<p>統計解析ソフトであるRには，様々な分布に対応した組み込み関数が用意されている．本章では，そういった組み込み関数を使わずに，一様分布から生成される乱数を逆関数で変換することで，他の確率分布の乱数を表現する．</p>

<p>本書で扱う乱数とは，完全なランダム性を持つ乱数ではなく<strong>擬似乱数</strong>である．擬似乱数はset.seed()関数で設定した値を種として乱数を生成するため，どのような環境においてもset.seed()関数で同じ値を使うことで乱数を再現することができる．</p>

<p>今回は，一様乱数を元にして指数乱数を生成し，指数乱数からガンマ分布やベータ分布の乱数へと変換していく．これらの確率分布は全てRの関数で用意されているものなので，一様乱数から生成した乱数とRの関数から生成した乱数を比較することによって，乱数の生成がうまくいっているかどうかを判断する．以下のコードで描写したヒストグラムはすべて，左側が一様分布から生成した乱数，右側がRの関数を用いて生成した乱数(N=10<sup>4</sup> )．赤い曲線はどちらもRの関数を用いて分布を示したもの．</p>

<h3>例 2.1 一様乱数から指数乱数を作成する</h3>

<p>これはテキストにある通りのコードと作図．mcsmパッケージのdemo(Chapter.2)にも同様のコードがある．</p>

<p>以下のコードでは<img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5Clog%7B%281-u%29%7D+>をそのままコードに落とし込んでいる．テキストにもある通り，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>ならば0から1の間で一様に等しい確率分布なのだがら，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+>も<img src=http://chart.apis.google.com/chart?cht=tx&chl=1-U+>も一様分布になる．</p>

<p><code>r
par(mfrow=c(1,2))
Nsim &lt;- 10^4
U &lt;- runif(Nsim)
X &lt;- -log(1-U)
Y &lt;- rexp(Nsim)
par(mfrow=c(1,2))
hist(X, freq=F, main="Exp from Uniform", nclass=50)
curve(dexp(x), add=T, col="red", lwd=2)
hist(Y, freq=F, main="Exp from R", nclass=50)
curve(dexp(x), add=T, col="red", lwd=2)
</code></p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_1.png )</p>

<h3>練習問題 2.2 逆変換法を用いてロジスティック分布とコーシー分布の乱数を生成する</h3>

<p>逆変換法を用いてロジスティック分布とコーシー分布の乱数を生成する．変換で求まる関数はいわゆる逆累積分布関数というもの．</p>

<h4>a.ロジスティック分布</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=u+%3D+%5Cfrac%7B1%7D%7B1%2Be%3Csup%3E%7B-%5Cfrac%7Bx-%5Cmu%7D%7B%5Cbeta%7D%7D%7D%3C%2Fsup%3E+>を変形して，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+-%5Cbeta+%5Clog%7B%5Cfrac%7B1-u%7D%7Bu%7D%7D+%2B+%5Cmu+></p>

<p>以下のコードは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu%3D0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta%3D1+>の場合．</p>

<p><code>r
Nsim &lt;- 10^4
U &lt;- runif(Nsim)
par(mfrow=c(1,2))
X &lt;- -log((1-U)/U)
Y &lt;- rlogis(Nsim, 0, 1)
hist(X,freq=F,main="Logis from Uniform")
curve(dlogis(x), add=T, col="red", lwd=2)
hist(Y, freq=F, main="Logis from R")
curve(dlogis(x), add=T, col="red", lwd=2)
</code></p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_2.png )</p>

<h4>b.コーシー分布</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=u+%3D+%5Cfrac%7B1%7D%7B2%7D+%2B+%5Cfrac%7B1%7D%7B%5Cpi%7D+%5Carctan%7B%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D%7D+>を変形して，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Cmu+%2B+%5Csigma+%5Ctan%7B%5Cpi%28u-%5Cfrac%7B1%7D%7B2%7D%29%7D+></p>

<p>以下のコードは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu%3D0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Csigma%3D1+>の場合．</p>

<p>```r
Nsim <- 10^4
U <- runif(Nsim)
x <- tan(pi*(U-0.5))
Y <- rcauchy(Nsim)
hist(X, freq=F, main="Cauchy from Uniform", xlim=c(-10,10))
curve(dcauchy(x), add=T, col="red", lwd=2)
hist(Y[Y>=-10 &amp; Y&lt;=10], freq=F, main="Cauchy from R", xlim=c(-10,10))
curve(dcauchy(x), add=T, col="red", lwd=2)</p>

<h1>cauchyは値が両端に飛んでヒストグラムが綺麗に書けないので[-10,10]で整えている</h1>

<p>```</p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_3.png )</p>

<h3>練習問題 2.12 指数分布からガンマ分布とベータ分布の乱数を生成する</h3>

<h4>a.ガンマ乱数</h4>

<p>以下の作図では，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta+>の値を固定して<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+>の値を1,2,5,9と変化させたときの分布の変化を見ている．</p>

<p><code>r
Nsim &lt;- 10^4
beta &lt;- 2.0
par(mfrow=c(4,2))
for(a in c(1,2,5,9)){
  U &lt;- runif(a*Nsim)
  m &lt;- matrix(U, nrow=a)
  X &lt;- beta * apply(-log(m), 2, sum)
  Y &lt;- rgamma(Nsim, shape=a, scale=beta)
  hist(X, freq=F, main=paste("Gamma from Uniform:","a=",a," beta=",beta), nclass=50)
  curve(dgamma(x, shape=a, scale=beta), add=T, col="red", lwd=2)
  hist(Y, freq=F, main=paste("Gamma from Uniform:","a=",a," beta=",beta), nclass=50)
  curve(dgamma(x, shape=a, scale=beta), add=T, col="red", lwd=2)
}
</code></p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_4.png )</p>

<h4>a.ベータ乱数</h4>

<p>この手法では<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28a+%5Cin+%5Cmathbb%7BN%3Csup%3E%2A%7D%29%3C%2Fsup%3E+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathbb%7BN%3Csup%3E%2A%7D%3C%2Fsup%3E+%3D+1%2C2%2C+%5Cdots+> という制約があるため，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a%3D0.1+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=b%3D0.1+>のようなベータ分布は作ることが出来ない．以下はa=1,b=1，a=2,b=3，a=8,b=4の場合．</p>

<p>```r</p>

<h1>a=1,b=1の場合</h1>

<p>par(mfrow=c(3,2))
Nsim <- 10^4
a <- 1
b <- 1
U <- runif((a+b)*Nsim)
m <- matrix(U,nrow=(a+b))
X <- -log(m[a,]) / apply(-log(m),2,sum) # a>=2の場合はapply(-log(m[1:a,]),2,sum) / apply(-log(m),2,sum)
Y &lt;- rbeta(Nsim,a,b)
hist(X, freq=F, main=paste("Beta from Uniform:","a=",a,"b=",b), nclass=50, ylim=c(0,3))
curve(dbeta(x,a,b), add=T, col="red", lwd=2)
hist(Y, freq=F, main=paste("Beta from R:","a=",a,"b=",b), nclass=50, ylim=c(0,3))
curve(dbeta(x,a,b), add=T, col="red", lwd=2)
```</p>

<p>![](http://dl.dropbox.com/u/142306/b/imcmr/chp2_5.png )</p>

<h4>b. 一様分布から指数乱数を作る(逆変換)</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%3D+e%3Csup%3E%7B-%5Clambda%3C%2Fsup%3E+x%7D+>より <img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+-+%5Cfrac%7B%5Clog%7BU%7D%7D%7B%5Clambda%7D+></p>

<h4>c. 一様分布からロジスティック乱数を作る(逆変換)</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%3D+%5Cfrac%7Be%3Csup%3Ex%7D%7B1%2Be%3Csup%3Ex%7D%3C%2Fsup%3E%3C%2Fsup%3E+>より<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Clog%7B%5Cfrac%7BU%7D%7B1-U%7D%7D+></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：アーカイブ]]></title>
    <link href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/"/>
    <updated>2012-10-20T11:13:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>「Rによるモンテカルロ法入門」</h3>

<p>本書は，モンテカルロ法の実践的な解説書であり，統計解析ソフトのRを用いた豊富な実例と練習問題が組まれている．モンテカルロ法とは乱数を用いて数値計算を行う手法の総称であり，本書で扱う内容は乱数の発生からモンテカルロ積分，そしてマルコフ連鎖モンテカルロ法（MCMC）の各種アルゴリズムに至るまで非常に幅広い．たいていの解説には理論に実践演習が付随した形となっており，数学的な理論を軸にして実際にRを用いたコード例が示される．</p>

<h3>練習問題を解きつつ読書ノートをまとめてみる</h3>

<p><a href="http://yagays.github.com/blog/2012/10/14/review-glm-mcmc/">そんなこんな</a>で，<a href="http://www.amazon.co.jp/gp/product/400006973X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=400006973X&amp;linkCode=as2&amp;tag=yagays-22">久保本</a>と並行する形で「<a href="http://www.amazon.co.jp/gp/product/4621065270/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4621065270&linkCode=as2&tag=yagays-22">Rによるモンテカルロ法入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4621065270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」を読んでいる．一応MCMCの部分だけひと通り目を通したのだが，最終的にMCMCの実装までひと通りやるにしても一連の流れを簡単にでも追っておかなければと思って，最初の乱数の部分からじっくり読み進めている．これがなかなか難しくて，手も足も出ないところをなんとかRのコードを動かして理解を補っているわけなのだが……取り敢えず練習問題を解ける範囲で解きつつRのコードを書いていこうというこでとはセクションごとに小分けてして，じっくり読書ノートを付けて勉強することにしてみた．</p>

<p>以下に，読書ノートのリンクを書き加えていく</p>

<h3>読書ノートまとめ</h3>

<ul>
<li><a href="http://yagays.github.com/blog/2012/10/21/imcmr-2-1/">「Rによるモンテカルロ法入門」読書ノート：2章 逆変換・一般変換法</a>

<ul>
<li>例 2.1，練習問題 2.2，練習問題 2.12</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/22/imcmr-2-2/">「Rによるモンテカルロ法入門」読書ノート：2章 受理・棄却法</a>

<ul>
<li>例 2.7，例 2.8，練習問題 2.7，練習問題 2.8</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/23/imcmr-2-3/">「Rによるモンテカルロ法入門」読書ノート：2章 練習問題</a>

<ul>
<li>練習問題 2.18，練習問題 2.19，練習問題 2.22</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分</a>

<ul>
<li>例 3.3，例 3.4</li>
</ul>
</li>
</ul>


<h3>お決まりごと</h3>

<p>この読書ノート（上記リンク先を含む）は個人的なメモであって，解答およびコードの正確さや厳密さを保証するものではありません．間違いが多分に含まれている可能性があるので，参考にされる際には十分ご注意下さい．</p>

<h3>参考：サンプルコード</h3>

<p>CRANのmcsmパッケージに，本書の一部コードのスクリプトがデモとして入っている．</p>

<ul>
<li><a href="http://cran.r-project.org/web/packages/mcsm/index.html">http://cran.r-project.org/web/packages/mcsm/index.html</a></li>
</ul>


<p>```r</p>

<blockquote><p>install.packages("mcsm")
library(mcsm)
demo(Chapter.1) # Chapter.8まである
```</p></blockquote>

<h3>参考：基本的な確率分布の略称</h3>

<ul>
<li>一様分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BU%7D></li>
<li>指数分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D></li>
<li>カイ二乗分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7B%5Cchi%3Csup%3E2%7D></sup></li>
<li>ガンマ分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BG%7D></li>
<li>ベータ分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBe%7D></li>
<li>正規分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BN%7D></li>
<li>二項分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBin%7D></li>
<li>負の二項分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BNeg%7D></li>
<li>ポアソン分布(※): <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BP%7D></li>
<li>コーシー分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BC%7D></li>
<li>スチューデントのT分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BT%7D></li>
<li>二重指数分布（ラプラス分布）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D></li>
</ul>


<p>（※ <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BP%7D>は場合によって変わる）</p>

<h3>参考</h3>

<ul>
<li>(pdf) <a href="http://www.ceremade.dauphine.fr/~xian/shortManual.pdf">http://www.ceremade.dauphine.fr/~xian/shortManual.pdf</a></li>
</ul>


<p>公式ページには，番号が奇数の練習問題だけ解答がある．</p>

<ul>
<li>(pdf) <a href="http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf">http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf</a></li>
</ul>


<p>UseR!の発表スライドっぽい資料．</p>
]]></content>
  </entry>
  
</feed>
