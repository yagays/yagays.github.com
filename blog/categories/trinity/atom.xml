<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Trinity | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.io/blog/categories/trinity/atom.xml" rel="self"/>
  <link href="http://yagays.github.io/"/>
  <updated>2014-02-20T21:17:23+09:00</updated>
  <id>http://yagays.github.io/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["RNA-Seq unleashed"によるTrinityのワークフローの解説]]></title>
    <link href="http://yagays.github.io/blog/2013/06/26/rna-seq-unleashed-trinity/"/>
    <updated>2013-06-26T13:14:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/06/26/rna-seq-unleashed-trinity</id>
    <content type="html"><![CDATA[<p><a href="http://evomics.org/learning/genomics/trinity/">Trinity | Evolution and Genomics</a>経由で知ったのだが，Trinityのワークフローに関してより分かりやすい図が2011年のNature BiotechnologyのNews and Viewsに掲載されていたので，ここで少し紹介する．この図はTrinityのアセンブリアルゴリズムの一連のワークフローを表しており，アセンブリ結果の解釈も含めて解説されているのが大きな特徴だ．Trinityが対象にしているトランスクリプトームのアセンブリは，アイソフォームや選択的スプライシングなどの影響を受けて良く似た配列が多数出てくるため，一意に決まらない場合が多い．そういったケースに対応するために，Trinityではアセンブルのグラフを作成して考えられる候補を幾つか出力するのだけれども，実はこの結果の解釈が一番難しい．多数の類似配列が出力で得られた時にそれがどういう可能性から出てきたものなのかを考える上で，この図の一番下の解説はとても参考になる．実際はこんなに上手くいかないだろうとは思うものの，個別のアイソフォームとして配列をクラスタリングしたり，そもそもTrinityが何を考慮してアセンブルしているかを確認する際には役立つだろう．</p>

<blockquote><p>Iyer, M. K. &amp; Chinnaiyan, A. M. RNA-Seq unleashed. <em>Nat. Biotechnol.</em> <strong>29</strong>, 599–600 (2011).</p>

<p><a href="http://www.nature.com/nbt/journal/v29/n7/full/nbt.1915.html">http://www.nature.com/nbt/journal/v29/n7/full/nbt.1915.html</a></p></blockquote>

<p><a href="http://www.nature.com/nbt/journal/v29/n7/full/nbt.1915.html" target="_blank"><img src="http://dl.dropboxusercontent.com/u/142306/b/rna-seq_unleashed.gif" alt="CCC License Number: 3172280756988"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trinityのインストールとサンプルデータのアセンブル]]></title>
    <link href="http://yagays.github.io/blog/2013/05/14/trinity-install/"/>
    <updated>2013-05-14T21:25:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/05/14/trinity-install</id>
    <content type="html"><![CDATA[<p>久しぶりに<a href="http://trinityrnaseq.sourceforge.net/">Trinity</a>を触ろうと思ってインストールしたら，実行に<a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie</a>が必要になっていた．de novo transcriptome assemblyの後の解析で使う程度かと思いきや，どうやらChrysalis（2段階目）で必要になるらしい．そのため，Bowtieにパスを通していないとTrinity.pl実行時に以下のようなエラーが出る．</p>

<p><code>
Error, cannot find path to bowtie, which is now needed as part of Chrysalis' read scaffolding step at ../../Trinity.pl line 622.
</code></p>

<p>というわけで，TrinityのインストールをしつつBowtieも用意して，試しにソースコードに含まれているテストデータの実行をしてみる．</p>

<h3>1. Trinityのインストール</h3>

<p>SourceForgeからソースコードをダウンロードしてインストールする．解凍したディレクトリでmakeをすればよい．</p>

<p><a href="http://sourceforge.net/projects/trinityrnaseq/files/">Trinity RNA-Seq Assembly - Browse Files at SourceForge.net</a></p>

<p><code>
$ wget http://downloads.sourceforge.net/project/trinityrnaseq/trinityrnaseq_r2013-02-25.tgz
$ tar zxvf trinityrnaseq_r2013-02-25.tgz
$ cd trinityrnaseq_r2013-02-25
$ make
</code></p>

<h3>2. Bowtieのインストール</h3>

<p>こちらも同様にSourceForgeからダウンロードするが，コンパイル済みのバイナリが配布されているので，makeをせずにそのまま利用できる．OSごとに32bit版と64bit版が用意されているので，環境に合わせてダウンロードする．</p>

<p><a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie: An ultrafast, memory-efficient short read aligner</a></p>

<p><a href="http://sourceforge.net/projects/bowtie-bio/files/bowtie/1.0.0/">Bowtie - Browse /bowtie/1.0.0 at SourceForge.net</a></p>

<h3>3. Bowtieのバイナリがあるディレクトリにパスを通す</h3>

<p>今回はとりあえずシェルの設定ファイルをいじらずに，コマンドでbowtieがあるディレクトリをパスに指定する．</p>

<p><code>
$ export PATH=/Users/yag_ays/Downloads/bowtie-1.0.0:$PATH
</code></p>

<p>もし頻繁に使用するなら，bowtieのバイナリをパスが通っている場所に移動させたほうがいいだろう．</p>

<h3>サンプルデータのアセンブル</h3>

<p>ひと通り動くことを確認するために，ソースコードの中に含まれているサンプルデータの解析を動かしてみる．</p>

<p>今回実行するのはsample_data/test_Trinity_Assembly．ディレクトリ内にrunMe.shがあるので，単純にそれを実行すればよい．初回は配列ファイルの解凍が実行されるため，Trinityが実行されるまでに少し時間がかかる．</p>

<p><code>
$ cd sample_data/test_Trinity_Assembly
$ ./runMe.sh
</code></p>

<p>もしきちんとパスを通せていれば，標準出力に以下のようなテキストが表示され，解析が始まる．</p>

<p>```
$ ../../Trinity.pl --seqType fq --JM 2G --left reads.left.fq --right reads.right.fq --SS_lib_type RF --CPU 4 --no_cleanup --monitoring --output test
WARNING, --monitoring can only be used on linux. Turning it off.</p>

<p>Current settings:
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
file size               (blocks, -f) unlimited
max locked memory       (kbytes, -l) unlimited
max memory size         (kbytes, -m) unlimited
open files                      (-n) 256
pipe size            (512 bytes, -p) 1
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 709
virtual memory          (kbytes, -v) unlimited</p>

<p>Paired mode requires bowtie. Found bowtie at: /Users/yag_ays/Downloads/bowtie-1.0.0/bowtie</p>

<p>...
```</p>
]]></content>
  </entry>
  
</feed>
