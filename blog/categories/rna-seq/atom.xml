<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RNA-Seq | Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.io/blog/categories/rna-seq/atom.xml" rel="self"/>
  <link href="http://yagays.github.io/"/>
  <updated>2013-10-31T06:38:52+09:00</updated>
  <id>http://yagays.github.io/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RNA-Seqの数理―生成モデルによる発現量推定（3）ペアエンドリードとフラグメント長の分布関数]]></title>
    <link href="http://yagays.github.io/blog/2013/07/22/mathematical-models-for-transcriptome-quantification-3/"/>
    <updated>2013-07-22T09:59:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/07/22/mathematical-models-for-transcriptome-quantification-3</id>
    <content type="html"><![CDATA[<ul>
<li>まとめ：<a href="http://yagays.github.io/blog/2013/07/14/mathematical-models-for-transcriptome-quantification-0/">RNA-Seqの数理―生成モデルによる発現量推定：アーカイブ - Wolfeyes Bioinformatics beta</a></li>
</ul>


<p>前回はCount Based Modelの基礎やRPKMとの関連を解説したが，これらはすべてシングルエンドを前提とした発現量推定の方法だった．そこで今回は，現在主流となっているペアエンドに対応できるようモデルの一部を拡張し，その際に必要になるフラグメント長の分布を考慮した有効配列長の考え方について紹介する．</p>

<h3>ペアエンドリード</h3>

<p>ペアエンドによるシーケンスは，illuminaなどで現在もっとも広く使われているNGSの手法だ．ペアエンドのショートリードは，ゲノムやmRNAを特定の長さのフラグメントに細かく分割したあと，その両端にアダプターを付けて左右同時にシーケンスすることによって得られる．この方法によって，単純にシーケンスのデータ量が2倍になるだけでなく，ある程度離れた距離の2つの配列の関係性も同時に得られる．つまり，元々ひとつの同じフラグメントからシーケンスされたのだから，そのフラグメントの長さの範囲内で2つのショートリードは必ず存在していたはずだという情報である．これらは発現量推定において転写物のアイソフォームを確認するために用いられるほか，主にゲノムアセンブリやトランスクリプトームアセンブリにおいて，コンティグと呼ばれるアセンブルされた断片をつなぎ合わせるスキャフォールディングにおいて有効な実験手法になっている．</p>

<h3>RPKMからFPKMへ</h3>

<p>シングルエンドではRPKMとして計算していた発現量の指標をペアエンドに拡張するのはとても簡単で，2本のマッピングされたショートリードのペアを1本のフラグメントの本数として見なし，転写物ごとにその本数数えるだけで良い．これをFPKM（Fragments per kilobase of exon per million mapped sequence reads）という．RPKMのReadsの部分をFragments，すなわちペアエンドの2つのショートリードに置き換えただけで，全体のデータ量と転写物の配列長で正規化する部分は変わっていない．ただし，マッピングする配列が実質2本になったということで，両方ともマッピングされるという以外にも，片方だけマッピングされたといった特殊な場合が出てくる．このような特殊なケースはマッピングするソフトウェアの設定やFPKMの計算方法に依存するものの，基本的には2本の配列がフラグメント長の間を置いてマッピングされるかどうかによってFPKMの値を求める．</p>

<h3>Count Based Modelにおける変更点</h3>

<p>ではCount Based Modelにペアエンドのショートリードを対応させよう．RPKMからFPKMに拡張したときと同様に発現量の導出部分に手を加える必要はないのだが，一つだけペアエンドを考慮する必要のある変数がある．それが転写物の有効配列長![\tilde{l_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+)だ．</p>

<p>転写物の有効配列長Effective length of a transcriptsは，ある転写物![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)から長さ![m ](http://chart.apis.google.com/chart?cht=tx&chl=m+)のショートリードが得られるときの開始点の場合の数であり，シングルエンドの場合は![\tilde{l_t} = l_t - m + 1 ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+%3D+l_t+-+m+%2B+1+)で表される．これはショートリードに長さがあるぶんだけフラグメントが生じる開始点として考慮できる長さは短くなるということだ．</p>

<p>では，今回のペアエンドリードの場合はどう考えればいいだろうか．基本的にはシングルエンドの場合と同様に，長さぶんだけ差し引いた値が有効配列長となる．長さといっても，ペアエンドは元々一つのフラグメントからシーケンスされたショートリードなので，フラグメントの長さを用いる．</p>

<p>しかしここで一つ問題点が出てくる．それは，フラグメントの長さが実は一定ではないということだ．mRNAなどを断片化してある長さのフラグメントに選定する作業は実験的に行なわれるため，どうしてもフラグメントの長さに幅ができてしまう．そのため，ショートリードによって，ペアエンドの間の距離が短いものや長いものが出てくる．この現象は実際にゲノムにペアエンドリードを貼り付けて間の距離を測れば確認することができる．以下の図は，Cufflinksの論文中で実際に求められたフラグメント長の分布を表している（Supplementary Figure 1.）．この場合では，200bpを中心にしてフラグメント長にばらつきがあり，おおよそ正規分布の形をしていることがわかる．山の左側が途中で切断されているのは，ショートリードの長さが75bpのためである．</p>

<p><a href="http://www.nature.com/nbt/journal/v28/n5/full/nbt.1621.html" target="_blank"><img src="http://dl.dropboxusercontent.com/u/142306/b/generative-models_4.png" alt="CCC License Number:3192890152232"></a></p>

<p>この図からわかるように，フラグメント長はショートリードによってばらつきがあるため，有効配列長を求める際に一意に値を決めることができない．</p>

<h3>フラグメント長の分布関数を使って有効配列長を求める</h3>

<p>この問題を解消するための手段として，フラグメント長の分布関数を使うという方法がある．</p>

<p>転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)の長さを![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)とする．ショートリードのフラグメントの長さを![i ](http://chart.apis.google.com/chart?cht=tx&chl=i+)としたときのフラグメント長の分布関数を![F(i) ](http://chart.apis.google.com/chart?cht=tx&chl=F%28i%29+)とし，![\sum_{i=1}<sup>{\infty}F(i)=1</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Csum_%7Bi%3D1%7D%3Csup%3E%7B%5Cinfty%7DF%28i%29%3D1%3C%2Fsup%3E+)となるように確率分布に近似する．このときの転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)の有効配列長![\tilde{l_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+)は，以下のように表される．</p>

<p>![\tilde{l_t} = \sum_{i=1}<sup>{l_t}F(i)(l_t-i+1)</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+%3D+%5Csum_%7Bi%3D1%7D%3Csup%3E%7Bl_t%7DF%28i%29%28l_t-i%2B1%29%3C%2Fsup%3E+)</p>

<p>この式の解釈としては，![(l_t-i+1) ](http://chart.apis.google.com/chart?cht=tx&chl=%28l_t-i%2B1%29+)の部分はシングルエンドの有効配列長の求め方と同じ方法で，ショートリードの長さがフラグメントの長さに変わっただけである．そこに![F(i) ](http://chart.apis.google.com/chart?cht=tx&chl=F%28i%29+)という分布関数を掛けあわせ，長さ![1 ](http://chart.apis.google.com/chart?cht=tx&chl=1+)から転写物の長さ![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)まで足しあわせた値が，ペアエンドの有効配列長となる．つまり，分布の重み付きの配列長として表現しているということだ．</p>

<p>この考え方を模式的に表した図を，以下に示した．ここでは青色の直線で表した転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)に黒色の直線で表したショートリードをマッピングしている．太い部分が実際にシーケンスされたショートリード，細い部分がシーケンスされていないフラグメントの部分で，全体で一つのフラグメントを表している．フラグメント長![i ](http://chart.apis.google.com/chart?cht=tx&chl=i+)を長さ![1 ](http://chart.apis.google.com/chart?cht=tx&chl=1+)から![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)までずらしたときのそれぞれの分布は，右に示したような正規分布のような形をとり，これを![F(i) ](http://chart.apis.google.com/chart?cht=tx&chl=F%28i%29+)としている（実際は離散的）．そして，それぞれのフラグメント長![i ](http://chart.apis.google.com/chart?cht=tx&chl=i+)における有効配列長![(l_t-i+1) ](http://chart.apis.google.com/chart?cht=tx&chl=%28l_t-i%2B1%29+)に分布関数![F(i) ](http://chart.apis.google.com/chart?cht=tx&chl=F%28i%29+)を掛けあわせたものを全て足し合わせることにより，長さ![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)の転写物における有効配列長![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)を求めることができる．</p>

<p><img src="http://dl.dropboxusercontent.com/u/142306/b/generative-models_5.png" alt="" /></p>

<h3>Cufflinksとの関連</h3>

<p>さて，今回示した数式![\tilde{l_t} = \sum_{i=1}<sup>{l_t}F(i)(l_t-i+1)</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+%3D+%5Csum_%7Bi%3D1%7D%3Csup%3E%7Bl_t%7DF%28i%29%28l_t-i%2B1%29%3C%2Fsup%3E+)は，<a href="http://www.nature.com/nbt/journal/v28/n5/full/nbt.1621.html">Cufflinksの論文</a>のOnline Methodsに出てくる数式だ．ただしそちらの方では![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)が![l(t) ](http://chart.apis.google.com/chart?cht=tx&chl=l%28t%29+)となっているが，表記を<a href="http://yagays.github.io/blog/2013/07/16/mathematical-models-for-transcriptome-quantification-2/">前回の記事</a>と統一しているだけで表していることは変わりない．</p>

<p>また，Cufflinksのソフトウェアの実行においても，このフラグメント長の分布の種類やパラメータを具体的に指定することができる．</p>

<p><a href="http://cufflinks.cbcb.umd.edu/manual.html">Cufflinks RNA-Seq analysis tools - User's Manual</a></p>

<p>例えば，--frag-len-meanはフラグメント長の分布の平均，--frag-len-std-devではフラグメント長の分布の標準偏差を指定することができる．ただし，現在のバージョンでは，</p>

<blockquote><p>Note: Cufflinks now learns the fragment length mean for each SAM file, so using this option is no longer recommended with paired-end reads.</p>

<p><a href="http://cufflinks.cbcb.umd.edu/manual.html">http://cufflinks.cbcb.umd.edu/manual.html</a></p></blockquote>

<p>のように自動的に推定されるようになっており，ユーザが特に意識することなく実行できるようになっている．</p>

<h3>まとめ</h3>

<p>このように，ペアエンドにおいてはフラグメント長の分布を考慮することによって，有効配列長をより正確に記述した．今回のペアエンドリードの導入ではモデル自体は変更しなかったものの，きちんと実験環境やシーケンスの癖を数式としてモデルに反映することができている．</p>

<h3>参考</h3>

<ul>
<li><a href="http://www.nature.com/nbt/journal/v28/n5/full/nbt.1621.html">Transcript assembly and quantification by RNA-Seq reveals unannotated transcripts and isoform switching during cell differentiation : Nature Biotechnology : Nature Publishing Group</a></li>
<li><a href="http://www.stat115.org/lectures/stat115_rnaseq.pdf">http://www.stat115.org/lectures/stat115_rnaseq.pdf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNA-Seqの数理―生成モデルによる発現量推定（2）Count Based ModelとRPKM]]></title>
    <link href="http://yagays.github.io/blog/2013/07/16/mathematical-models-for-transcriptome-quantification-2/"/>
    <updated>2013-07-16T00:00:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/07/16/mathematical-models-for-transcriptome-quantification-2</id>
    <content type="html"><![CDATA[<ul>
<li>まとめ：<a href="http://yagays.github.io/blog/2013/07/14/mathematical-models-for-transcriptome-quantification-0/">RNA-Seqの数理―生成モデルによる発現量推定：アーカイブ - Wolfeyes Bioinformatics beta</a></li>
</ul>


<h3>Count Based Model</h3>

<p>今回はCount Based Modelと呼ばれる最も基本的な生成モデルを作って発現量推定を定式化し，それがRPKMの計算式と同じ意味を持つことを示してみよう．なお，以降の内容はPachter 2011をベースにしている．</p>

<blockquote><p>Models for transcript quantification from RNA-Seq. q-bio.GN, (2011).</p>

<p><a href="http://arxiv.org/abs/1104.3889v2">http://arxiv.org/abs/1104.3889v2</a></p></blockquote>

<h3>Count Based Modelにおける仮定</h3>

<p>Count based Modelは非常にシンプルな生成モデルだ．単純化のために3つの前提条件を置いて，RNA-Seqをモデル化している．</p>

<ul>
<li>NGSのシーケンスはシングルエンド</li>
<li>ショートリードはただ1箇所だけにマッピングされる</li>
<li>すべての転写物はただ1つのアイソフォームを持つ</li>
</ul>


<p>NGSのシーケンスに関しても，トランスクリプトームに関しても，かなり限定して考えていることがわかる．遺伝子の構造が単純な生物において初期のNGS解析をしていると思えばいいだろう．現実的にはこのような状態というのはあり得ないが，転写物からショートリードが生成されるという核の部分は残しつつ単純化をしている．</p>

<h3>Count Based Modelの生成過程</h3>

<p>生成モデルというものは，まず初めに観測データであるショートリードの生成過程を立てる．今回のCount Based Modelでは</p>

<blockquote><p><strong>トランスクリプトーム全体からある転写物が選ばれ，ある開始点からショートリードがシーケンスされた</strong></p></blockquote>

<p>と考える．<a href="http://yagays.github.io/blog/2013/07/15/mathematical-models-for-transcriptome-quantification-1/">前回の記事で概要を示した</a>ように，RNA-Seqの実験プロトコルは幾つかの複雑な段階を踏んでショートリードをシーケンスしていた．その多くの段階は偶然の連続によって，たまたま転写物がフラグメントとしてある部分から断片化され，たまたまシーケンスされてショートリードとして出力されたとみなすことができる．これらを確率的な事象として扱うことによって，確率的な視点からシーケンスデータが生じた背景にあるRNA-Seqの発現量というものを推定することができる．</p>

<br/>


<p>さて，長ったらしい文章の前置きはここまでにして，次からは実際に生成過程を数式に落としこんでいく．まず最初にこれまで言葉で説明してきたものを変数や集合として定義をし，事象の起こりやすさを尤度として表現する．概念と数式の対応関係が少し分かりにくいかもしれないが，もし要領が掴めないようならこの後に書いてある具体例の図も参照しつつ，どの変数が何を表しているかを丁寧に追ってほしい．</p>

<h3>尤度の定式化</h3>

<p>転写物の集合![T ](http://chart.apis.google.com/chart?cht=tx&chl=T+)に含まれる転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)は，![\tilde{l_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+)の有効配列長を持ち，![\sum_{t\in T} \rho_t = 1 ](http://chart.apis.google.com/chart?cht=tx&chl=%5Csum_%7Bt%5Cin+T%7D+%5Crho_t+%3D+1+)となるような![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)という相対的な発現量を持つ．RNA-Seqによって得られたショートリードを![f ](http://chart.apis.google.com/chart?cht=tx&chl=f+)，その全体を![F ](http://chart.apis.google.com/chart?cht=tx&chl=F+)とし，転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)にマッピングされたショートリードの集合を![F_t ](http://chart.apis.google.com/chart?cht=tx&chl=F_t+)とする．</p>

<p>このとき，ショートリード![f ](http://chart.apis.google.com/chart?cht=tx&chl=f+)が転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)から生じる確率は，以下の式で表すことができる．</p>

<p>![p(f\in t)= \frac{\rho_t \tilde{l_t}}{\sum_{r\in T}\rho_r \tilde{l_t}} ](http://chart.apis.google.com/chart?cht=tx&chl=p%28f%5Cin+t%29%3D+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_t%7D%7D+)</p>

<p>次に，選ばれた転写物のどの位置からショートリードがシーケンスされるかはランダムに選ばれるため，この確率![p(f\in t) ](http://chart.apis.google.com/chart?cht=tx&chl=p%28f%5Cin+t%29+)に有効配列長の逆数![\frac{1}{\tilde{l_t}} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+)を掛けあわせた値が，ショートリード![f ](http://chart.apis.google.com/chart?cht=tx&chl=f+)が転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)のある開始点から生成される確率となる．</p>

<p>このとき，観測されたショートリード全体![F ](http://chart.apis.google.com/chart?cht=tx&chl=F+)の尤度は，![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)の関数として以下のように表される．</p>

<p>![\mathcal{L}(\rho)= \prod<em>{t\in T}\prod</em>{f\in F_t} \bigg( \frac{\rho_t \tilde{l_t}}{\sum_{r\in T}\rho_r \tilde{l_r}}\cdot\frac{1}{\tilde{l_t}} \bigg) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29%3D+%5Cprod%3Cem%3E%7Bt%5Cin+T%7D%5Cprod%3C%2Fem%3E%7Bf%5Cin+F_t%7D+%5Cbigg%28+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_r%7D%7D%5Ccdot%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Cbigg%29+)</p>

<p>そして，転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)にマッピングされたショートリードの本数![X_t ](http://chart.apis.google.com/chart?cht=tx&chl=X_t+)を使って，以下のように書き換えられる．</p>

<p>![\mathcal{L}(\rho)= \prod<em>{t\in T} \bigg( \frac{\rho_t \tilde{l_t}}{\sum</em>{r\in T}\rho_r \tilde{l_r}}\cdot\frac{1}{\tilde{l_t}} \bigg)<sup>{X_t}</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29%3D+%5Cprod%3Cem%3E%7Bt%5Cin+T%7D+%5Cbigg%28+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum%3C%2Fem%3E%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_r%7D%7D%5Ccdot%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Cbigg%29%3Csup%3E%7BX_t%7D%3C%2Fsup%3E+)</p>

<p>これがCount Based Modelにおける尤度である．</p>

<h3>具体例を用いて尤度を導出する</h3>

<h4>確率の考え方</h4>

<p>といっても，これだけでは何のことか分からないので，具体例を使って詳しく解説していこう．単純化のために，以下の図のような3つの転写物![t_1, t_2, t_3 ](http://chart.apis.google.com/chart?cht=tx&chl=t_1%2C+t_2%2C+t_3+)と6本のショートリード![f_1,f_2\dots,f_6 ](http://chart.apis.google.com/chart?cht=tx&chl=f_1%2Cf_2%5Cdots%2Cf_6+)が次のようにマッピングされたという状態を想定する．</p>

<p><img src="http://dl.dropboxusercontent.com/u/142306/b/generative-models_1.png" alt="" /></p>

<p>3つの転写物にはそれぞれ発現量を持っている．例えば，![t_1 ](http://chart.apis.google.com/chart?cht=tx&chl=t_1+)は20，![t_2 ](http://chart.apis.google.com/chart?cht=tx&chl=t_2+)は5，![t_3 ](http://chart.apis.google.com/chart?cht=tx&chl=t_3+)は15という具合だ．今回は発現量を確率値として考えるため，![\frac{20}{40},\frac{5}{40},\frac{15}{40} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B20%7D%7B40%7D%2C%5Cfrac%7B5%7D%7B40%7D%2C%5Cfrac%7B15%7D%7B40%7D+)のように相対値として表す．これが![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)であり，総和が1になる理由だ．この![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)が今回の生成モデルで最終的に求めたい値である．</p>

<p>さて，ショートリード![f_1 ](http://chart.apis.google.com/chart?cht=tx&chl=f_1+)が転写物![t_1 ](http://chart.apis.google.com/chart?cht=tx&chl=t_1+)から生成される確率は，先ほどの定式化で![p(f\in t)= \frac{\rho_t \tilde{l_t}}{\sum_{r\in T}\rho_r \tilde{l_t}} ](http://chart.apis.google.com/chart?cht=tx&chl=p%28f%5Cin+t%29%3D+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_t%7D%7D+)としていた．これはある転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)の長さと相対的な発現量を掛けあわせたものと，その全体との比率を求めており，ただの発現量の比率だけでなく転写物の長さも関係しているということを表している．ランダムに一つ選んでシーケンスするということを考えれば，多く転写されていてなおかつ長い転写物のほうが選ばれやすいのは明らかだろう．この式は，そういった意味を数式として厳密に表現しているだけなのだ．</p>

<p>次に，転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)が選ばれた後に，今度はその転写物のどの位置の配列が読まれたかということを考える．これは端っこの方の配列が読まれたのか真ん中の方の配列が読まれたのかといった情報だ．このときに出てくるのが有効配列長Effective lengthと呼ばれる値で，ショートリードの長さを![m ](http://chart.apis.google.com/chart?cht=tx&chl=m+)としたときの![\tilde{l_t}=l_t - m + 1 ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D%3Dl_t+-+m+%2B+1+)で表される．これは単純に長さ![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)から長さ![m ](http://chart.apis.google.com/chart?cht=tx&chl=m+)の配列を取ってくる時の場合の数である．今回のモデルでは，シーケンスされる場所は場所に依存せず一様なランダムで決まるとしているので，有効配列長で割り算をしている．</p>

<p>そして，これをすべてのショートリードである![f_1 ](http://chart.apis.google.com/chart?cht=tx&chl=f_1+)から![f_6 ](http://chart.apis.google.com/chart?cht=tx&chl=f_6+)まですべて掛けあわせることで，今回得られたショートリードが生成される確率というものを求めることができる．</p>

<p>![\mathcal{L}(\rho)=\frac{p(f_1\in t_1)}{\tilde{l_1}}\times\frac{p(f_2\in t_1)}{\tilde{l_1}}\times\frac{p(f_3\in t_1)}{\tilde{l_1}} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29%3D%5Cfrac%7Bp%28f_1%5Cin+t_1%29%7D%7B%5Ctilde%7Bl_1%7D%7D%5Ctimes%5Cfrac%7Bp%28f_2%5Cin+t_1%29%7D%7B%5Ctilde%7Bl_1%7D%7D%5Ctimes%5Cfrac%7Bp%28f_3%5Cin+t_1%29%7D%7B%5Ctilde%7Bl_1%7D%7D+)![\times\frac{p(f_4\in t_2)}{\tilde{l_2}}\times\frac{p(f_5\in t_2)}{\tilde{l_2}}\times\frac{p(f_6\in t_3)}{\tilde{l_3}} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctimes%5Cfrac%7Bp%28f_4%5Cin+t_2%29%7D%7B%5Ctilde%7Bl_2%7D%7D%5Ctimes%5Cfrac%7Bp%28f_5%5Cin+t_2%29%7D%7B%5Ctilde%7Bl_2%7D%7D%5Ctimes%5Cfrac%7Bp%28f_6%5Cin+t_3%29%7D%7B%5Ctilde%7Bl_3%7D%7D+)</p>

<p>この確率![\mathcal{L}(\rho) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29+)が尤度と呼ばれる．尤度とは「もっともらしさ」という意味だ．上で仮定したような![f_1,f_2\dots,f_6 ](http://chart.apis.google.com/chart?cht=tx&chl=f_1%2Cf_2%5Cdots%2Cf_6+)のショートリードのデータが実際に手元に得られたのだから，それが起こる確率が高かったに違いない，ということを尤度では考えている．</p>

<h4>尤度式の展開</h4>

<p>では次に，この式をもう少し綺麗にしていこう．まずは2行目で転写物ごとに式をまとめ，3行目ですべての転写物を一つの式で表している．そして最後に![p(f\in t) ](http://chart.apis.google.com/chart?cht=tx&chl=p%28f%5Cin+t%29+)を置き換えると，先ほどの![\mathcal{L}(\rho)= \prod<em>{t\in T}\prod</em>{f\in F_t} \bigg( \frac{\rho_t \tilde{l_t}}{\sum_{r\in T}\rho_r \tilde{l_r}}\cdot\frac{1}{\tilde{l_t}} \bigg) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29%3D+%5Cprod%3Cem%3E%7Bt%5Cin+T%7D%5Cprod%3C%2Fem%3E%7Bf%5Cin+F_t%7D+%5Cbigg%28+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_r%7D%7D%5Ccdot%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Cbigg%29+)まで導出することができる．</p>

<p><img src="http://dl.dropboxusercontent.com/u/142306/b/generative-models_2.png" alt="" /></p>

<p>そして最後のまとめとして，転写物ごとにマッピングされたショートリードの生成確率というのは同じであることを利用して，![X_t ](http://chart.apis.google.com/chart?cht=tx&chl=X_t+)でまとめる．
つまり，ショートリードの配列は生成確率に依存せず![p(f_1\in t_1) =  p(f_2\in t_1) =  p(f_3\in t_1)](http://chart.apis.google.com/chart?cht=tx&chl=p%28f_1%5Cin+t_1%29+%3D++p%28f_2%5Cin+t_1%29+%3D++p%28f_3%5Cin+t_1%29)なので，![p(f_1\in t_1) \times p(f_2\in t_1) \times p(f_3\in t_1) = (p(f\in t_1))<sup>{X_1}</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=p%28f_1%5Cin+t_1%29+%5Ctimes+p%28f_2%5Cin+t_1%29+%5Ctimes+p%28f_3%5Cin+t_1%29+%3D+%28p%28f%5Cin+t_1%29%29%3Csup%3E%7BX_1%7D%3C%2Fsup%3E+)と変形している．こうすることにより，![\mathcal{L}(\rho)= \prod<em>{t\in T} \bigg( \frac{\rho_t \tilde{l_t}}{\sum</em>{r\in T}\rho_r \tilde{l_r}}\cdot\frac{1}{\tilde{l_t}} \bigg)<sup>{X_t}</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Crho%29%3D+%5Cprod%3Cem%3E%7Bt%5Cin+T%7D+%5Cbigg%28+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum%3C%2Fem%3E%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_r%7D%7D%5Ccdot%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Cbigg%29%3Csup%3E%7BX_t%7D%3C%2Fsup%3E+)となる．</p>

<h3>尤度を最大にするパラメータを解析的に求める</h3>

<p>では，数式として表された尤度を最大化する値を求めよう．まずは上の式を少し整理するところから始める．![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)という新たな変数を用意して![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)を![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)に置き換える．</p>

<p>![\alpha_t = p(f\in t)= \frac{\rho_t \tilde{l_t}}{\sum_{r\in T}\rho_r \tilde{l_t}} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+%3D+p%28f%5Cin+t%29%3D+%5Cfrac%7B%5Crho_t+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D%5Crho_r+%5Ctilde%7Bl_t%7D%7D+)</p>

<p>この![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)を用いて，先ほどの尤度式を書き換えると</p>

<p>![\mathcal{L}(\alpha_t)=\prod<em>{t\in T}\bigg( \frac{\alpha_t}{\tilde{l_t}}\bigg)<sup>{X_t}</sup> \propto \prod</em>{t\in T} {\alpha_t}<sup>{X_t}</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D%28%5Calpha_t%29%3D%5Cprod%3Cem%3E%7Bt%5Cin+T%7D%5Cbigg%28+%5Cfrac%7B%5Calpha_t%7D%7B%5Ctilde%7Bl_t%7D%7D%5Cbigg%29%3Csup%3E%7BX_t%7D%3C%2Fsup%3E+%5Cpropto+%5Cprod%3C%2Fem%3E%7Bt%5Cin+T%7D+%7B%5Calpha_t%7D%3Csup%3E%7BX_t%7D%3C%2Fsup%3E+)</p>

<p>となる．ここで，尤度![\mathcal{L} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D+)の変数が![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)になっていることに注意．最尤推定の目的としては尤度![\mathcal{L} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D+)を最大化する![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)を求めたいだけなので，関係ない![\tilde{l_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Ctilde%7Bl_t%7D+)は消している．</p>

<p>そして，この尤度を最大にする![\alpha_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha_t+)をラグランジュの未定乗数法を用いて求めると，![\hat{\alpha_t} = \frac{X_t}{N} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Calpha_t%7D+%3D+%5Cfrac%7BX_t%7D%7BN%7D+)となる．以下の図は，ラグランジュの未定乗数法の導出部分の詳細．</p>

<p><img src="http://dl.dropboxusercontent.com/u/142306/b/generative-models_3.png" alt="" /></p>

<p>このときの![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)は![\rho_t = \frac{\alpha_t / \tilde{l_t}}{\sum_{r\in T} \alpha_t / \tilde{l_t}} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+%3D+%5Cfrac%7B%5Calpha_t+%2F+%5Ctilde%7Bl_t%7D%7D%7B%5Csum_%7Br%5Cin+T%7D+%5Calpha_t+%2F+%5Ctilde%7Bl_t%7D%7D+)で表されるので，先ほど求めた![\hat{\alpha_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Calpha_t%7D+)を代入して，</p>

<p>![\hat{\rho_t} = \frac{X_t}{N} \cdot \frac{1}{\tilde{l_t}} \cdot \bigg( \frac{1}{\sum_{r\in T}\frac{X_r}{N l_r}} \bigg) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Crho_t%7D+%3D+%5Cfrac%7BX_t%7D%7BN%7D+%5Ccdot+%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Ccdot+%5Cbigg%28+%5Cfrac%7B1%7D%7B%5Csum_%7Br%5Cin+T%7D%5Cfrac%7BX_r%7D%7BN+l_r%7D%7D+%5Cbigg%29+)</p>

<p>と表すことができる．これが，Count Based Modelによって求められた発現量![\rho_t ](http://chart.apis.google.com/chart?cht=tx&chl=%5Crho_t+)の推定値である．</p>

<h3>Count Based Modelの解析解とRPKMとの関係</h3>

<p>さて，ようやくRPKMとの関連の話に入ることができる．上で求めた![\hat{\rho_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Crho_t%7D+)を，次のように式変形する．</p>

<p>![\hat{\rho_t} = \frac{X_t}{N} \cdot \frac{1}{\tilde{l_t}} \cdot \bigg( \frac{1}{\sum_{r\in T}\frac{X_r}{N l_r}} \bigg) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Crho_t%7D+%3D+%5Cfrac%7BX_t%7D%7BN%7D+%5Ccdot+%5Cfrac%7B1%7D%7B%5Ctilde%7Bl_t%7D%7D+%5Ccdot+%5Cbigg%28+%5Cfrac%7B1%7D%7B%5Csum_%7Br%5Cin+T%7D%5Cfrac%7BX_r%7D%7BN+l_r%7D%7D+%5Cbigg%29+)</p>

<p>この式をよく見ると，後半の![\bigg( \frac{1}{\sum_{r\in T}\frac{X_r}{N l_r}} \bigg) ](http://chart.apis.google.com/chart?cht=tx&chl=%5Cbigg%28+%5Cfrac%7B1%7D%7B%5Csum_%7Br%5Cin+T%7D%5Cfrac%7BX_r%7D%7BN+l_r%7D%7D+%5Cbigg%29+)は全ての転写物に関して計算しているだけなので，ただの定数である．ということで，特定の転写物の発現量![\hat{\rho_t} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Crho_t%7D+)に関係してくる変数だけを抜き出すと，</p>

<p>![\hat{\rho_t} \propto \frac{X_t}{\tilde{l_t} N} ](http://chart.apis.google.com/chart?cht=tx&chl=%5Chat%7B%5Crho_t%7D+%5Cpropto+%5Cfrac%7BX_t%7D%7B%5Ctilde%7Bl_t%7D+N%7D+)</p>

<p>ここに![10<sup>9</sup> ](http://chart.apis.google.com/chart?cht=tx&chl=10%3Csup%3E9%3C%2Fsup%3E+)を掛ければ，<strong>生成モデルにおける発現量の推定式はRPKMの式![RPKM \  for \  transcript \ t = 10<sup>9</sup> \times\frac{X_t}{l_t N}](http://chart.apis.google.com/chart?cht=tx&chl=RPKM+%5C++for+%5C++transcript+%5C+t+%3D+10%3Csup%3E9%3C%2Fsup%3E+%5Ctimes%5Cfrac%7BX_t%7D%7Bl_t+N%7D)と全く同じ式になることがわかる！！！</strong></p>

<p>ということで，Count Based Modelにおける最尤推定によって推定される発現量と，マッピングされたショートリードの数だけで計算されたRPKMの発現量は，基本的には同じ計算式によって求めることができることがわかった．</p>

<h3>まとめ</h3>

<p>後半はだいぶ駆け足になってしまったが，Count Based Modelの導出とRPKMとの関係を解説してみた．生成モデルというややこしい数式を立てておいて結局RPKMと同じかよと思うかもしれないが，生成モデルはここから様々な仮定をモデルに組み込むことによって，より複雑かつ現実に則した一般的なモデルへと改良していくことができる．今回のCount Based Modelはその枠組みとして，非常に基本的な考え方である．しかしながら，実際にはこの方法だけを使ってソフトウェアが作られたり論文として出ているわけでもなく，あまり詳しい解説が無い部分だと思われる．今回はLior Pachter氏のレビューをもとに具体例をはさみながらモデルを読み解いていったが，次回以降はもう少しCufflinksで使われているような技術も導入しつつ，より複雑なモデルへと進んでいきたい．</p>

<h3>参考</h3>

<ul>
<li><a href="http://arxiv.org/abs/1104.3889v2">[1104.3889v2] Models for transcript quantification from RNA-Seq</a></li>
<li><a href="http://fgcz-intranet.uzh.ch/publish/BiostatLecture/RNA-seq-quantification.pdf">http://fgcz-intranet.uzh.ch/publish/BiostatLecture/RNA-seq-quantification.pdf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNA-Seqの数理―生成モデルによる発現量推定（1）RNA-Seqの発現量推定とRPKM]]></title>
    <link href="http://yagays.github.io/blog/2013/07/15/mathematical-models-for-transcriptome-quantification-1/"/>
    <updated>2013-07-15T00:06:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/07/15/mathematical-models-for-transcriptome-quantification-1</id>
    <content type="html"><![CDATA[<ul>
<li>まとめ：<a href="http://yagays.github.io/blog/2013/07/14/mathematical-models-for-transcriptome-quantification-0/">RNA-Seqの数理―生成モデルによる発現量推定：アーカイブ - Wolfeyes Bioinformatics beta</a></li>
</ul>


<p>生成モデルの話を始める前に，まずはRNA-Seqの発現量としてよく知られているRPKMという指標からスタートし，生成モデルの話へと繋げていこう．</p>

<h3>RNA-Seqの発現量推定の基本</h3>

<p>RNA-Seqで得られるデータは，ある長さの配列（ショートリード）とクオリティスコアのセットして表現される．それをリファレンスとなるゲノム配列の中から探しだして，読まれた配列が何の転写物由来かを見つける作業をマッピングという．このマッピングをNGSから出力された数千万本/数億本のショートリードに対して行い，ある遺伝子の部位にどのくらい貼り付いたかをカウントすることで特定の転写物がどれくらい発現していたかを推定するという方法が，RNA-Seqの発現量推定では基本となる．</p>

<p><a href="http://www.nature.com/nrg/journal/v10/n1/fig_tab/nrg2484_F1.html" target="_blank"><img src="http://dl.dropboxusercontent.com/u/142306/b/nrg2484-f1.jpg" alt="CCC License Number: 3187871036736 "></a></p>

<p>この図はRNA-Seqの実験の流れを模式的に表している．まず対象となるトランスクリプトームであるmRNAを取り出し，断片化やアダプターの付与を経てシーケンスライブラリを作成する．次にNGSによって断片が大量にシーケンスされ，いわゆるATCGからなる文字列で構成されたショートリードが得られる．そしてゲノム配列にマッピングすることによって，RNAの発現量が推定される．この図では，ゲノム配列の各塩基ごとにどれくらいの本数のショートリードが貼り付いたかをカウントすることによって，RNA expression levelを図示している．Nucleotide positionによって特定の領域の発現量が欠損していたり遺伝子の末端で発現量が少なくなっているのには，マッピングの際に生じる幾つかの理由がある．まず，図中のJunction readsで示されている点線の箇所は，イントロンのスプライシングが起きた領域であり，mRNAの配列をゲノム配列にマッピングするために起こる現象である．そのため，イントロンの領域だけ発現量が無いように見える．また，Poly-A tailが配列の一部として混入することでショートリード自体がゲノム配列にマッピングできない場合もあり，末端の発現量が落ちる原因の一つになっている．</p>

<p>では，このようにして求められた値を転写物ごとの発現量として一つの値で表現するには，どうすれば良いのか．ここで，RPKMという考え方が登場する．</p>

<h3>RPKMの考え方</h3>

<p>RNA-Seqの発現量の値として最初に考えられ今でも広く使われているRPKMという指標は，配列の本数を数えるという方法で転写物ごとの発現量を求めている．RPKMはreads per kilobase of exon per million mapped sequence readsの略称で，マッピングされたショートリードの数をエキソンの長さとシーケンサで読まれた配列の総数で正規化した値である．RPKMの計算方法を式で表すと以下のようになる．</p>

<p>![RPKM \  for \  transcript \ t = 10<sup>9</sup> \times\frac{X_t}{l_t N}](http://chart.apis.google.com/chart?cht=tx&chl=RPKM+%5C++for+%5C++transcript+%5C+t+%3D+10%3Csup%3E9%3C%2Fsup%3E+%5Ctimes%5Cfrac%7BX_t%7D%7Bl_t+N%7D)</p>

<p>ここで，![X_t ](http://chart.apis.google.com/chart?cht=tx&chl=X_t+)は転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)にマッピングされたショートリードの本数，![l_t ](http://chart.apis.google.com/chart?cht=tx&chl=l_t+)は転写物![t ](http://chart.apis.google.com/chart?cht=tx&chl=t+)の長さ(bp)，![N ](http://chart.apis.google.com/chart?cht=tx&chl=N+)はマッピングされたショートリードの総数を表している．</p>

<p>さて，このRPKMという発現量の考え方の裏には以下のような仮定がある．</p>

<ul>
<li>配列数が長い転写物からはショートリードが多く読まれる</li>
<li>全体で読まれるショートリードの数が多いと，マッピングされるショートリードも多くなる</li>
</ul>


<p>NGSによるRNA-Seqでは，特定の量のサンプルの中に含まれるトランスクリプトームをランダムにシーケンスするため，出てくるデータというのはあくまでも相対的な量となってしまう．そのため，このような仮定を置くことで転写物の発現や実験サンプルなどの違いを補正している．RPKMはある遺伝子の領域内に含まれるショートリードの本数を数え，転写物の長さと全体のデータ数で割って10<sup>9</sup> を掛けることによって簡単に求められるため，計算のしやすさと直感的な分かりやすさがある．</p>

<h3>RPKMと生成モデルとの関係</h3>

<p>このように，RPKMはマッピングされた配列の本数を数えるという単純な方法で発現量を推定している．一方で，これから考えていくことになる生成モデルによる発現量推定は，データが観測される事象を確率的に推定することでデータが与えられたときのトランスクリプトームの発現量というものを求める．これらは一見して全く違うもののように見えるのだが，<strong>実際には最も単純な生成モデルはRPKMと基本的な考え方が同じになる</strong>．つまり，RPKMも単純な生成モデルによる推定方法も，発現量はマッピングされたショートリードの本数と，転写物の長さおよびマッピングされたショートリードの総数の逆数によって決まるということだ．</p>

<p>それを確かめるために，次回はCount Based Modelと呼ばれる生成モデルを作って発現量推定を定式化し，それがRPKMの計算式と同じ意味を持つということを示してみよう．</p>

<ul>
<li>次：<a href="http://yagays.github.io/blog/2013/07/16/mathematical-models-for-transcriptome-quantification-2/">RNA-Seqの数理―生成モデルによる発現量推定（2）Count Based ModelとRPKM - Wolfeyes Bioinformatics beta</a></li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://www.nature.com/nmeth/journal/v5/n7/full/nmeth.1226.html">Mapping and quantifying mammalian transcriptomes by RNA-Seq - Nature Methods</a></li>
<li><a href="http://www.nature.com/nrg/journal/v10/n1/full/nrg2484.html">RNA-Seq: a revolutionary tool for transcriptomics : Article : Nature Reviews Genetics</a></li>
<li><a href="http://arxiv.org/abs/1104.3889v2">[1104.3889v2] Models for transcript quantification from RNA-Seq</a></li>
<li><a href="http://fgcz-intranet.uzh.ch/publish/BiostatLecture/RNA-seq-quantification.pdf">http://fgcz-intranet.uzh.ch/publish/BiostatLecture/RNA-seq-quantification.pdf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNA-Seqの数理―生成モデルによる発現量推定：アーカイブ]]></title>
    <link href="http://yagays.github.io/blog/2013/07/14/mathematical-models-for-transcriptome-quantification-0/"/>
    <updated>2013-07-14T10:43:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/07/14/mathematical-models-for-transcriptome-quantification-0</id>
    <content type="html"><![CDATA[<p>この「RNA-Seqの数理」シリーズでは，次世代シーケンサを用いたRNA-Seqにおける発現量推定の数理モデルを理解することを目的とする．</p>

<p>副題にある「生成モデル」とは，観測データの生成過程を確率的にモデル化し，データが与えられたときの事後確率を用いて分類したいクラスや予測したい値を推定する方法のことを指す．今回のRNA-Seqにおける生成モデルでは，次世代シーケンサで読み取られた配列が，どのようにして細胞内のトランスクリプトームから実験によって読み取られて観測されたかという一連の流れを，生成モデルとして表現する．そして確率的なもっともらしさやパラメータの推定をおこない，トランスクリプトームの発現量を求める．</p>

<h3>このシリーズについて</h3>

<p>次世代シーケンサによるRNA-Seqの発現量推定といっても，実験対象は大腸菌レベルから人に至るまでゲノムサイズや遺伝子数は多種多様であり，実験機器も各メーカーごとに独自に改良が加えられてきた．しかしながら，RNA-Seqはトランスクリプトームの配列を超並列に大量に解読するという点で，基本的な原理は生物種やプラットフォームに依存しない．まずはこの共通部分に関して単純なモデルを作成し，そこから個別の生物の特性や実験方法に合わせた複雑なモデルを構築していく．</p>

<p>今回のシリーズは前提条件として，発現量推定の対象とする種をゲノム既知なモデル生物に限定する．つまり，ヒトやマウス，シロイヌナズナ，線虫など，すでにゲノム配列が解読されていて，なおかつ遺伝子の配列や機能がよく研究されている種を対象にするということだ．この仮定をおかないと，そもそもデータ処理の時点でショートリードのマッピングができなかったり，モデルが立てられないということになりかねない．とはいうものの，仮定を立てたからといってマッピングの曖昧さは解消されないし，アイソフォームの存在や選択的スプライシングなど複雑な転写メカニズムはいくらでも考えられるので，それらは追々モデルに組み込んでいく．</p>

<h3>注意</h3>

<p>このシリーズの記事で書かれていることはすべて個人的な勉強記録であって，数理的な解釈や導出の厳密性を保証するものではない．勘違いや間違いなどが多分に含まれている可能性があるので，参考にされる際には十分に注意していただきたい．もし間違いや誤字脱字等見つけられた方は，コメント欄などで指摘していただければ幸い．</p>

<h3>このシリーズの目標</h3>

<p>このシリーズの目標（そして個人的な勉強の目標）としては，</p>

<ul>
<li>CufflinksやRSEMなどのスタンダードとなっている発現量推定の数理的背景を理解する</li>
<li>発現差異解析(DE)などの複数サンプルにまたがる発現量比較の手法の理解につなげる</li>
</ul>


<p>ことを考えている．基本的には論文に記載されている内容をベースに進めていくので，論文のmethodの理解が最終的な目標となるだろう．</p>

<h3>記事まとめ</h3>

<ul>
<li><a href="http://yagays.github.io/blog/2013/07/15/mathematical-models-for-transcriptome-quantification-1/">RNA-Seqの数理―生成モデルによる発現量推定（1）RNA-Seqの発現量推定とRPKM - Wolfeyes Bioinformatics beta</a></li>
<li><a href="http://yagays.github.io/blog/2013/07/16/mathematical-models-for-transcriptome-quantification-2/">RNA-Seqの数理―生成モデルによる発現量推定（2）Count Based ModelとRPKM - Wolfeyes Bioinformatics beta</a></li>
<li><a href="http://yagays.github.io/blog/2013/07/22/mathematical-models-for-transcriptome-quantification-3/">RNA-Seqの数理―生成モデルによる発現量推定（3）ペアエンドリードとフラグメント長の分布関数 - Wolfeyes Bioinformatics beta</a></li>
</ul>


<h3>参考</h3>

<ul>
<li>(Cufflinksの論文)<a href="http://www.nature.com/nbt/journal/v28/n5/full/nbt.1621.html">Transcript assembly and quantification by RNA-Seq reveals unannotated transcripts and isoform switching during cell differentiation : Nature Biotechnology : Nature Publishing Group</a></li>
<li>(RSEMの論文)<a href="http://www.biomedcentral.com/1471-2105/12/323">BMC Bioinformatics | Full text | RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tophat/Cufflinksなどの開発者であるCole TrapnellによるRNA-Seqの遺伝子発現解析に関する講義動画]]></title>
    <link href="http://yagays.github.io/blog/2013/07/12/stat115-cole-trapnell/"/>
    <updated>2013-07-12T03:49:00+09:00</updated>
    <id>http://yagays.github.io/blog/2013/07/12/stat115-cole-trapnell</id>
    <content type="html"><![CDATA[<p>非常に良い講義資料およびその講義ビデオを見つけたので紹介する．これはハーバードの大学院およびハーバード公衆衛生大学院のComputational Biologyの講義で，マイクロアレイ/次世代シーケンサの発現解析に始まり，ChIP-Seqやモチーフ検索，GWAやSNP解析に至るまで，Computational Biologyにおける様々な研究対象に関する講義が行われている．</p>

<p><a href="http://www.stat115.org/index.html">STAT115 Introduction to Computational Biology</a></p>

<blockquote><p>This course is an introduction to state-of-the-arts concepts, methodologies and practices in computational biology. After taking this course, you should be able to:</p>

<ul>
<li><p>Use appropriate commands or write your own scripts to manipulate your own genomic data</p></li>
<li><p>Exploit appropriate pipeline or software to analyze your own high-throughput gene expression microarray and/or RNA-Seq data and high-throughput sequencing transcriptional regulation data</p></li>
<li><p>Apply statistical or mathematical models to your own population/human genetics data</p></li>
<li><p>Criticize and/or extend the computational analysis or statistical models in the literature</p></li>
<li><p>Use R, Python, and/or Shell scripts and basic concepts in genomics and genetics to perform your own bioinformatics and computational biology research</p></li>
</ul>


<p><a href="http://www.stat115.org/syllabus.html">http://www.stat115.org/syllabus.html</a></p></blockquote>

<p>このなかで，Cole TrapnellがRNA-Seqの遺伝子発現解析に関してレクチャーしている．Cole Trapnellといえば，<a href="http://tophat.cbcb.umd.edu/">TopHat</a>や<a href="http://cufflinks.cbcb.umd.edu/">Cufflinks</a>の開発者の中心人物のひとりだ．これらのツールに関する論文の第一著者でもある．その彼が，RNA-Seqの定量化や発現量推定などの一連の流れを，自身が開発に参加した"Tuxedo Tools"（Bowtie, Tophat, Cufflinks, CummeRbundの総称）を例に紹介しているのがこの動画だ．主にマッピング後の発現量推定に関して，基本的なFPKMの求め方であったり，Cufflinksのisoformの取り扱いであったりを，少し数式も交えながら詳しく解説している．</p>

<p>講義資料：<a href="http://www.stat115.org/lectures/stat115_rnaseq.pdf">http://www.stat115.org/lectures/stat115_rnaseq.pdf</a></p>

<iframe src="http://player.vimeo.com/video/60609764" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/60609764">lecture9-I</a> from <a href="http://vimeo.com/stat115">stat115</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<iframe src="http://player.vimeo.com/video/60609783" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/60609783">lecture9-II</a> from <a href="http://vimeo.com/stat115">stat115</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
</feed>
