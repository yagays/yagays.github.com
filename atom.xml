<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.com/atom.xml" rel="self"/>
  <link href="http://yagays.github.com/"/>
  <updated>2012-06-04T13:51:19+09:00</updated>
  <id>http://yagays.github.com/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ALLPATHS-LGを最小構成で実行する]]></title>
    <link href="http://yagays.github.com/blog/2012/06/04/allpaths-lg-introduction/"/>
    <updated>2012-06-04T13:08:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/06/04/allpaths-lg-introduction</id>
    <content type="html"><![CDATA[<p><a href="http://yagays.github.com/blog/2012/06/02/allpaths-lg-dataset/">前回</a>は，ALLPATHS-LGの入力データの制約についてFragment LibraryとJumping Libraryの2つが最低でも必要ということを書いたが，今回は実際にALLPATHS-LGを動かすところを見ていく．ただし，複雑で込み入った細かい部分は分からないので，最小構成でとにかくアセンブル結果を得るということだけを解説していこうと思う．</p>

<!-- more -->


<p>今回はALLPATHS-LGのexampleを使って解説していく．このexampleにはprepare.shとassemble.shという2つのシェル・スクリプトが付属しており，これらを動かせばアセンブルは実行できるのだが，今回は最小構成で実行するということで，これらの用意されたスクリプトを使わず直にコマンドを叩いて動かしていこうと思う．ALLPATHS-LGパイプラインの特徴である美しいディレクトリ構成などは一切無視して進むので，もし上手に実験を組んでディレクトリ構成を管理したい場合はマニュアルを熟読していただきたい．</p>

<h3>概要</h3>

<p>まず，ALLPATHS-LGを動かすために必要なステップが3つある．</p>

<ol>
<li><strong>in_groups.csvとin_libs.csvを作る</strong></li>
<li><strong>PrepareAllPathsInputs.plを実行する</strong></li>
<li><strong>RunAllPathsLGを実行する</strong></li>
</ol>


<p>最低限この3つを実行すれば，アセンブル結果が出てくる．では個別に見てこう．</p>

<h3>in_groups.csvとin_libs.csvを作る</h3>

<p>ALLPATHS-LGでは，入力となるNGSデータの情報をin_groups.csvとin_libs.csvの2つに記述する必要がある．</p>

<p>in_groups.csvでは，アセンブルの元データとなるNGS入力データの場所と種類，そしてライブラリの名前をコンマ区切りのテキストとして保存する．exampleのin_groups.csvは以下のようになっている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat in_groups.csv
</span><span class='line'>        file_name, library_name, group_name
</span><span class='line'>seq/frags.?.fastq, Solexa-25396,      frags
</span><span class='line'>seq/jumps.?.fastq, Solexa-11542,      jumps</span></code></pre></td></tr></table></div></figure>


<p>file_nameは入力データのパスを指定する．相対パスでも絶対パスでも問題ない．入力ファイルがペアエンドなどで対になっている場合は<strong><code>?</code></strong>や<strong><code>*</code></strong>のワイルドカードを使う必要があり，例えばR1.fastqとR2.fastqなら&#8221;R?.fastq&#8221;とすれば2つのファイルをひとまとまりとして認識できる．次にlibrary_nameとgroup_nameだが，これらは入力データを区別するためにユーザが指定する項目で，自由に名前を付けることができる．library_nameは後述のin_libs.csvでも共通して使われるので，そちらの配列情報の項目と名前を合わせる必要がある．また，group_nameはそれぞれの配列データにユニークな名前を付ける必要がある．上の例ではfragsとjumpsとなっているが，これはライブラリの種類を指定しているわけではなく，ただ名前を付けているだけなので勘違いしないように注意が必要である．</p>

<p>次に，in_libs.csvでは，アセンブルの元データとなるNGS入力データのライブラリの種類とインサートサイズなどの各情報をコンマ区切りのテキストとして保存する．exampleのin_libs.csvは以下のようになっている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat in_libs.csv
</span><span class='line'>library_name, project_name, organism_name,     type, paired, frag_size, frag_stddev, insert_size, insert_stddev, read_orientation, genomic_start, genomic_end
</span><span class='line'>Solexa-25396,         test,   test.genome, fragment,      1,       180,          10,            ,              ,           inward,             0,           0
</span><span class='line'>Solexa-11542,         test,   test.genome,  jumping,      1,          ,            ,        3000,           500,          outward,             0,           0</span></code></pre></td></tr></table></div></figure>


<p>まず一番左のカラムには，先ほどのin_groups.csvで指定したlibrary_nameと同じものを入力する．そして，それ以降の行で詳しいライブラリの情報を指定していく．project_nameやorganism_nameなどはユーザが自由に名前を付ける事ができる．それ以降のtypeやpaired，frag_sizeではライブラリの情報を入力していくが，関係ない項目は空白にしておいて良い．このあたりの入力情報の詳細はマニュアルに詳しく記載されているので，そちらを参照されたい．</p>

<p>さて，in_groups.とin_libs.csvが揃ったところで，次からいよいよALLPATHS-LGを動かしていく．</p>

<h3>PrepareAllPathsInputs.plを実行する</h3>

<p>さて，ここから実際にALLPATHS-LGを動かしていくわけだが，まずはPrepareAllPathsInputs.plというスクリプトを動かして，パイプラインのディレクトリ作成や入力データの変換などを行う．</p>

<p>それでは実際にPrepareAllPathsInputs.plを動かしてみよう．先ほどのin_groups.csvとin_libs.csvがあるディレクトリで，以下のコマンドを実行する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PrepareAllPathsInputs.pl DATA_DIR=$PWD PLOIDY=2  </span></code></pre></td></tr></table></div></figure>


<p>最低限必要なのはDATA_DIRとPLOIDYの2つだけである．DATA_DIRはアセンブル結果を保存するディレクトリを指定するオプションで，今回は最小構成ということで，このスクリプトを動かしたディレクトリ以下に結果を置くようにする．PLOIDYではゲノムアセンブリの対象種における倍数を指定する．1倍体なら1，2倍体なら2という具合だが，現在のところALLPATHS-LGは2倍体以上の倍数体には対応していないようだ．なお，マニュアルには他にもオプションが指定されているが，<strong>PICARD_TOOLS_DIRは入力ファイルがbamファイルでなければ必要ない</strong>．</p>

<h3>RunAllPathsLGを実行する</h3>

<p>入念な下準備が終わったところで，いよいよALLPATHS-LGの本体を動かす．まずは実行コマンドを見てみよう．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RunAllPathsLG PRE=. REFERENCE_NAME=. DATA_SUBDIR=. RUN=allpaths SUBDIR=run  </span></code></pre></td></tr></table></div></figure>


<p>色々とオプションが指定されているが，これらは全てディレクトリに関するものである．PREやREFERENCE_NAME，DATA_SUBDIRで指定されているドットは「現在のディレクトリ」を表している．RUNやSUBDIRは出力結果のが置かれるディレクトリの名前になり，上のコマンドの場合には，final.assembly.fastaなどのアセンブル結果はallpaths/ASSEMBLIES/runのディレクトリ以下に置かれることになる．マニュアルではTARGETSというオプションがあるが，これは既にゲノムが読まれていたりする場合に，それをリファレンスとして使うことでALLPATHS-LGのアセンブル結果と比較してまとめて評価してくれるというものである．今回は使用していないので関係無いが，exampleではリファレンスゲノムもきちんと用意されているので，試すことはできる．</p>

<h3>まとめ</h3>

<p>ということで，足早にALLPATHS-LGの使い方を最小構成で見てきた．こうやって並べてみると，実際にアセンブルに必要な項目というのは非常に少なく，in_groups.csvとin_libs.csv，そしてPLOIDYさえ指定すればアセンブルすることはできる事がわかる．まあ実際に動かすとアセンブルが上手くいかない部分は多々出てくると思うが，最小構成で一度実行できてさえいれば次からはパラメータチューニングをしていくだけなので，アセンブル結果の評価と並行して進めることができる．ALLPATHS-LGでは他にも様々な種やデータに対応できるよう様々なオプションが用意されているので，色々試してみると面白かもしれない．</p>

<h3>参考サイト</h3>

<ul>
<li><a href="http://www.broadinstitute.org/software/allpaths-lg/blog/">http://www.broadinstitute.org/software/allpaths-lg/blog/</a></li>
<li><a href="http://gage.cbcb.umd.edu/recipes/allpaths.html">http://gage.cbcb.umd.edu/recipes/allpaths.html</a></li>
<li><a href="http://evomics.org/learning/assembly-and-alignment/allpaths-lg/">http://evomics.org/learning/assembly-and-alignment/allpaths-lg/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「せめぎ合う遺伝子」読書ノート 1章]]></title>
    <link href="http://yagays.github.com/blog/2012/06/03/genesinconflict-1/"/>
    <updated>2012-06-03T14:31:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/06/03/genesinconflict-1</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=qf_sp_asin_til&asins=432005699X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<p>「せめぎ合う遺伝子」(Genes in Conflicts)を先週あたりから少しずつ読み進めている．元々の動機としては，生物学を勉強するにあたり「○○学」なんて大層な名前の分厚い「辞書」を読み進めるのに飽きたのがきっかけで，実例を学びながら時々辞書を引きつつ勉強しようと思ってこの本を選んだのが始まりだった．当初の目的通りこの本をさらっと読み進めながら辞書の方の読解を並行して進められるかと思いきや，これが思いの外キツい本で今は必死になって読み進めている．ある意味計画通りな反面，辞書が示す範疇を超えるのではないかと思うような濃厚さで，半ば辞書を放り出して本に齧り付いている感じがある．</p>

<p>そんなこんなで，無いも同然な生物学の知識を総動員して読み進めているわだが，読み進めるにあたり<a href="http://d.hatena.ne.jp/shorebird/20060424">原書を読まれた方の読書記録</a>が大いに理解の手助けになり参考にさせてもらっている．ということで，自分も実際に書きだして理解を深めようと思い，自分の理解の範囲内で纏めを作って見ることにした．間違ったことを書いていたり理解が浅い部分は多々あると思うので，そのあたり「生物学初学者が書いている」ことを念頭に置いてもらえればと思う．</p>

<h3>1章</h3>

<p>1章はガイダンス的な内容で，この本のメインテーマである利己的な遺伝因子の定義や，その戦略，研究の歴史が紹介されている．そして最後に，利己的な遺伝因子がいかに広範囲に及ぶ分野をまたぐテーマであり，本書はそれらを包括的に扱い体系化させようとしていることが述べられている．</p>

<!-- more -->


<ul>
<li>遺伝子にはせめぎ合い(コンフリクト)がある

<ul>
<li>利己的な遺伝因子と抑制因子の対立</li>
<li>利益：<strong>出現頻度</strong> (<strong>分布</strong>)</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>遺伝的協調性を持たない利己的な遺伝因子

<ul>
<li>生物の適応性と密接に関連する遺伝子が，自然選択Natural Selectionの結果，自身の頻度(分布)を広げる</li>
<li>このような遺伝的協調性は遺伝子が公平に伝達されることによりもたらされる</li>
<li>このとき世代間の遺伝頻度は変化しない(いわゆるハーディー・ワインバーグの法則)</li>
<li>しかし，利己的な遺伝因子は個体の適応度に寄与しないにもかかわらず分布を広げる</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>利己的な遺伝因子に関わる用語定義

<ul>
<li>ドライヴdrive

<ul>
<li>伝達率が50%を上回ること (超メンデル的Super-Mendelian)</li>
</ul>
</li>
<li>ドラッグdrug

<ul>
<li>伝達率が50%を下回ること(下メンデル的sub-Mendelian)</li>
</ul>
</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>利己的な遺伝因子の代表的な3つの戦略

<ul>
<li>干渉interference</li>
<li>過複製overreplication</li>
<li>ゴノタキシスgonotaxis (生殖系列走性)</li>
<li>ーー</li>
<li>あくまでこれらの戦略は個体の適応度（ここでは「生物としての質」）を変化させない</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>ゲノムの血縁コンフリクトにより利己性を発揮する場合がある

<ul>
<li>血縁関係が近いと，同じ遺伝子を持っている確率が高い</li>
<li>母親由来/父親由来 (maternal/paternal)</li>
<li>ゲノムインプリンティング</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>ショウジョウバエ<em>D.melanogaster</em>で観測された<em>P</em>因子は劇的な分布拡大を見せた

<ul>
<li>系統間交雑における不妊や突然変異率の高さ，オスの組み換え発生などの異常は<em>P</em>因子によるものだった</li>
<li><em>P</em>因子は20世紀半ばに<em>D.willistoni</em>から<em>D.melanogaster</em>の遺伝子プールに持ち込まれ，世界中に広まった</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>利己的な遺伝因子が必ずしも遺伝子のホストである個体の適応度に影響しないわけではない

<ul>
<li>ドライヴ性性染色体</li>
<li>雄性不稔ミトコンドリア</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>利己的な遺伝因子の別称

<ul>
<li>アウトロー遺伝子 outlaw gene</li>
<li>超利己的遺伝子 ultraselfish gene</li>
<li>自己普及推進遺伝因子 self-promoting genetic element</li>
</ul>
</li>
</ul>


<br />


<ul>
<li>ドライヴの別称

<ul>
<li>伝達比の歪曲 transmission ratio distortion</li>
<li>分離の歪曲 segregation distortion</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ALLPATHS-LGで使用できるライブラリサイズの制限]]></title>
    <link href="http://yagays.github.com/blog/2012/06/02/allpaths-lg-dataset/"/>
    <updated>2012-06-02T15:52:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/06/02/allpaths-lg-dataset</id>
    <content type="html"><![CDATA[<p>ALLPATHS-LGは複数のライブラリで読まれたショートリードを組み合わせてゲノムアセンブルをするソフトウェア（パイプライン）である．比較的新しいゲノムアセンブラで性能もかなり良いらしく，<a href="http://www.broadinstitute.org/software/allpaths-lg/blog/">公式ブログ</a>のアセンブル履歴を見ると非モデル生物を中心にかなり使われている印象がある．ただ，その反面かなり癖のあるソフトウェアで，インストールが鬼門・動かすのが難しい・インターネットに資料が少ないという三重苦で，初心者にはかなりハードルの高いソフトウェアと言わざるを得ない．その中でも個人的に一番やっかいだと思うポイントはパイプライン入力に使うデータセットの準備で，折角苦労してALLPATHS-LGが使える環境を整えたとしても，使えるデータが無いとそもそも動かないということになりかねない．</p>

<p>ということで，今回はALLPATHS-LGを動かすために必要なライブラリについて見ていく．私自身も厳密に調べたわけではないので間違い等あるかもしれないが，もし詳しい方がいらっしゃればご指摘頂ければ幸い．</p>

<p> <!-- more --></p>

<p>まず，ALLPATHS-LGが想定してるNGSショートリードは，長さ~100bp程度のペアエンドである．454のロングリードなどには対応していないようだが，最近のバージョンアップでillumina+PacBioのハイブリッドアセンブルが出来るようになっているらしい（<a href="http://www.broadinstitute.org/software/allpaths-lg/blog/?p=463">url</a>）．</p>

<p>ここまでは問題無いのだが，次のペアエンドのライブラリの種類に関する条件が非常に複雑である．まずALLPATHS-LGでは，ショートリードのライブラリは以下の3つに区分される．</p>

<ul>
<li>Fragment Library (Short Library)</li>
<li>Jumping Library (long Library)</li>
<li>Long Jumping Library</li>
</ul>


<p>このうち，アセンブルに必要となるライブラリはFragment LibraryとJumping Libraryである．ここで重要なのは，<strong>どちらも必ず最低1つ</strong>は必要になるということである．たとえFragment Libraryがいくつあっても，Jumping LibraryがなければALLPATHS-LGは動かない．これが非常に重要で，後述のライブラリの条件で詳しく述べるが，Jumping LibraryのInsert sizeには制限があるため，これをクリアするデータを持っていない場合はそもそもALLPATHS-LGを動かす事ができない．</p>

<h2>Fragment Library</h2>

<p>ではそれぞれのライブラリの条件を順に見ていこう．まずFragment Libraryだが，これはインサートサイズの短い配列のことを指す．ただこれには制約があり，ペアエンドの読まれたリードが重なっている必要がある．これだけでは何のことか分からないと思うので例を使って説明すると，例えば100bpのペアエンドの場合では両端から100bpずつ読まれるので，それらが重なるようなインサートサイズを考えると，200bp以下である必要がある．もしインサートサイズが300bpの場合では両端のリードの間に隙間が出来てしまうので，このライブラリはFragment Libraryにはならない．実際にはインサートサイズは少しばらつきがあり，ALLPATHS-LGでもインサートサイズの値に加えて標準偏差stddevも指定できるようになっているが，基本的にペアエンドリードが重なるような長さのものを使う必要がある．</p>

<h2>Jumping Library</h2>

<p>次にJumping Libraryである．ALLPATHS-LGではインサートサイズが3,000bp〜10,000bp程度のライブラリを想定している．ただしこれにも制約があり，ペアエンドリード間の長さ(separation size)が最低1,000bp以上ないとJumping Libraryと見なされない．ということは，100bpのペアエンドの場合，Jumping Libraryとして認識されるには最低1,200bp程度のインサートサイズが必要となる．これが非常にややこしいところで，Fragment Libraryより長いインサートはJumping Libraryになるかというと，そうでもないのである．じゃあ100bpペアエンドリードでインサートサイズが200bp〜1000bpの間のライブラリはどれに分類されるかというと，これが非常に謎な部分で私自身もあまり良くわかっていない．これらのインサートサイズのライブラリはFragment LibraryとしてALLPATHs-LGの入力ファイルに登録することは出来る(Validationに通る)ので，使われないことは無いと思う．ただし，このFragment Libraryモドキ単体だけではFragment Libraryが不足しているとしてALLPATHS-LGを動かすことが出来無いので，最低でも200bp以下のオーバーラップしているライブラリと組み合わせて使う必要がある．謎い．</p>

<h2>Long Jumping Library</h2>

<p>最後にLong Jumping Libraryだが，マニュアルによるとインサートサイズが20kbpsのライブラリを想定しているらしい．前述のJumping Libraryにおいてペアエンドリード間の長さの上限が10kbpなので，それ以上はLong Jumping Libraryとしても良さそうである．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/allpaths-lg-dataset.png" alt="Fragment LibraryとJumping Libraryの模式図" /></p>

<p>といった感じでALLPATHS-LGを動かすために必要なライブラリの種類を見てきた．結論としては兎に角動かすためのデータセットの制限がシビアということで，データのライブラリサイズなどの情報をきちんと把握しておく必要がある．まあデータが揃っていたとしてもALLPATHS-LGを動かすのも一苦労なのだが，この話はまた別の機会に書ければ書くことにする．というか自分も理解していないところが多いので手探り感が強いが&#8230;．</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github pages + Octopressでブログを作ってみた]]></title>
    <link href="http://yagays.github.com/blog/2012/05/23/new-post/"/>
    <updated>2012-05-23T15:52:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/05/23/new-post</id>
    <content type="html"><![CDATA[<p>お久しぶりです，yag_aysです．</p>

<p>さくらVPSの解約に伴い，Wordpressで立てていたblogをGithub Pagesで立て直すことにしました．</p>

<p>ということで，また懲りずに技術系記事をひっそりと書いていく予定です．よろしくお願いします．</p>

<h2>以下メモ</h2>

<ul>
<li>Githubのレポジトリを作成する</li>
</ul>


<p><img src="http://dl.dropbox.com/u/142306/b/github_accountsetting.png" alt="アカウント登録" /></p>

<ul>
<li>ページを作成してindex.htmlを作成すると，以下のようにNotificationが来る．</li>
</ul>


<p><img src="http://dl.dropbox.com/u/142306/b/github_notify.png" alt="Notification" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'> cd octopress
</span><span class='line'> gem install bundler
</span><span class='line'> bundle install
</span><span class='line'>
</span><span class='line'> rake setup_github_pages
</span><span class='line'> rake generate
</span><span class='line'> rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>まだMarkdownがよくわかってない&#8230;</p>
]]></content>
  </entry>
  
</feed>
