<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wolfeyes Bioinformatics beta]]></title>
  <link href="http://yagays.github.com/atom.xml" rel="self"/>
  <link href="http://yagays.github.com/"/>
  <updated>2012-11-02T07:34:00+09:00</updated>
  <id>http://yagays.github.com/</id>
  <author>
    <name><![CDATA[yag_ays]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「データ解析のための統計モデリング入門」読書ノート 7章 GLMMとGLMを比較する]]></title>
    <link href="http://yagays.github.com/blog/2012/11/02/glm-mcmc-chp7/"/>
    <updated>2012-11-02T06:54:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/11/02/glm-mcmc-chp7</id>
    <content type="html"><![CDATA[<ul>
<li>前回：「データ解析のための統計モデリング入門」読書ノート：<a href="http://yagays.github.com/blog/2012/10/14/review-glm-mcmc/">http://yagays.github.com/blog/2012/10/14/review-glm-mcmc/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=400006973X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<p>前回の読書ノートでは全体の流れを簡単に追ったが，今回は「データ解析のための統計モデリング入門」7章の一般化線形混合モデルのシミュレーションを動かしてみた．</p>

<h3>7章の概要</h3>

<p>6章までは，ある植物100個体から得られた生存種子数と葉数のデータから，その関係性をモデル化しGLMで推定してきた．7章では，個体差を取り入れたモデルを作成し，生存種子数の過分散にうまくあてはまるようなパラメータを推定する．ただし，個体差を表すパラメータを個体ごとに割り当てて最尤推定するのではなく，個体差がある分布に従うと仮定した上で，その分布のパラメータを推定する．</p>

<p>大雑把な目標としては，葉の数だけが生存種子数に効いているわけではないんだから，それぞれの個体で観測されていない/できないデータというのを考えようというもの．ただし，個体ごとに何らかの値を振って生存種子数を上手く表すことのできるモデルを組んでも予測に使えないので，じゃあその個体差がある分布に従っているだろうと考える．そうすると，個体ごとにパラメータを持たせるんじゃなくて，個体のばらつきという一つのパラメータで表すことができるので，より現実的なモデルとなると同時に簡単にパラメータの推定ができるようになる．</p>

<h3>問題設定</h3>

<p>ここでは，ロジスティクス回帰におけるGLMMを考える．種子生存数が二項分布</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathrm%7BBin%7D%28y_i%7C%5Cbeta_1%2C%5Cbeta_2%2Cs%29+%3D+%7B%7BN%7D%5Cchoose%7By_i%7D%7D+q_%7Bi%7D%5E%7By_i%7D%281-q_i%29%5E%7BN-y_i%7D+></p>

<p>に従うとした上で，そのパラメータ<img src=http://chart.apis.google.com/chart?cht=tx&chl=q_i+>を</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathrm%7Blogit%7D%28q_i%29+%3D+%5Cbeta_1+%2B+%5Cbeta_2+x_i+%2B+r_i+></p>

<p>とおく．ここで，個体差<img src=http://chart.apis.google.com/chart?cht=tx&chl=r_i+>は</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=r_i+%5Csim+%5Cmathcal%7BN%7D%280%2Cs%29+></p>

<p>平均0，標準誤差sの正規分布に従うとする．</p>

<h3>実験</h3>

<p>今回の実験は，なぜ応答変数が過分散の場合にGLMでは駄目でGLMMで推定すべきかを確かめるために，本書に記載されているGLMおよびGLMMの実験を1000回行なって，そのときの切片<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_1+>と傾き<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_2+>の分布を見ることにする．目標は<a href="http://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/26401/1/%E6%97%A5%E6%9C%AC%E7%94%9F%E6%85%8B%E5%AD%A656-2.pdf">「「個体差」の統計モデリング」</a>(pdf)の図11をプロットすること．</p>

<p>各実験は，葉数が2〜6枚の個体を20個体ずつ合計100個体のデータが得られたという条件で，それぞれの生存種子数をパラメータ<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_1+%3D+-4+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_2+%3D+1+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=r_i+%5Csim+%5Cmathcal%7BN%7D%280%2C3%29+>の二項乱数から生成した．このように生成したデータを用いて，GLMMとGLMを実行した．</p>

<p>この実験を1000回繰り返し，その時の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_1+>と<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_2+>の分布をプロットしたのが以下の図となっている．左図が切片<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_1+>の分布，右図が傾き<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_2+>で，それぞれ黒の線がGLMが推定した値の分布，赤の線がGLMMが推定した値の分布となっている．また，GLMとGLMMの推定値の平均を縦の点線で表している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>library<span class="p">(</span>glmmML<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>logistic <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>z<span class="p">){</span> <span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>exp<span class="p">(</span><span class="o">-</span>z<span class="p">))}</span>
</span><span class='line'>Niter <span class="o">&lt;-</span> <span class="m">1000</span>
</span><span class='line'>sigma <span class="o">&lt;-</span> <span class="m">3</span>
</span><span class='line'>glm_b <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span> nrow<span class="o">=</span>Niter<span class="p">,</span> ncol<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>glmm_b <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span> nrow<span class="o">=</span>Niter<span class="p">,</span> ncol<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:Niter<span class="p">){</span>
</span><span class='line'>  N <span class="o">&lt;-</span> rep<span class="p">(</span><span class="m">8</span><span class="p">,</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>  x <span class="o">&lt;-</span> rep<span class="p">(</span><span class="m">2</span>:<span class="m">6</span><span class="p">,</span>each<span class="o">=</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>  re <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> sigma<span class="p">)</span>
</span><span class='line'>  y <span class="o">&lt;-</span> rbinom<span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> prob<span class="o">=</span>logistic<span class="p">(</span><span class="m">-4</span><span class="o">+</span>x<span class="o">+</span>re<span class="p">))</span>
</span><span class='line'>  id <span class="o">&lt;-</span> <span class="m">1</span>:<span class="m">100</span>
</span><span class='line'>  d <span class="o">&lt;-</span> data.frame<span class="p">(</span>N<span class="p">,</span>x<span class="p">,</span>y<span class="p">,</span>id<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  glm_b<span class="p">[</span>i<span class="p">,]</span> <span class="o">&lt;-</span> glm<span class="p">(</span>cbind<span class="p">(</span>y<span class="p">,</span>N<span class="o">-</span>y<span class="p">)</span> ~ x<span class="p">,</span> data<span class="o">=</span>d<span class="p">,</span> family<span class="o">=</span>binomial<span class="p">)$</span>coefficients
</span><span class='line'>  glmm_b<span class="p">[</span>i<span class="p">,]</span> <span class="o">&lt;-</span> glmmML<span class="p">(</span>cbind<span class="p">(</span>y<span class="p">,</span>N<span class="o">-</span>y<span class="p">)</span> ~ x<span class="p">,</span> data<span class="o">=</span>d<span class="p">,</span> family<span class="o">=</span>binomial<span class="p">,</span> cluster<span class="o">=</span>id<span class="p">)$</span>coefficients
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>plot<span class="p">(</span>density<span class="p">(</span>glm_b<span class="p">[,</span><span class="m">1</span><span class="p">]),</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">-8</span><span class="p">,</span><span class="m">0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0.8</span><span class="p">),</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Estimate of beta_1&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>density<span class="p">(</span>glmm_b<span class="p">[,</span><span class="m">1</span><span class="p">]),</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">-8</span><span class="p">,</span><span class="m">0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0.8</span><span class="p">),</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Estimate of beta_1&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>v<span class="o">=</span>mean<span class="p">(</span>glm_b<span class="p">[,</span><span class="m">1</span><span class="p">]),</span> lty<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>v<span class="o">=</span>mean<span class="p">(</span>glmm_b<span class="p">[,</span><span class="m">1</span><span class="p">]),</span> lty<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>density<span class="p">(</span>glm_b<span class="p">[,</span><span class="m">2</span><span class="p">]),</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Estimate of beta_2&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>density<span class="p">(</span>glmm_b<span class="p">[,</span><span class="m">2</span><span class="p">]),</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Estimate of beta_2&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>v<span class="o">=</span>mean<span class="p">(</span>glm_b<span class="p">[,</span><span class="m">2</span><span class="p">]),</span> lty<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>v<span class="o">=</span>mean<span class="p">(</span>glmm_b<span class="p">[,</span><span class="m">2</span><span class="p">]),</span> lty<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'>legend<span class="p">(</span><span class="m">1.1</span><span class="p">,</span> <span class="m">3.0</span><span class="p">,</span> c<span class="p">(</span><span class="s">&quot;glm&quot;</span><span class="p">,</span><span class="s">&quot;glmmML&quot;</span><span class="p">),</span> col<span class="o">=</span>c<span class="p">(</span><span class="m">1</span>:<span class="m">2</span><span class="p">),</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/glm_mcmc_7.png" alt="" /></p>

<p>さて，この図の解釈だが，今回データセット作成に用いた実験条件は<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_1+%3D+-4+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta_2+%3D+1+>だったので，GLMMにおいて切片・傾きどちらもある程度正しい推定ができていることがわかる．逆にGLMでは，切片は過大推定，傾きは過小推定されている．逆に，推定値のばらつきである分布の山の裾の拡がりを見てみると，GLMMでは大きく，GLMでは小さくなっている．これはいわゆるバイアス・バリアンスのトレードオフを表していると思われる．</p>

<h4>参考</h4>

<ul>
<li><a href="http://hosho.ees.hokudai.ac.jp/~kubo/ce/IwanamiBook.html">生態学データ解析 - 本/データ解析のための統計モデリング入門</a></li>
<li><a href="http://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/49477/7/kubostat2008f.pdf">http://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/49477/7/kubostat2008f.pdf</a></li>
<li><a href="http://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/26401/1/%E6%97%A5%E6%9C%AC%E7%94%9F%E6%85%8B%E5%AD%A656-2.pdf">http://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/26401/1/%E6%97%A5%E6%9C%AC%E7%94%9F%E6%85%8B%E5%AD%A656-2.pdf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 確率的探索]]></title>
    <link href="http://yagays.github.com/blog/2012/11/01/imcmr-5-2/"/>
    <updated>2012-11-01T02:18:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/11/01/imcmr-5-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>例 5.3</h3>

<p><a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">例 3.3</a>で積分を考えた関数<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28x%29+%3D+%5B%5Ccos%2850x%29+%2B+%5Csin%2820x%29+%5D%5E2+>について，今度はその最大値について考える．</p>

<p>今回の実験は1000回シミュレーションを行う．それぞれのシミュレーションには，まず一様乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+%3D+u_1%2C+%5Cldots+%2C+u_m+>を1000個作成し，それぞれに関数を掛けた値の中から最大値<img src=http://chart.apis.google.com/chart?cht=tx&chl=h_%7Bm%7D%5E%7B%2A%7D+%3D+%5Cmax%28h%28u_1%29%2C+%5Cldots+%2Ch%28u_m%29%29+>を求める．</p>

<p>確率的探索といっても，今回の場合にやっていることは結局のところ定義域内で乱数を発生させて関数の値が大きいところを探しているだけとなる．今回は一様乱数で定義域内をまんべんなく探すという方法を取っているが，この後の確率的探索の例では「密度」を考えて，関数の値が大きい領域でのシミュレーションの確率を高くし，その他の関数の値の小さい領域での確率を小さくするという方法が取られる．</p>

<h4>今回のシミュレーションの仕組み</h4>

<p>今回のコードは少しややこしいので，まずは試しにシミュレーションを1回だけ行なってみよう．今回は推定値がどのように更新されていくかを見るために，単純にmax()関数を使うのではなく，cummax()関数を使用している．これにより，ベクトルの前から順に値を見ていって，最大値を更新していく様子を見ることができる．以下の図の黒の線が推定値<img src=http://chart.apis.google.com/chart?cht=tx&chl=h_%7Bm%7D%5E%7B%2A%7D+>，赤の線がoptimize()関数で求めた定義域内における関数<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28x%29+>の最大値を示している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>h <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">){(</span>cos<span class="p">(</span><span class="m">50</span><span class="o">*</span>x<span class="p">)</span> <span class="o">+</span> sin<span class="p">(</span><span class="m">20</span><span class="o">*</span>x<span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">}</span>
</span><span class='line'>plot<span class="p">(</span>cummax<span class="p">(</span>h<span class="p">(</span>runif<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">3</span><span class="p">))),</span>type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>h<span class="o">=</span>optimize<span class="p">(</span>h<span class="p">,</span>int<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>ob<span class="p">,</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_3.png" alt="" /></p>

<h4>実際に例5.3のシミュレーションを行う</h4>

<p>では実際に1000回のシミュレーションを行なって，推定値がどのように更新されていくのか，そしてその値がどれほどバラけるのかを見ていく．</p>

<p>以下の図が今回の結果となっている．まず，本書に載っている左図ではなく，右の赤い線が重なった図から説明する．この図は1000回シミュレーションした中から10回だけ抜き出してプロットしたものとなっている．これを見ると，最初のうちは0に近いような値から始まっていたりと値が安定しないものの，200回もすると実際の値と殆ど変わらないような推定値になり落ち着いているのがわかる．このように，値がきちんと実際の値に近づくかどうかを見るために，各イテレーションごとの最小値を求めてプロットしたのが左図となっている．灰色の部分は，イテレーションごとの推定値の幅を示しており，これを見ると，800回程度実験すれば一応どのシミュレーションでも実際の値と推定値がほぼ同じになることが分かる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>h <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">){(</span>cos<span class="p">(</span><span class="m">50</span><span class="o">*</span>x<span class="p">)</span> <span class="o">+</span> sin<span class="p">(</span><span class="m">20</span><span class="o">*</span>x<span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">}</span>
</span><span class='line'>rangom <span class="o">&lt;-</span> h<span class="p">(</span>matrix<span class="p">(</span>runif<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">6</span><span class="p">),</span> ncol<span class="o">=</span><span class="m">10</span><span class="o">^</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'>monitor <span class="o">&lt;-</span> t<span class="p">(</span>apply<span class="p">(</span>rangom<span class="p">,</span> <span class="m">1</span><span class="p">,</span> cummax<span class="p">))</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>plot<span class="p">(</span>monitor<span class="p">[</span><span class="m">1</span><span class="p">,],</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;white&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span> optimize<span class="p">(</span>h<span class="p">,</span>int<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>ob<span class="p">),</span>
</span><span class='line'>     xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;h(theta)&quot;</span><span class="p">)</span> <span class="c1"># 描写する領域をplotしているだけ</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>polygon<span class="p">(</span>c<span class="p">(</span><span class="m">1</span>:<span class="m">10</span><span class="o">^</span><span class="m">3</span><span class="p">,</span> <span class="m">10</span><span class="o">^</span><span class="m">3</span>:<span class="m">1</span><span class="p">),</span> c<span class="p">(</span>apply<span class="p">(</span>monitor<span class="p">,</span><span class="m">2</span><span class="p">,</span>max<span class="p">),</span> rev<span class="p">(</span>apply<span class="p">(</span>monitor<span class="p">,</span> <span class="m">2</span><span class="p">,</span> min<span class="p">))),</span> col<span class="o">=</span><span class="s">&quot;gray&quot;</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>h<span class="o">=</span>optimize<span class="p">(</span>h<span class="p">,</span> int<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>ob<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>monitor<span class="p">[</span><span class="m">1</span><span class="p">,],</span>type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span>optimize<span class="p">(</span>h<span class="p">,</span> int<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>ob<span class="p">),</span>
</span><span class='line'>     xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;h(theta)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">2</span>:<span class="m">10</span><span class="p">){</span>
</span><span class='line'>  lines<span class="p">(</span>monitor<span class="p">[</span>i<span class="p">,],</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_1.png" alt="" /></p>

<h3>練習問題 5.3</h3>

<p>まず最初に注意．この問題は解けないわけではないが，厳密には間違っているらしい．訂正は<a href="http://www.ceremade.dauphine.fr/~xian/shortManual.pdf">解答</a>(pdf)に書かれているが，つまりは定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>の制約は，</p>

<blockquote><p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x%5E2%281%2B%5Csin%283y%29%5Ccos%288x%29%29+%2B+y%5E2%282%2B%5Ccos%285x%29%5Ccos%288y%29%29+%5Cleq+1+></p></blockquote>

<p>ではなく，</p>

<blockquote><p> <img src=http://chart.apis.google.com/chart?cht=tx&chl=x%5E2%281%2B%5Csin%28%5Cfrac%7B3%7D%7By%7D%29%5Ccos%288x%29%29+%2B+y%5E2%282%2B%5Ccos%285x%29%5Ccos%288y%29%29+%5Cleq+1+></p></blockquote>

<p>としなければいけないようだ．今回はどちらの式も試してみて，本に書かれている式の何がおかしかったのを見てみる．</p>

<p>まず，左図は解答に記載されている修正後の式を使った場合，右図は本書に載っているオリジナルの式を使った場合となっている．これを見ると，左図では黒の円の中に式で表された制約の定義域が収まっているのに対し，右図では黒の円から一部制約の定義域がはみ出ているように見える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>theta<span class="o">=</span>runif<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">5</span><span class="p">)</span><span class="o">*</span><span class="m">2</span><span class="o">*</span>pi
</span><span class='line'>rho <span class="o">&lt;-</span> runif<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>xunif <span class="o">&lt;-</span> rho<span class="o">*</span>cos<span class="p">(</span>theta<span class="p">)</span><span class="o">/</span><span class="m">.77</span>
</span><span class='line'>yunif <span class="o">&lt;-</span> rho<span class="o">*</span>sin<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>plot<span class="p">(</span>xunif<span class="p">,</span> yunif<span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> cex<span class="o">=</span><span class="m">.4</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;x&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">)</span>
</span><span class='line'>const <span class="o">&lt;-</span> <span class="p">(</span>xunif<span class="o">^</span><span class="m">2</span><span class="o">*</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>sin<span class="p">(</span>yunif<span class="o">/</span><span class="m">3</span><span class="p">)</span><span class="o">*</span>cos<span class="p">(</span>xunif<span class="o">*</span><span class="m">8</span><span class="p">))</span><span class="o">+</span>
</span><span class='line'>  yunif<span class="o">^</span><span class="m">2</span><span class="o">*</span><span class="p">(</span><span class="m">2</span><span class="o">+</span>cos<span class="p">(</span><span class="m">5</span><span class="o">*</span>xunif<span class="p">)</span><span class="o">*</span>cos<span class="p">(</span><span class="m">8</span><span class="o">*</span>yunif<span class="p">))</span><span class="o">&lt;</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>points<span class="p">(</span>xunif<span class="p">[</span>const<span class="p">],</span> yunif<span class="p">[</span>const<span class="p">],</span> col<span class="o">=</span><span class="s">&quot;cornsilk2&quot;</span><span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span>cex<span class="o">=</span><span class="m">.4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>xunif<span class="p">,</span> yunif<span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> cex<span class="o">=</span><span class="m">.4</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;x&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">)</span>
</span><span class='line'>const2 <span class="o">&lt;-</span> <span class="p">(</span>xunif<span class="o">^</span><span class="m">2</span><span class="o">*</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>sin<span class="p">(</span>yunif<span class="o">*</span><span class="m">3</span><span class="p">)</span><span class="o">*</span>cos<span class="p">(</span>xunif<span class="o">*</span><span class="m">8</span><span class="p">))</span><span class="o">+</span>
</span><span class='line'>  yunif<span class="o">^</span><span class="m">2</span><span class="o">*</span><span class="p">(</span><span class="m">2</span><span class="o">+</span>cos<span class="p">(</span><span class="m">5</span><span class="o">*</span>xunif<span class="p">)</span><span class="o">*</span>cos<span class="p">(</span><span class="m">8</span><span class="o">*</span>yunif<span class="p">))</span><span class="o">&lt;</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>points<span class="p">(</span>xunif<span class="p">[</span>const2<span class="p">],</span> yunif<span class="p">[</span>const2<span class="p">],</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> cex<span class="o">=</span><span class="m">.4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-3_2.png" alt="" /></p>

<p>また，この方法のパフォーマンスを測定するために，棄却された点の平均数で評価してみる．生成した乱数の総数が10<sup>5</sup> 個なので，74%は受理され，26%が棄却されたことがわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>summary<span class="p">(</span>const<span class="p">)</span>
</span><span class='line'><span class="c1"># Mode   FALSE    TRUE    NA&#39;s </span>
</span><span class='line'><span class="c1"># logical   26285   73715       0</span>
</span></code></pre></td></tr></table></div></figure>


<p>それにしても，この図に何とも言えない可愛らしさを感じる，宇宙の侵略者を撃ち落とす某ゲームで見たことがあるような…．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 数値的最適化法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/30/imcmr-5-1/"/>
    <updated>2012-10-30T15:54:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/30/imcmr-5-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>本章の概要</h3>

<p>乱数を使って最適化問題を解くには2つの方法がある．</p>

<ul>
<li>確率的探索を用いて関数の最大値を探す（本章前半）</li>
<li>シミュレーションを使って最適化する関数を近似する（本章後半，5.4以降）</li>
</ul>


<h3>内容：モンテカルロ最適化で関数の最大値を求める</h3>

<h4>最適化問題には2種類ある</h4>

<p>最適化問題には大きくわけて2種類存在する．</p>

<ul>
<li>定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で関数<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28%5Ctheta%29>の極値を求める</li>
<li>定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で陰的方程式<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28%5Ctheta%29+%3D+0+>の解を求める</li>
</ul>


<p>問題設定はそれぞれ違うのだが，今回は最大化問題だけを取り上げる．つまり，以下の式のように定義域<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cit%7B%5CTheta%7D+>で一番大きな値を求めたい．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=max_%7B%5Ctheta+%5Cin+%5CTheta%7D%3Dh%28%5Ctheta%29></p>

<h4>解き方にも2種類ある</h4>

<ul>
<li>数値的手法（5.2 数値的最適化法）

<ul>
<li>目標関数の特性に強く依存する</li>
</ul>
</li>
<li>確率的手法（5.3 確率的探索）</li>
</ul>


<p>さて，ある関数のある定義域内における最大値を求めようと思った場合にじゃあどうするかというと，定義域内の値を片っ端から入れていって大きいものを探すといったアプローチと，別の分布をシミュレーションしてそこから最大値が現れるまでシミュレーションし続けるという方法の2通りがあるということになる．ここで重要になるポイントが定義域で，3章のモンテカルロ積分において積分する範囲を決めていたように，5章モンテカルロ最適化においても定義域内で最大値を探すということに繋がる．ただし，モンテカルロ積分よりもモンテカルロ最適化のほうが，全体の平均を求めるよりもピンポイントで値の大きい極値を求めるという点で，一般的に難しい．</p>

<h3>例 5.1 コーシー分布から得られたサンプルの尤度を最大化する</h3>

<h4>左の図</h4>

<p>何かしらのコーシー分布から生成された乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%7Bx_1%2C+%5Cdots+%2Cx_n%7D>が与えられた時に，それを生成したコーシー分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BC%7D%28%5Ctheta%2C1%29+>の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta+>を最尤法で推定しようという問題．尤度は以下の式で表される</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=l%28%5Ctheta%7C+x_1%2C%5Cldots%2Cx_n%29+%3D+%5Cprod_%7Bi%3D1%7D%5E%7Bn%7D%5Cfrac%7B1%7D%7B1%2B%28x_i-%5Ctheta%29%5E2%7D+></p>

<p>実際に計算するときには以下の対数尤度を使う．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clog+l%28%5Ctheta%7C+x_1%2C%5Cldots%2Cx_n%29+%3D+%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+%5Clog+%5Cfrac%7B1%7D%7B1%2B%28x_i-%5Ctheta%29%5E2%7D+></p>

<p>今回は実験として，上の尤度と対数尤度の2パターンで計算したときに，どういう違いが現れるかを示す．数式上は違いはないが，計算機上では値の取り扱いにおいて違いが出てくる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>xm <span class="o">&lt;-</span> rcauchy<span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'>loglik <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>y<span class="p">){</span><span class="o">-</span>sum<span class="p">(</span>log<span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="p">(</span>x<span class="o">-</span>y<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))}</span>
</span><span class='line'>lik <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>y<span class="p">){</span>prod<span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="p">(</span>x<span class="o">-</span>y<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))}</span>
</span><span class='line'>
</span><span class='line'>mi <span class="o">&lt;-</span> numeric<span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'>mi2 <span class="o">&lt;-</span> numeric<span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:<span class="m">500</span><span class="p">){</span>
</span><span class='line'>  x <span class="o">&lt;-</span> xm<span class="p">[</span><span class="m">1</span>:i<span class="p">]</span>
</span><span class='line'>  mi<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> optimize<span class="p">(</span>loglik<span class="p">,</span> interval<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>max
</span><span class='line'>  mi2<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> optimize<span class="p">(</span>lik<span class="p">,</span> interval<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">),</span>maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>max
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>mi<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">-5</span><span class="p">,</span> <span class="m">10</span><span class="p">),</span> ylab<span class="o">=</span><span class="s">&quot;theta&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;sample size&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>mi2<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">-5</span><span class="p">,</span><span class="m">10</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;theta&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;sample size&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>尤度で計算した(赤)と対数尤度で計算した計算(黒)を以下のプロットの左側の図に示してある．これをみると，対数尤度で計算した場合では着実に推定値が収束していくのに対し，尤度で計算した場合ではある地点で値が発散してるのがわかる．これは，Rのoptimizeにおいて，尤度を直接観察すると値が発散することがあるからである．このように，確率を扱う場合には，値が非常に小さくなることに注意しなければならない．</p>

<h4>右の図</h4>

<p>次に，上記の尤度を，摂動が加えられた尤度に置き換える．これは<img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5B%5Csin%28100y%29%5D%5E2+>という0から1の間の値を取るノイズを加えている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>perturbedloglik <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>y<span class="p">){</span><span class="o">-</span>sin<span class="p">(</span>y<span class="o">*</span><span class="m">100</span><span class="p">)</span><span class="o">^</span><span class="m">2</span> <span class="o">-</span> sum<span class="p">(</span>log<span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="p">(</span>x<span class="o">-</span>y<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))}</span>
</span><span class='line'>perturbedlik <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>y<span class="p">){</span><span class="o">-</span>sin<span class="p">(</span>y<span class="o">*</span><span class="m">100</span><span class="p">)</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> prod<span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="p">(</span>x<span class="o">-</span>y<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))}</span>
</span><span class='line'>mi <span class="o">&lt;-</span> numeric<span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'>mi2 <span class="o">&lt;-</span> numeric<span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:<span class="m">500</span><span class="p">){</span>
</span><span class='line'>  x <span class="o">&lt;-</span> xm<span class="p">[</span><span class="m">1</span>:i<span class="p">]</span>
</span><span class='line'>  mi<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> optimize<span class="p">(</span>perturbedloglik<span class="p">,</span> interval<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">),</span> maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>max
</span><span class='line'>  mi2<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> optimize<span class="p">(</span>perturbedlik<span class="p">,</span> interval<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">),</span>maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>max
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>mi<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">-5</span><span class="p">,</span> <span class="m">10</span><span class="p">),</span> ylab<span class="o">=</span><span class="s">&quot;theta&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;sample size&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>mi2<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">-5</span><span class="p">,</span><span class="m">10</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;theta&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;sample size&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをみると，尤度に関しては左図で示したように発散してしまっている．対数尤度を見てみると，左図と比べて値がばらつきグラフがギザギザになっている．当然だが，ノイズを加えれば値がばらついてしまう．</p>

<p>(個人的な感想)右図は何が言いたいのかちょっと分からない．ここの解釈は本書では出てこないと思うのだが，尤度関数に何らかの関数が加わる状況といえば，最小二乗法などにおける正則化項を加えて過学習を押さえる場合だろうか？　正則化項は摂動というよりかは，lassoやridgeのように1次/2次の関数になるので，今回の場合みたいにノイズのようにはならないと思うのだが…．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-1.png" alt="" /></p>

<h3>例 5.2 Newton-Raphson法を用いて混合正規分布モデルから得られたサンプルの尤度を最大化する</h3>

<p>今回の混合正規モデルでは，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B4%7D%5Cmathcal%7BN%7D%28%5Cmu_1%2C1%29%2B%5Cfrac%7B3%7D%7B4%7D%5Cmathcal%7BN%7D%28%5Cmu_2%2C1%29+></p>

<p>を考える．まずは分布の形を調べるために，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_1+%3D+0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_2+%3D+2.5+>における対数尤度の分布を示してみる．そして，初期値(1,1)からスタートして，Newton-Raphson法がどのように推定値に収束していくかを図示する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>da <span class="o">&lt;-</span> sample<span class="p">(</span>c<span class="p">(</span>rnorm<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">2</span><span class="p">),</span> <span class="m">2.5</span><span class="o">+</span>rnorm<span class="p">(</span><span class="m">3</span><span class="o">*</span><span class="m">10</span><span class="o">^</span><span class="m">2</span><span class="p">)))</span>
</span><span class='line'>like <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>mu<span class="p">){</span> <span class="o">-</span>sum<span class="p">(</span>log<span class="p">((</span><span class="m">0.25</span><span class="o">*</span>dnorm<span class="p">(</span>da<span class="o">-</span>mu<span class="p">[</span><span class="m">1</span><span class="p">])</span> <span class="o">+</span> <span class="m">0.75</span><span class="o">*</span>dnorm<span class="p">(</span>da<span class="o">-</span>mu<span class="p">[</span><span class="m">2</span><span class="p">]))))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>mu1 <span class="o">&lt;-</span> seq<span class="p">(</span><span class="m">-2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> le<span class="o">=</span><span class="m">250</span><span class="p">)</span>
</span><span class='line'>mu2 <span class="o">&lt;-</span> seq<span class="p">(</span><span class="m">-2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> le<span class="o">=</span><span class="m">250</span><span class="p">)</span>
</span><span class='line'>lli<span class="o">=</span>matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span>nco<span class="o">=</span><span class="m">250</span><span class="p">,</span>nro<span class="o">=</span><span class="m">250</span><span class="p">)</span>
</span><span class='line'><span class="kr">for</span> <span class="p">(</span>i in <span class="m">1</span>:<span class="m">250</span><span class="p">){</span>
</span><span class='line'>  <span class="kr">for</span> <span class="p">(</span>j in <span class="m">1</span>:<span class="m">250</span><span class="p">){</span>
</span><span class='line'>    lli<span class="p">[</span>i<span class="p">,</span>j<span class="p">]</span> <span class="o">&lt;-</span> like<span class="p">(</span>c<span class="p">(</span>mu1<span class="p">[</span>i<span class="p">],</span>mu2<span class="p">[</span>j<span class="p">]))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>image<span class="p">(</span>mu1<span class="p">,</span> mu2<span class="p">,</span> <span class="o">-</span>lli<span class="p">)</span>
</span><span class='line'>contour<span class="p">(</span>mu1<span class="p">,</span> mu2<span class="p">,</span> <span class="o">-</span>lli<span class="p">,</span>nlevels<span class="o">=</span><span class="m">100</span><span class="p">,</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>sta <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>mmu <span class="o">&lt;-</span> sta
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:<span class="p">(</span>nlm<span class="p">(</span>like<span class="p">,</span> sta<span class="p">)$</span>it<span class="p">)){</span>
</span><span class='line'>  mmu <span class="o">&lt;-</span> rbind<span class="p">(</span>mmu<span class="p">,</span> nlm<span class="p">(</span>like<span class="p">,</span> sta<span class="p">,</span> iterlim<span class="o">=</span>i<span class="p">)$</span>est<span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>lines<span class="p">(</span>mmu<span class="p">,</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp5_5-2_1.png" alt="" /></p>

<h4>アニメーションにしてみる</h4>

<p>例が1つだけでは面白くないので，初期値をバラバラに選んで何回もシミュレーションしてみて，初期値からどのように推定値が更新されていくのかを見てみる．今回は，初期値として<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_1+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu_2+>ともに図に表されている-2から5の範囲内でランダムに値を取るようにして，そこからのNewton-Raphson法による推定値の変化を1ステップごとにアニメーションとして作成した．それを25パターン作成して繋げている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>library<span class="p">(</span>animation<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>mixtureloglik <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>Niter<span class="p">){</span>
</span><span class='line'>  <span class="kr">for</span><span class="p">(</span>n in <span class="m">1</span>:Niter<span class="p">){</span>
</span><span class='line'>    sta <span class="o">&lt;-</span> c<span class="p">(</span>runif<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="o">-</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">),</span>runif<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">-2</span><span class="p">,</span><span class="m">5</span><span class="p">))</span>
</span><span class='line'>    mmu <span class="o">&lt;-</span> sta
</span><span class='line'>    da <span class="o">&lt;-</span> sample<span class="p">(</span>c<span class="p">(</span>rnorm<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">2</span><span class="p">),</span> <span class="m">2.5</span><span class="o">+</span>rnorm<span class="p">(</span><span class="m">3</span><span class="o">*</span><span class="m">10</span><span class="o">^</span><span class="m">2</span><span class="p">)))</span>
</span><span class='line'>    <span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:<span class="p">(</span>nlm<span class="p">(</span>like<span class="p">,</span> sta<span class="p">)$</span>it<span class="p">)){</span>
</span><span class='line'>      mmu <span class="o">&lt;-</span> rbind<span class="p">(</span>mmu<span class="p">,</span> nlm<span class="p">(</span>like<span class="p">,</span> sta<span class="p">,</span> iterlim<span class="o">=</span>i<span class="p">)$</span>est<span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">for</span><span class="p">(</span>j in <span class="m">1</span>:nrow<span class="p">(</span>mmu<span class="p">)){</span>
</span><span class='line'>      image<span class="p">(</span>mu1<span class="p">,</span> mu2<span class="p">,</span> <span class="o">-</span>lli<span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Iter:&quot;</span><span class="p">,</span>n<span class="p">))</span>
</span><span class='line'>      contour<span class="p">(</span>mu1<span class="p">,</span> mu2<span class="p">,</span> <span class="o">-</span>lli<span class="p">,</span>nlevels<span class="o">=</span><span class="m">100</span><span class="p">,</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>      lines<span class="p">(</span>mmu<span class="p">[</span><span class="m">1</span>:j<span class="p">,</span><span class="m">1</span><span class="p">],</span>mmu<span class="p">[</span><span class="m">1</span>:j<span class="p">,</span><span class="m">2</span><span class="p">],</span> pch<span class="o">=</span><span class="m">19</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>saveMovie<span class="p">(</span>mixtureloglik<span class="p">(</span><span class="m">25</span><span class="p">),</span> interval<span class="o">=</span><span class="m">0.05</span><span class="p">,</span> moviename<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>          movietype<span class="o">=</span><span class="s">&quot;gif&quot;</span><span class="p">,</span> outdir<span class="o">=</span>getwd<span class="p">(),</span>
</span><span class='line'>          width<span class="o">=</span><span class="m">640</span><span class="p">,</span> height<span class="o">=</span><span class="m">480</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rのanimationというパッケージを使用して作成している．このパッケージでは標準でmpgも出力できるらしいのだが，今回上手くいかなかったので，gifアニメとして出力したのちにImagemagickとffmpegを使用してmpgの動画として出力した．gifアニメは思いの外重いので，今回はYoutubeにアップロードした．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>convert animation.gif Rplot%d.png
</span><span class='line'><span class="nv">$ </span>ffmpeg -f image2 -i Rplot%d.png animation.mpg
</span></code></pre></td></tr></table></div></figure>




<iframe width="420" height="315" src="http://www.youtube.com/embed/ZbppoIltz3E" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「TED Talks ボディランゲージが人を作る」の主張における継続のニュアンス]]></title>
    <link href="http://yagays.github.com/blog/2012/10/29/fake-it-till-you-become-it/"/>
    <updated>2012-10-29T18:38:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/29/fake-it-till-you-become-it</id>
    <content type="html"><![CDATA[<p>素晴らしいプレゼンテーションがあったので，ここで紹介しつつ実際に自分の人生に適用する方法を考えてみようと思う．</p>

<iframe src="http://embed.ted.com/talks/lang/ja/amy_cuddy_your_body_language_shapes_who_you_are.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>このTED Talksでは，体の状態と心の状態の相互関係の例として，ボディーランゲージが人の心理的な状態に与える影響について考察している．その中で，ボディランゲージという体を使った表現は，何らかの情報を伝える相手だけでなく発信した自分にも心理的な影響を及ぼすという科学的な実験結果が示される．そして，その効果を逆手に取ることで，自発的なボディランゲージは自分自身の心の状態を変化させ，より良いパフォーマンスを引き出すことができるということが自身の経験とともに語られる．</p>

<p>その中で，発表者であるAmy Cuddyは以下のように主張している．</p>

<blockquote><p>「だから皆さんに言いたいんです。フリをしてやり過ごすのではなく、フリを本物にしてくださいと。それが本当に自分のものになるまでやるんです。」</p>

<p><a href="http://www.aoky.net/articles/amy_cuddy/your_body_language_shapes_who_you_are.htm">http://www.aoky.net/articles/amy_cuddy/your_body_language_shapes_who_you_are.htm</a>,</p></blockquote>

<p>じゃあ「ふり」ってどうやるんだろう．もちろん外見を真似しようということではなく，内面や行動を目標とする人物像に近づけていこうということを言っているわけだが，これは結局のところ「なりきる」ってことなんじゃないかと思う．</p>

<p>TEDに出てきた体験談に当てはめて考えてみると，例えば優秀な生徒のふりをしようと思ってクラスで意見を発表したところ，反対意見が多数出て自分の主張は間違っていたことが後から解ったとしよう．そうしたときに，ああやっぱり自分は駄目だったんだなと諦めてしまえば，Amy Cuddyの言う「フリをしてやり過ごす」ということになってしまう．つまり優秀な生徒という役に成りきれなかったのだ．しかし，そこで怯むことなく優秀な生徒のフリを続けていれば，間違いが分かったとしてもそこから考えを巡らせて，また新しい意見や主張を導く事ができるかもしれない．そうやって役になりきった状態を続けていくうちに，気がつけば本物と区別が付かないような状態になっているということだろう．</p>

<p>原文にはこうある．</p>

<blockquote><p>&#8220;And so I want to say to you, don&#8217;t fake it till you make it. Fake it till you become it. You know? It&#8217;s not — Do it enough until you actually become it and internalie.&#8221;</p>

<p><a href="http://www.ted.com/talks/lang/ja/amy_cuddy_your_body_language_shapes_who_you_are.html">http://www.ted.com/talks/lang/ja/amy_cuddy_your_body_language_shapes_who_you_are.html</a></p></blockquote>

<p>この原文からは，makeからは一時的な変化，becomeからは本質的な変化という対比を感じる．そう考えると，「一時的にフリをするのではなくフリをし続ける」という意味で，「なりきる」という言い方には一時的なものではない継続の意味が含まれているように感じて，ぼくとしては具体的に何をすればいいのかと考えた時にしっくり来る言葉だった．</p>

<p>といっても，最初の引用で示した青木氏の訳に不満があるわけではなく，「本物にする」というのはまさにピッタリな意訳だと思う．最終的な目標はまさに「本物にする」というところにある．なので，じゃあどうやってそれを実現していこうかと考えた時に，結局は役に「なりきる」ということを続けていけばいいのかなぁという結論となった．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 重点サンプリング]]></title>
    <link href="http://yagays.github.com/blog/2012/10/28/imcmr-3-3/"/>
    <updated>2012-10-28T09:45:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/28/imcmr-3-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：重点サンプリングにより推定量の分散と効率を改善する</h3>

<h3>例 3.5 <img src=http://chart.apis.google.com/chart?cht=tx&chl=Z+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+>で<img src=http://chart.apis.google.com/chart?cht=tx&chl=P%28Z+%3E+4.5%29+>の確率を求める</h3>

<p>確率を求めると書いてあるが，要するに正規分布の確率密度関数において4.5からInfまでの面積（<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B4.5%7D%5E%7B%5Cinfty%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%5Cfrac%7Bx%5E2%7D%7B2%7D%7D+dx+>）を求めるというもの．ただし，正規分布でxの値が4.5ともなると確率そのものがものすごく小さいので，普通のモンテカルロ積分で正規分布から乱数を生成したとしても，シミュレーション回数を非常に大きくしないと精度の良い値が求まらない．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>pnorm<span class="p">(</span><span class="m">-4.5</span><span class="p">,</span>log<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'><span class="c1"># [1] -12.59242</span>
</span><span class='line'>pnorm<span class="p">(</span><span class="m">-4.5</span><span class="p">)</span>
</span><span class='line'><span class="c1"># [1] 3.397673e-06</span>
</span></code></pre></td></tr></table></div></figure>


<p>ということで，重点サンプリングでシミュレーション回数を抑える．<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28y%29+%3D+%5Cfrac%7Be%5E%7B-y%7D%7D%7B%5Cint_%7B4.5%7D%5E%7B%5Cinfty%7De%5E%7B-x%7Ddx%7D+%3D+e%5E%7B-%28y-4.5%29%7D+>として，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%5Cfrac%7Bf%28Y%5E%7B%28i%29%7D%29%7D%7Bg%28Y%5E%7B%28i%29%7D%29%7D+>を求める．ここで，gの選択の箇所は「gを，4.5で切り詰めた指数分布の密度<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D%281%29+>とする」ということ(P.81)．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">3</span>
</span><span class='line'>y <span class="o">&lt;-</span> rexp<span class="p">(</span>Nsim<span class="p">)</span><span class="o">+</span><span class="m">4.5</span>
</span><span class='line'>weit <span class="o">&lt;-</span> dnorm<span class="p">(</span>y<span class="p">)</span><span class="o">/</span>dexp<span class="p">(</span>y<span class="o">-</span><span class="m">4.5</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>cumsum<span class="p">(</span>weit<span class="p">)</span><span class="o">/</span><span class="m">1</span>:Nsim<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>h<span class="o">=</span>pnorm<span class="p">(</span><span class="m">-4.5</span><span class="p">),</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_1.png" alt="" /></p>

<h3>練習問題 3.5 切り詰められた指数分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D%28%5Clambda%29+>をg(x)としたときの近似値の分散への影響を調べる</h3>

<p>例3.5で<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+%3D+1+>だった指数分布の値を色々と変えてみて実験する．以下の図は，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+%3D+1%2C5%2C10%2C20+>の時の推定値の変化を示している．左上の図が例3.5と同じ条件となり，そこから右上・左下・右下と<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+>の値を大きくしている．黒の線が推定値の推移，上下の黄色の線が推定値の誤差の範囲（＝分散）となっている．
このプロットを見ると，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+>の値が大きくなるにつれて，分散も大きくなることがわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>lambda in c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">)){</span>
</span><span class='line'>  Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>  y <span class="o">&lt;-</span> rexp<span class="p">(</span>Nsim<span class="p">)</span><span class="o">/</span>lambda<span class="o">+</span><span class="m">4.5</span>
</span><span class='line'>  weit <span class="o">&lt;-</span> dnorm<span class="p">(</span>y<span class="p">)</span><span class="o">/</span>dexp<span class="p">(</span>y<span class="o">-</span><span class="m">4.5</span><span class="p">,</span> lambda<span class="p">)</span>
</span><span class='line'>  estint <span class="o">&lt;-</span> cumsum<span class="p">(</span>weit<span class="p">)</span><span class="o">/</span><span class="m">1</span>:Nsim
</span><span class='line'>  esterr <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>weit<span class="o">-</span>estint<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:Nsim<span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>estint<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Mean and error range&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;prob&quot;</span><span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;lambda = &quot;</span><span class="p">,</span>lambda<span class="p">))</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  abline<span class="p">(</span>h<span class="o">=</span>pnorm<span class="p">(</span><span class="m">-4.5</span><span class="p">),</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_2.png" alt="" /></p>

<p>また，がくっと値が変わっている部分は乱数でかなりレアな値を引いて全体的に値が引きずられたからだと思われる．weitの中から値の非常に大きいものを10個選び出して，その時の推定値の変化を見たのが以下の図になる．青の点線で示した箇所が，weitの値が非常に大きくなったポイントを示している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>abline<span class="p">(</span>v<span class="o">=</span>seq<span class="p">(</span><span class="m">1</span><span class="p">,</span>Nsim<span class="p">)[</span>rank<span class="p">(</span>weit<span class="p">)</span><span class="o">&gt;</span>Nsim<span class="o">-</span><span class="m">10</span><span class="p">],</span> col<span class="o">=</span><span class="s">&quot;blue&quot;</span><span class="p">,</span> lty<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-5_3.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分 その2]]></title>
    <link href="http://yagays.github.com/blog/2012/10/27/imcmr-3-2/"/>
    <updated>2012-10-27T12:33:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/27/imcmr-3-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>練習問題 3.1 正規・コーシー-ベイズ推定量のモンテカルロ積分を2通りの方法で計算する</h3>

<p>正規・コーシー-ベイズ推定量について，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>だとしてモンテカルロ積分を計算する．</p>

<blockquote><p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+%3D+%5Cfrac%7B%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D+%5Cfrac%7B%5Ctheta%7D%7B1%2B%5Ctheta%5E2%7De%5E%7B-%28x-%5Ctheta%29%5E2%2F2%7D+d%5Ctheta%7D%7B%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D+%5Cfrac%7B1%7D%7B1%2B%5Ctheta%5E2%7De%5E%7B-%28x-%5Ctheta%29%5E2%2F2%7D+d%5Ctheta%7D+></p></blockquote>

<p>さて，この式だけだと何のことか全然分からないのだが，式中で消えている係数をしっかり書くと，</p>

<ul>
<li>分子：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%5Ctheta%5Ctimes%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%5E2%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%28x-%5Ctheta%29%5E2%2F2%7Dd%5Ctheta+></li>
<li>分母：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%5E2%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%28x-%5Ctheta%29%5E2%2F2%7Dd%5Ctheta+></li>
</ul>


<p>に分解され，結局はコーシー分布と正規分布の掛け算をしていることになる．模式的に書くと以下のようになる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+%3D+%5Cfrac%7B%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D+%5Ctheta+%5Ctimes+Cauchy+%5Ctimes+Normal%7D%7B%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D+Cauchy+%5Ctimes+Normal%7D+></p>

<p>このように，上と下でそれぞれ積分しているので，モンテカルロ積分の実装においても上下別々に推定値を計算した後に<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の推定値を求める．また，コーシー分布と正規分布を掛けた形となっているため，どちらの分布からも乱数を生成してモンテカルロ積分ができる．</p>

<p>ちなみに，本問題は4章の例4.2（P.107）にも同様の推定量を扱った問題が出てくる．</p>

<h3>a.1 被積分関数をプロットする</h3>

<p>左から順に，</p>

<ul>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の分子の分布</li>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cdelta%28x%29+>の分母の分布</li>
</ul>


<p>を，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>についてプロットしたのが以下の図になる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>delta_num <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>t<span class="p">){</span>t<span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>t<span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="o">*</span>exp<span class="p">(</span><span class="o">-</span><span class="p">(</span>x<span class="o">-</span>t<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="m">2</span><span class="p">)}</span>
</span><span class='line'>delta_den <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>t<span class="p">){</span><span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>t<span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="o">*</span>exp<span class="p">(</span><span class="o">-</span><span class="p">(</span>x<span class="o">-</span>t<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="m">2</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>x in c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">)){</span>
</span><span class='line'>  curve<span class="p">(</span>delta_num<span class="p">,</span> from<span class="o">=</span><span class="m">-10</span><span class="p">,</span> to<span class="o">=</span><span class="m">10</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;numerator : x=&quot;</span><span class="p">,</span>x<span class="p">))</span>
</span><span class='line'>  curve<span class="p">(</span>delta_den<span class="p">,</span> from<span class="o">=</span><span class="m">-10</span><span class="p">,</span> to<span class="o">=</span><span class="m">10</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;denominator : x=&quot;</span><span class="p">,</span>x<span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3.png" alt="" /></p>

<h3>a.2 コーシー・シミュレーションにもとづくモンテカルロ積分を計算する</h3>

<p>コーシー分布から乱数を生成してモンテカルロ積分をシミュレーションする．イテレーションごとの推定値と標準分散のプロットは<a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">例3.3</a>のプロットと同じで，黒の線が推定値の推移，上下の黄色の線が推定値の誤差の範囲となっている．</p>

<p>モンテカルロ積分の結果としては</p>

<ul>
<li>x=0のとき：-0.01243</li>
<li>x=2のとき：1.282</li>
<li>x=4のとき：3.389</li>
</ul>


<p>となった．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>x in c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">)){</span>
</span><span class='line'>  theta <span class="o">&lt;-</span> rcauchy<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>  num <span class="o">&lt;-</span> theta <span class="o">*</span> dnorm<span class="p">(</span>theta<span class="p">,</span> mean<span class="o">=</span>x<span class="p">)</span>
</span><span class='line'>  den <span class="o">&lt;-</span> dnorm<span class="p">(</span>theta<span class="p">,</span> mean<span class="o">=</span>x<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  n <span class="o">&lt;-</span> num<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  d <span class="o">&lt;-</span> den<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span> <span class="c1"># ゼロ除算を起こさないようにしている</span>
</span><span class='line'>  y <span class="o">&lt;-</span> n <span class="o">/</span> d
</span><span class='line'>  estint <span class="o">&lt;-</span> <span class="p">(</span>cumsum<span class="p">(</span>n<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>n<span class="p">)))</span> <span class="o">/</span> <span class="p">(</span>cumsum<span class="p">(</span>d<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>d<span class="p">)))</span>
</span><span class='line'>  esterr <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>y <span class="o">-</span> estint<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>y<span class="p">))</span>
</span><span class='line'>  plot<span class="p">(</span>estint<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;x = &quot;</span><span class="p">,</span>x<span class="p">,</span><span class="s">&quot;, Estimate= &quot;</span><span class="p">,</span>mean<span class="p">(</span>estint<span class="p">)),</span>
</span><span class='line'>       type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span>x<span class="o">-</span><span class="m">1</span><span class="p">,</span>x<span class="o">+</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-1_1.png" alt="" /></p>

<h3>b. 収束する様子を推定値の標準誤差でモニタリングする</h3>

<p>上図の黄色の幅で示してある．</p>

<h3>c. 正規近似によるモンテカルロ積分を計算する</h3>

<p>以下のグラフでは，コーシー乱数のシミュレーションのグラフを重ねてプロットすることで，コーシー乱数を使った場合と正規乱数を使った場合の標準誤差を比較をしている．正規乱数を使ったシミュレーションの結果は，赤とピンクの線で表している．このプロットを見ると，正規乱数を使った場合の方がより誤差が少なく推定値を求められることがわかる．</p>

<ul>
<li>黒＆黄色：コーシー乱数（問題 a.）</li>
<li>赤＆ピンク：正規乱数（問題 c.）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>x in c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">)){</span>
</span><span class='line'>  theta <span class="o">&lt;-</span> rnorm<span class="p">(</span>Nsim<span class="p">,</span> mean<span class="o">=</span>x<span class="p">)</span>
</span><span class='line'>  num <span class="o">&lt;-</span> theta <span class="o">*</span> dcauchy<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>  den <span class="o">&lt;-</span> dcauchy<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  n <span class="o">&lt;-</span> num<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  d <span class="o">&lt;-</span> den<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  y <span class="o">&lt;-</span> n <span class="o">/</span> d
</span><span class='line'>  estint <span class="o">&lt;-</span> <span class="p">(</span>cumsum<span class="p">(</span>n<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>n<span class="p">)))</span> <span class="o">/</span> <span class="p">(</span>cumsum<span class="p">(</span>d<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>d<span class="p">)))</span>
</span><span class='line'>  esterr <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>y <span class="o">-</span> estint<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>y<span class="p">))</span>
</span><span class='line'>  plot<span class="p">(</span>estint<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;x = &quot;</span><span class="p">,</span>x<span class="p">,</span><span class="s">&quot;, Estimate= &quot;</span><span class="p">,</span>mean<span class="p">(</span>estint<span class="p">)),</span>
</span><span class='line'>       type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span>x<span class="o">-</span><span class="m">1</span><span class="p">,</span>x<span class="o">+</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;pink&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;pink&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-1_3.png" alt="" /></p>

<h3>練習問題 3.9</h3>

<p>この問題は，練習問題3.1の続き．</p>

<h4>a.コーシー候補にもとづく受理・棄却アルゴリズムから推定量を計算する</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=X+%5Csim+%5Cmathcal%7BN%7D%28%5Ctheta%2C1%29><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta+%5Csim+%5Cmathcal%7BC%7D%280%2C1%29>において，事後分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%7Cx%29+>は以下のように表される．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%7Cx%29%3D%5Cfrac%7Bp%28x%7C%5Ctheta%29p%28%5Ctheta%29%7D%7Bp%28x%29%7D></p>

<p>ここで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28x%7C%5Ctheta%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%5Cfrac%7B%28x-%5Ctheta%29%5E2%7D%7B2%7D%7D+>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Balign%7D+p%28%5Ctheta%7Cx%29+%3D%26+%5Cfrac%7Bp%28%5Ctheta%29%7D%7Bp%28x%29%7D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%5Cfrac%7B%28x-%5Ctheta%29%5E2%7D%7B2%7D%7D+%5C%5C+%5Cpropto%26+p%28%5Ctheta%29e%5E%7B-%5Cfrac%7B%28x-%5Ctheta%29%5E2%7D%7B2%7D%7D+%5Cend%7Balign%7D+></p>

<p>となる．受理・棄却アルゴリズムにおける目標分布と候補分布は</p>

<ul>
<li>目標分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28%5Ctheta%29+>：<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28%5Ctheta%29e%5E%7B-%28x-%5Ctheta%29%5E2%2F2%7D></li>
<li><p>候補分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28%5Ctheta%29+>：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Cpi%281%2B%5Ctheta%5E2%29%7D></p></li>
<li><p>受理・棄却条件：<img src=http://chart.apis.google.com/chart?cht=tx&chl=U%5Ctimes+M+%5Cleq+%5Cfrac%7Bf%28Y%29%7D%7Bg%28Y%29%7D+>，（<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+%5Cmathcal%7BC%7D%280%2C1%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D>）</p></li>
</ul>


<p>のようになる．受理・棄却アルゴリズムの実験は，練習問題3.1と同様に<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+0%2C2%2C4+>で実行している．以下の図は，受理された乱数のヒストグラムと，その乱数の平均値の値を赤い線で示してある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>x <span class="o">&lt;-</span> rep<span class="p">(</span><span class="m">0</span><span class="p">,</span> Nsim<span class="p">)</span>
</span><span class='line'>M <span class="o">&lt;-</span> pi
</span><span class='line'>f <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>theta<span class="p">){</span> exp<span class="p">(</span><span class="o">-</span><span class="p">(</span>xx<span class="o">-</span>theta<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="m">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span>theta<span class="o">^</span><span class="m">2</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>xx in c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">)){</span>
</span><span class='line'>  <span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:Nsim<span class="p">){</span>
</span><span class='line'>    y <span class="o">&lt;-</span> rcauchy<span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">while</span><span class="p">(</span>runif<span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">*</span>M <span class="o">&gt;</span> f<span class="p">(</span>y<span class="p">)</span><span class="o">/</span>dcauchy<span class="p">(</span>y<span class="p">)){</span>
</span><span class='line'>      y <span class="o">&lt;-</span> rcauchy<span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    x<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> y
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  hist<span class="p">(</span>x<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> nclass<span class="o">=</span><span class="m">150</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;x = &quot;</span><span class="p">,</span>xx<span class="p">))</span>
</span><span class='line'>  abline<span class="p">(</span>v<span class="o">=</span>mean<span class="p">(</span>x<span class="p">),</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-9_1.png" alt="" /></p>

<h4>b. 正規・コーシー-ベイズ推定量のモンテカルロ積分における，分母と分子の乱数の選択</h4>

<p>分母と分子で同じ乱数を使う場合と違う乱数を使う場合で，どのような誤差の影響が出るかを比較する．今回は正規乱数を用いたモンテカルロ積分で試してみる．</p>

<ul>
<li>黒＆黄色：分母と分子で同じ乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta_i+>を使う場合</li>
<li>青＆水色：分母と分子で違う乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Ctheta_i+>を使う場合</li>
</ul>


<p>以下の図を見ると，xの値が大きい時に違う乱数を使う場合の方が標準誤差が大きい．つまり，分母と分子で別々にシミュレーションを行う際にも，乱数から生成する値を統一することで推定値の分散を押さえることができる．逆に言えば，分母と分子で別々の乱数を使うと，分母と分子どちらかが極端な値を引いてしまったときには推定値が変な値を取ってしまう場合がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>x in c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">)){</span>
</span><span class='line'>  theta <span class="o">&lt;-</span> rnorm<span class="p">(</span>Nsim<span class="p">,</span> mean<span class="o">=</span>x<span class="p">)</span>
</span><span class='line'>  theta_2 <span class="o">&lt;-</span> rnorm<span class="p">(</span>Nsim<span class="p">,</span> mean<span class="o">=</span>x<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  num <span class="o">&lt;-</span> theta <span class="o">*</span> dcauchy<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>  den <span class="o">&lt;-</span> dcauchy<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>  num_2 <span class="o">&lt;-</span> theta <span class="o">*</span> dcauchy<span class="p">(</span>theta<span class="p">)</span>
</span><span class='line'>  den_2 <span class="o">&lt;-</span> dcauchy<span class="p">(</span>theta_2<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  n <span class="o">&lt;-</span> num<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  d <span class="o">&lt;-</span> den<span class="p">[</span>den <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  y <span class="o">&lt;-</span> n <span class="o">/</span> d
</span><span class='line'>  n_2 <span class="o">&lt;-</span> num_2<span class="p">[</span>den_2 <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  d_2 <span class="o">&lt;-</span> den_2<span class="p">[</span>den_2 <span class="o">!=</span> <span class="m">0</span><span class="p">]</span>
</span><span class='line'>  y_2 <span class="o">&lt;-</span> n_2 <span class="o">/</span> d_2
</span><span class='line'>
</span><span class='line'>  estint <span class="o">&lt;-</span> <span class="p">(</span>cumsum<span class="p">(</span>n<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>n<span class="p">)))</span> <span class="o">/</span> <span class="p">(</span>cumsum<span class="p">(</span>d<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>d<span class="p">)))</span>
</span><span class='line'>  esterr <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>y <span class="o">-</span> estint<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>y<span class="p">))</span>
</span><span class='line'>  estint_2 <span class="o">&lt;-</span> <span class="p">(</span>cumsum<span class="p">(</span>n_2<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>n_2<span class="p">)))</span> <span class="o">/</span> <span class="p">(</span>cumsum<span class="p">(</span>d_2<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>d_2<span class="p">)))</span>
</span><span class='line'>  esterr_2 <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>y_2 <span class="o">-</span> estint_2<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:length<span class="p">(</span>y_2<span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  plot<span class="p">(</span>estint<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;&quot;</span> <span class="p">,</span>type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;black&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span>x<span class="o">-</span><span class="m">1</span><span class="p">,</span>x<span class="o">+</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>estint<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>  plot<span class="p">(</span>estint_2<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Iterations&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;blue&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span>x<span class="o">-</span><span class="m">1</span><span class="p">,</span>x<span class="o">+</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>  lines<span class="p">(</span>estint_2<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr_2<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  lines<span class="p">(</span>estint_2<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr_2<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;skyblue&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_3-9_2.png" alt="" /></p>

<h3>参考</h3>

<ul>
<li><a href="http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html">http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html</a></li>
</ul>


<p>1章から3章途中までの解説とRのコードがある．今回の作図に関しては，このページのBook Notesを参考にさせていただいた．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ワンクリック―ジェフ・ベゾス率いるAmazonの隆盛」読了]]></title>
    <link href="http://yagays.github.com/blog/2012/10/26/review-one-click/"/>
    <updated>2012-10-26T01:12:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/26/review-one-click</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4822249158" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>Kindleに至るまでの小売時代のアマゾンを総括する1冊</h3>

<p>「Aamazonは一体何の会社なのか」という問いに，ある人は本屋と答えるだろうし，またある人は何でも買えるネットショッピングサイトだと答えるだろう．インターネットの技術屋に聞けばAmazonはクラウドやAWSだと答えるだろうし，最近ではAmazonといえばKindleだと答える人が多いだろう．ジェフ・ベゾスが起こしたAmazonという会社は，今やインターネットでのショッピングのサービスを提供するという枠を乗り越え，AppleやMicrosoftなどに続いて不動の地位とブランドを獲得している．本書は，そのようなAmazonとジェフ・ベゾスが辿ってきた歴史を紐解いて，いかにAmazonが成長しジェフ・ベゾスが成功に導いてきたかに関する本である．</p>

<p>本書はジェフ・ベゾスの人生を軸に書かれている．まずはじめに，Amazonが成功するに至った2つの要因である</p>

<ul>
<li>顧客を第一に考えること</li>
<li>長期的な視点をもって決断をすることに</li>
</ul>


<p>の2つにまつわる話が描かれ，彼の作り上げた作品が紹介される．時には消費者の利便性を最大限に引き出すようなサービスを提供し，時には非情なまでに自動化されたシステムを作り上げる．輝かしい成功の影で行われている生々しい特許論争に関しても取り上げられる．そのようなAmazonをすべて統括してきたジェフ・ベゾスという人物が，いかにアントレプレナーとして優れており，その才能を発揮してきたかということが，彼の幼少時代から順に語られていく．彼はすぐにアントレプレナーとして頭角を現したわけでは無かったが，彼が大学を出た後に入った会社では非情に優れた技術者として出世していったという逸話や，インターネットを使った書籍販売というアイデアを思いつくまでの経緯などからも，Amazonに繋がる一連の流れをうかがい知ることができる．Amazonの会社を起こしてからは，今からは想像も出来無いようなベンチャーとしての苦労話や逸話が出てくる．そして最後の数章では，現在のAmazonのイノベーションの中心とも言えるKindleの誕生とその戦略にフォーカスが移る．</p>

<p>個人的な感想としては，興味はやはりAmazonが現在推し進めているKindleやAWSに集中してしまう．ネットショッピングとしてのAmazonはもはやネットに当然のようにあるものとして，空気のような必要不可欠なものであり，普段はその重要性や革新性に意識を向けないような存在になってしまった．それはまさに，AppleがiPodを開発して音楽業界に進出したときのような時代の分かれ目を感じさせる．そういった現状を踏まえると，本書は小売時代のAmazonという企業の歴史を総括する1冊として上手く収まっているといえる．その反面，本書におけるKindleの扱いはどうしても付け加え感が拭えず，本書は全体的に伝記的な作品とも言いにくくマーケティングや経営戦略的な部分も薄いといった難点はあるものの，これからの電子書籍戦争を見守る中でAmazonの立ち位置が分かりやすく示されているところはとても評価できる部分だ．本書で見られるジェフ・ベゾスの一貫した理念を考えると，書籍から電子書籍へと媒体が変わったとしても恐らく根本の部分では何も変わらないのだろう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分]]></title>
    <link href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/"/>
    <updated>2012-10-25T20:33:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/25/imcmr-3-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：乱数を利用して積分を数値的に求める</h3>

<p>モンテカルロ積分とは，乱数を利用して単変量や多変数の積分を近似し，解析的に解けない問題を数値的に解くという手法である．これは2章で示したように，任意の分布に従う乱数を理論上無限に生成できるからこそ成り立つ手法であり，本手法はi.i.dを前提とした大数の法則や中心極限定理のような確率論に落としこんで解析している．具体的なモンテカルロ法の利用例としては確率分布を積分といったことが挙げられ，ベイズなどに限らず確率分布を仮定するような統計手法などにおいて必要となる．</p>

<h3>例 3.3 モンテカルロ積分の具体例</h3>

<p>図の上半分は<img src=http://chart.apis.google.com/chart?cht=tx&chl=h%28x%29+%3D+%5B%5Ccos%2850x%29+%2B+%5Csin%2820x%29+%5D%5E2+>を0から1の間で図示したもの．モンテカルロ積分ではこの曲線の下側の面積を求めることになる．
図の下半分は，実際にモンテカルロ積分のシミュレーションをしたもの．横軸がシミュレーション回数（サンプル数m）で，縦軸が経験平均<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7Bh%7D_m+%3D+%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bj%3D1%7D%5E%7Bm%7Dh%28x_j%29+>を示したもの．黒の線が平均値の推移，上下の黄色の線が推定標準誤差に基づく信頼幅，赤の直線がRのintegrate関数で求めた積分値を示している．この図から，シミュレーション回数を重ねるごとに数値的に求めた値が実際の積分値に収束していく様子がわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>h <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">){(</span>cos<span class="p">(</span><span class="m">50</span><span class="o">*</span>x<span class="p">)</span> <span class="o">+</span> sin<span class="p">(</span><span class="m">20</span><span class="o">*</span>x<span class="p">))</span><span class="o">^</span><span class="m">2</span><span class="p">}</span>
</span><span class='line'>par<span class="p">(</span>mar<span class="o">=</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">),</span> mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>h<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Function&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>integrate<span class="p">(</span>h<span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>x <span class="o">&lt;-</span> h<span class="p">(</span>runif<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>estint <span class="o">&lt;-</span> cumsum<span class="p">(</span>x<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:<span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'>esterr <span class="o">&lt;-</span> sqrt<span class="p">(</span>cumsum<span class="p">((</span>x<span class="o">-</span>estint<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">1</span>:<span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>estint<span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Mean and error range&quot;</span><span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> ylim<span class="o">=</span>mean<span class="p">(</span>x<span class="p">)</span><span class="o">+</span><span class="m">20</span><span class="o">*</span>c<span class="p">(</span><span class="o">-</span>esterr<span class="p">[</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">],</span> esterr<span class="p">[</span><span class="m">10</span><span class="o">^</span><span class="m">4</span><span class="p">]))</span>
</span><span class='line'>lines<span class="p">(</span>estint<span class="o">+</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>lines<span class="p">(</span>estint<span class="o">-</span><span class="m">2</span><span class="o">*</span>esterr<span class="p">,</span> col<span class="o">=</span><span class="s">&quot;gold&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>h<span class="o">=</span>integrate<span class="p">(</span>h<span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)$</span>value<span class="p">,</span>lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp3_1.png" alt="" /></p>

<h3>例 3.4 正規分布のモンテカルロ積分における値の精度と効率</h3>

<p>「裾」と呼ばれる部分は正規分布において釣鐘型の山の頂点から遠く離れた部分のことを指しており，正規分布の平均から外れるということは起こる確率がきわめて低い部分である．そのため，正規乱数を基にしたモンテカルロ積分においては，山の頂点に近い部分の値は乱数でよく引きあてるので数は十分なのだが，裾の部分の「値が大きい/小さい」値は乱数でなかなか引き当てることができない．精度に大きな影響を与える部分でありながらもシミュレーションを重ねないと十分な数を得ることができないため，古典的なモンテカルロ積分の方法で精度を上げるためには，試行回数を多くしなければならない．</p>

<p>以下の実験では，実際に有効数字4ケタで正確な数値を出すために，10<sup>8</sup> 回ものシミュレーションを行なっている．最終的な表3.1は，行が試行回数，列が<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+>のときのxに対応している．一番下の行の値がboundという変数のそれぞれ値と同じになっていることから，10<sup>8</sup> もの試行回数が必要であることがわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">10</span><span class="o">^</span><span class="m">8</span><span class="p">)</span>
</span><span class='line'>bound <span class="o">&lt;-</span> qnorm<span class="p">(</span>c<span class="p">(</span><span class="m">0.5</span><span class="p">,</span> <span class="m">0.75</span><span class="p">,</span> <span class="m">0.8</span><span class="p">,</span> <span class="m">0.9</span><span class="p">,</span> <span class="m">0.95</span><span class="p">,</span> <span class="m">0.99</span><span class="p">,</span> <span class="m">0.999</span><span class="p">,</span> <span class="m">0.9999</span><span class="p">))</span>
</span><span class='line'>res <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span> ncol<span class="o">=</span><span class="m">8</span><span class="p">,</span> nrow<span class="o">=</span><span class="m">7</span><span class="p">)</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>i in <span class="m">2</span>:<span class="m">8</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">for</span><span class="p">(</span>j in <span class="m">1</span>:<span class="m">8</span><span class="p">)</span>
</span><span class='line'>    res<span class="p">[</span>i<span class="o">-</span><span class="m">1</span><span class="p">,</span> j<span class="p">]</span> <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">[</span><span class="m">1</span>:<span class="m">10</span><span class="o">^</span>i<span class="p">]</span> <span class="o">&lt;</span> bound<span class="p">[</span>j<span class="p">])</span>
</span><span class='line'>matrix<span class="p">(</span>as.numeric<span class="p">(</span>format<span class="p">(</span>res<span class="p">,</span> digi<span class="o">=</span><span class="m">4</span><span class="p">)),</span> ncol<span class="o">=</span><span class="m">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># &gt; matrix(as.numeric(format(res, digi=4)), ncol=8)</span>
</span><span class='line'><span class="c1"># [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]</span>
</span><span class='line'><span class="c1"># [1,] 0.5200 0.7600 0.8000 0.9300 0.9800 1.0000 1.0000 1.0000</span>
</span><span class='line'><span class="c1"># [2,] 0.4760 0.7400 0.7880 0.8980 0.9550 0.9950 1.0000 1.0000</span>
</span><span class='line'><span class="c1"># [3,] 0.4980 0.7477 0.7967 0.8981 0.9480 0.9889 0.9993 0.9999</span>
</span><span class='line'><span class="c1"># [4,] 0.4994 0.7503 0.7996 0.8992 0.9504 0.9899 0.9989 0.9999</span>
</span><span class='line'><span class="c1"># [5,] 0.4999 0.7503 0.8002 0.9001 0.9501 0.9899 0.9990 0.9999</span>
</span><span class='line'><span class="c1"># [6,] 0.4999 0.7500 0.8000 0.9001 0.9500 0.9900 0.9990 0.9999</span>
</span><span class='line'><span class="c1"># [7,] 0.5000 0.7500 0.8000 0.9000 0.9500 0.9900 0.9990 0.9999</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 練習問題]]></title>
    <link href="http://yagays.github.com/blog/2012/10/23/imcmr-2-3/"/>
    <updated>2012-10-23T08:57:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/23/imcmr-2-3</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>練習問題 2.18</h3>

<h3>a. f(x)とMg(x)をプロットする</h3>

<p>定数Mは例2.7のようにoptimize()関数で求めている．以下の図はfとgの分布を図示したもので，黒い曲線fに対して，青い曲線Mg(x)が全体を覆い被さるようになっていることがわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>f <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">){</span>exp<span class="p">(</span><span class="o">-</span>x<span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="m">2</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span>sin<span class="p">(</span><span class="m">6</span><span class="o">*</span>x<span class="p">)</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="m">3</span><span class="o">*</span>cos<span class="p">(</span>x<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="o">*</span>sin<span class="p">(</span><span class="m">4</span><span class="o">*</span>x<span class="p">)</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="m">1</span><span class="p">)}</span>
</span><span class='line'>g <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">){</span>exp<span class="p">(</span><span class="o">-</span>x<span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="m">2</span><span class="p">)</span><span class="o">/</span>sqrt<span class="p">(</span><span class="m">2</span><span class="o">*</span>pi<span class="p">)}</span>
</span><span class='line'>M <span class="o">&lt;-</span> optimize<span class="p">(</span>f<span class="o">=</span><span class="kr">function</span><span class="p">(</span>x<span class="p">){</span>f<span class="p">(</span>x<span class="p">)</span><span class="o">/</span>g<span class="p">(</span>x<span class="p">)},</span> interval<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span>maximum<span class="o">=</span><span class="k-Variable">T</span><span class="p">)$</span>objective
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>f<span class="p">(</span>x<span class="p">),</span>from<span class="o">=</span><span class="m">-5</span><span class="p">,</span>to<span class="o">=</span><span class="m">5</span><span class="p">,</span>ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>M<span class="o">*</span>g<span class="p">(</span>x<span class="p">),</span>add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span>col<span class="o">=</span><span class="s">&quot;blue&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_7.png" alt="" /></p>

<h3>b. 受理・棄却アルゴリズムを使ってfから2500個の乱数を生成する</h3>

<p>ここで標準正規分布からの乱数を使うのは，g(x)が標準正規密度だから（P.59の受理・棄却法のアルゴリズムの1.にある<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+g+>の部分に該当する）．</p>

<p>この問題では2500個の<strong>受理された</strong>乱数が欲しいので，P.61のコードを真似て作成している．ただし，このコードは少々効率が悪く，決められた数の乱数を作ったらループが終わりというものではない（受理確率を元にして多めに作ってる）ので，ヒストグラムとして図示する際には2500個のみを取り出して作図している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">2500</span>
</span><span class='line'>x <span class="o">&lt;-</span> <span class="kc">NULL</span>
</span><span class='line'><span class="kr">while</span><span class="p">(</span>length<span class="p">(</span>x<span class="p">)</span> <span class="o">&lt;</span> Nsim<span class="p">){</span>
</span><span class='line'>  y <span class="o">&lt;-</span> rnorm<span class="p">(</span>Nsim<span class="o">*</span>M<span class="p">)</span>
</span><span class='line'>  x <span class="o">&lt;-</span> c<span class="p">(</span>x<span class="p">,</span> y<span class="p">[</span>runif<span class="p">(</span>Nsim<span class="o">*</span>M<span class="p">,</span><span class="m">0</span><span class="p">,</span>M<span class="p">)</span> <span class="o">*</span> g<span class="p">(</span>y<span class="p">)</span> <span class="o">&lt;</span> f<span class="p">(</span>y<span class="p">)</span> <span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>hist<span class="p">(</span>x<span class="p">[</span><span class="m">1</span>:Nsim<span class="p">],</span>freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span>nclass<span class="o">=</span><span class="m">150</span><span class="p">,</span>main<span class="o">=</span><span class="s">&quot;Nsim = 2500&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>f<span class="p">(</span>x<span class="p">)</span><span class="o">/</span>integrate<span class="p">(</span>f<span class="p">,</span><span class="o">-</span>Inf<span class="p">,</span>Inf<span class="p">)$</span>value<span class="p">,</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># curveの中のintegrateに関しては後述(本問のc.)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_8.png" alt="" /></p>

<p>概ねfの分布に沿った乱数が生成されているようだ．乱数が2500個だけでは少し不明瞭のため，Nsimの数を10<sup>4</sup> にして再試したのが下の図．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_9.png" alt="" /></p>

<h3>c. シミュレーションから得られた受理率から正規化定数を求める</h3>

<p>P.60にあるように，受理確率は基本的に1/Mだけれども，正規化されていない関数に関しては定数CがMに吸収されているので注意が必要となる．今回の場合，シミュレーションから求めた受理確率rを使うことで，以下の式から正規化定数を近似することができる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=r+%3D+%5Cfrac%7B1%7D%7BC+%5Ctimes+M%7D+></p>

<p>今回の場合，Mは10.94，rは0.54となったので，Cは0.17程度だと見積もった．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>x <span class="o">&lt;-</span> <span class="kc">NULL</span> <span class="c1"># xは受理した乱数</span>
</span><span class='line'>z <span class="o">&lt;-</span> <span class="kc">NULL</span> <span class="c1"># zは生成した乱数すべて</span>
</span><span class='line'><span class="kr">while</span><span class="p">(</span>length<span class="p">(</span>x<span class="p">)</span> <span class="o">&lt;</span> Nsim<span class="p">){</span>
</span><span class='line'>  y <span class="o">&lt;-</span> rnorm<span class="p">(</span>Nsim<span class="o">*</span>M<span class="p">)</span>
</span><span class='line'>  x <span class="o">&lt;-</span> c<span class="p">(</span>x<span class="p">,</span> y<span class="p">[</span>runif<span class="p">(</span>Nsim<span class="o">*</span>M<span class="p">,</span><span class="m">0</span><span class="p">,</span>M<span class="p">)</span> <span class="o">*</span> g<span class="p">(</span>y<span class="p">)</span> <span class="o">&lt;</span> f<span class="p">(</span>y<span class="p">)</span> <span class="p">])</span>
</span><span class='line'>  z <span class="o">&lt;-</span> c<span class="p">(</span>z<span class="p">,</span> y<span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>r <span class="o">&lt;-</span> length<span class="p">(</span>x<span class="p">)</span><span class="o">/</span>length<span class="p">(</span>z<span class="p">)</span>
</span><span class='line'>C <span class="o">&lt;-</span> <span class="m">1</span><span class="o">/</span><span class="p">(</span>M<span class="o">*</span>r<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="o">&gt;</span> M<span class="p">;</span> r<span class="p">;</span> C
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">10.94031</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.5369048</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.1702445</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて，答え合わせ(?)だが，正規化定数は単純にfの<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5B-%5Cinfty%2C%5Cinfty%5D>の積分を求めることによって計算することができる．これにはRのintegrate()関数を使って-infからinfまでを計算すればよい．確率分布の定義から，これが1になるように正規化定数を定めれば良いということで，以下のように計算した結果，0.1696543となった．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="o">&gt;</span> <span class="m">1</span><span class="o">/</span>integrate<span class="p">(</span>f<span class="p">,</span><span class="o">-</span>Inf<span class="p">,</span>Inf<span class="p">)$</span>value
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.1696543</span>
</span></code></pre></td></tr></table></div></figure>


<h3>練習問題 2.19 二重指数分布が候補分布の受理・棄却アルゴリズムにおいて標準正規分布から乱数を生成する際のMとg(x)の最適化</h3>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D+%5Cexp%28-%5Cfrac%7Bx%5E2%7D%7B2%7D%29+%5C%5C+g%28x%29+%3D+%5Cfrac%7B%5Calpha%7D%7B2%7D+%5Cexp%28-%5Calpha+%7Cx%7C%29></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%2Fg+%3D+%5Cfrac%7B%5Csqrt%7B2%2F%5Cpi%7D%7D%7B%5Calpha%7D+%5Cexp%28%5Calpha%7Cx%7C-%5Cfrac%7Bx%5E2%7D%7B2%7D%29+>より，上界Mを取るときのx_maxの値を調べるには，とりあえずxで微分して0になるときの値を求めれば良い．expの部分を微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28%5Calpha+-+x%29+>みたいな項が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Calpha+>（厳密には<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Cpm+%5Calpha+>）．</p>

<p>次に，受理率を最適化するということは1/Mの値を大きくすれば良いので，結局はMの値の最大値を求めれば良い．<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Calpha+>のときのMを<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>に関して微分して0になるときの値ということで計算していくと
<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B%28%5Calpha%5E2-1%29%5Cexp%28%5Calpha%5E2%2F2%29%7D%7B%5Calpha%5E2%7D+>みたいな項が出てくるので，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+1+>の時にMが最大値を取り，受理率が最適化される．</p>

<h3>練習問題 2.22 切断正規分布から正規乱数を生成する</h3>

<h4>a. 切断正規分布から乱数を生成する</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>library<span class="p">(</span>msm<span class="p">)</span> <span class="c1"># dtnorm()のため</span>
</span><span class='line'>mu <span class="o">&lt;-</span> <span class="m">0</span>
</span><span class='line'>sigma <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>a in c<span class="p">(</span><span class="m">-2.32</span><span class="p">,</span> <span class="m">-0.84</span><span class="p">,</span> <span class="m">-0.67</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.67</span><span class="p">,</span> <span class="m">0.84</span><span class="p">,</span> <span class="m">2.32</span><span class="p">)){</span>
</span><span class='line'>  N <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>  X <span class="o">&lt;-</span> rep<span class="p">(</span><span class="m">0</span><span class="p">,</span>N<span class="p">)</span>
</span><span class='line'>  <span class="kr">for</span><span class="p">(</span>i in <span class="m">1</span>:N<span class="p">){</span>
</span><span class='line'>    z <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">1</span><span class="p">,</span> mean<span class="o">=</span>mu<span class="p">,</span> sd<span class="o">=</span>sigma<span class="p">)</span>
</span><span class='line'>    <span class="kr">while</span><span class="p">(</span>z <span class="o">&lt;</span> a<span class="p">){</span>
</span><span class='line'>    z <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">1</span><span class="p">,</span> mean<span class="o">=</span>mu<span class="p">,</span> sd<span class="o">=</span>sigma<span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  X<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> z
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  hist<span class="p">(</span>X<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> nclass<span class="o">=</span><span class="m">150</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Truncated Normal Distribution: a = &quot;</span><span class="p">,</span>a<span class="p">))</span>
</span><span class='line'>  curve<span class="p">(</span>dtnorm<span class="p">(</span>x<span class="p">,</span> mean<span class="o">=</span>mu<span class="p">,</span> sd<span class="o">=</span>sigma<span class="p">,</span> lower<span class="o">=</span>a<span class="p">,</span> upper<span class="o">=</span>Inf<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_10.png" alt="" /></p>

<h4>b. シミュレーションので受理する確率を求める</h4>

<p>上で示したアルゴリズムで考える．z &lt; aならアタリ，それ以外ならハズレというようなときにどれだけ数を撃てばz&lt;aに入るかということを考えると，正規分布のz &lt; aの面積を求めればいいことがわかる．なお，ここで出てくる<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28x%29+>という関数は定義されていないが，以下のような累積標準正規分布（本書P.78に出てくる）のことだと思われる．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28t%29+%3D+%5Cint_%7B-%5Cinfty%7D%5E%7Bt%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-y%5E2%2F2%7Ddy+></p>

<p>この形式になるように，aからの累積正規分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28x%7C%5Cmu%2C+%5Csigma%5E2%2C+a%29+%5Csim++%5Cint_%7Ba%7D%5E%7B%5Cinfty%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7De%5E%7B-%5Cfrac%7B%28x-%5Cmu%29%5E2%7D%7B2%5Csigma%5E2%7D%7Ddx>を変形していけばよい．</p>

<p>ここで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v+%3D+-%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D+>とおくと，<img src=http://chart.apis.google.com/chart?cht=tx&chl=dv+%3D+-%5Cfrac%7Bdx%7D%7B%5Csigma%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x%3Aa+%5Crightarrow+%5Cinfty+> のとき，<img src=http://chart.apis.google.com/chart?cht=tx&chl=v%3A-%5Cinfty+%5Crightarrow+%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D+>をとる．よって，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=F%28v%7C%5Cmu%2C%5Csigma%5E2%2Ca%29+%3D+%5Cint_%7B%5Cinfty%7D%5E%7B%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7De%5E%7B-%5Cfrac%7Bv%5E2%7D%7B2%7D%7Ddv+%3D+%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>  となる．</p>

<p>また，aの値が裾にある（値が大きくなる）と，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CPhi%28%5Cfrac%7B%5Cmu-a%7D%7B%5Csigma%7D%29+>の値が小さくなるので，シミュレーション回数が多くなる．</p>

<h4>c. 切断正規分布の乱数を正規分布から生成することを考える</h4>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%5E2%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%5E2%7D%7B2%7D%29+></li>
</ul>


<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%5E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq+z%7D%7D%7B%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7B%28x-%5Cbar%7B%5Cmu%7D%29%5E2%7D%7B2%7D%29%7D%5C%5C+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-x%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%5E2%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+></p>

<p>となり候補分布の制約を満たすので，正規候補にもとづく受理・棄却アルゴリズムは切断正規分布から乱数を生成するために使える．</p>

<p>次に，このときの最適なMを考える．x=aにおいて<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D+%3D+%5Csqrt%7B2%5Cpi%7D%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%5E2%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+>より，この式を<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D+>で微分すると</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28a%29%7D%7Bg%28a%29%7D%5CBigr%29%27+%3D+%5Csqrt%7B2%5Cpi%7D%28-a%2B%5Cbar%7B%5Cmu%7D%29%5Cexp%28-a%5Cbar%7B%5Cmu%7D%2B%5Cfrac%7B1%7D%7B2%7D%5Cbar%7B%5Cmu%7D%5E2%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+></p>

<p>となるので，Mは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbar%7B%5Cmu%7D%3Da+>のとき最適値をとる．</p>

<h3>d. 候補分布に指数分布を使うことを考える</h3>

<ul>
<li>目標分布；<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%5E2%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+></li>
<li>候補分布：<img src=http://chart.apis.google.com/chart?cht=tx&chl=g_%7B%5Calpha%7D%28z%29%3D%5Calpha+e%5E%7B-%5Calpha%28z-a%29%7D%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D+></li>
</ul>


<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Balign%7D%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D%26%3D%5Cfrac%7B%5Cexp%28-%28x-%5Cmu%29%2F2%5Csigma%5E2%29%5Cmathbb%7BI%7D_%7Bx%5Cgeq+a%7D%7D%7B%5Calpha+e%5E%7B-%5Calpha%28z-a%29%7D%7D%5C%5C%26%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28-%5Cfrac%7Bx%5E2%7D%7B2%7D%2B%5Calpha%28x-a%29%29%5Cmathbb%7BI%7D_%7Bx+%5Cgeq+a%7D%5Cend%7Balign%7D+></p>

<p>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D+%5Cpropto+e%5E%7B%5Calpha%28x-a%29%7De%5E%7B-z%5E2%2F2%7D+></p>

<p>となる．上式を前と同じように微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28-x%2B%5Calpha%29+>が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha+>のとき最大値を取り，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28%5Calpha%5E2%2F2-%5Calpha+a%29+>で極限が与えられる．</p>

<p>次に，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に正当な候補密度になることを導く．f/gの比が0より大きいことを示せば良いのだが，上式を見ると結局expの外側の<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Calpha%7D+>，つまり<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>を調べないといけない．ということで，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+>で微分して最適値の時の値を求める．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha>のとき<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D+%3D+%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cexp%28%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D-%5Calpha+a%29+>なので，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5CBigl%28%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D%5CBigr%29%27+%3D+-%5Cfrac%7B1%7D%7B%5Calpha%5E2%7D%5Cexp%28%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D-%5Calpha+a%29%2B%5Cfrac%7B1%7D%7B%5Calpha%7D%28%5Calpha-a%29%5Cexp%28%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D-%5Calpha+a%29+><img src=http://chart.apis.google.com/chart?cht=tx&chl=%3D%5Cfrac%7B1%7D%7B%5Calpha%7D%5Cbigl%28-%5Cfrac%7B1%7D%7B%5Calpha%5E2%7D%2B%28%5Calpha-a%29%5Cbigr%29%5Cexp%28%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D-%5Calpha+a%29></p>

<p>より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5Cfrac%7B1%7D%7B%5Calpha%5E2%7D%2B%28%5Calpha-a%29+%3D+0+></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha%5E2+-+a+%5Calpha+-+1+%3D+0+></p>

<p>よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%5E2+%2B+4%7D%7D%7B2%7D+>となる．</p>

<p>じゃあプラスかマイナスかどっちなんだという話になるのだが，ここで<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%5Cgeq+a+>という前提条件を使うと，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%5Cpm+%5Csqrt%7Ba%5E2+%2B+4%7D%7D%7B2%7D+%5Cgeq+a+></p>

<p>が成り立つ． <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Csqrt%7Ba%5E2+%2B+4%7D+>というのはaよりちょっとだけ大きい数なので，上式を満たすaは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cfrac%7Ba+%2B+%5Csqrt%7Ba%5E2+%2B+4%7D%7D%7B2%7D+>となり，この式は常に正である．よって，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Calpha+>の場合に，正当な候補密度になる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 受理・棄却法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/22/imcmr-2-2/"/>
    <updated>2012-10-22T21:38:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/22/imcmr-2-2</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：逆変換法や一般変換法で生成できない分布から乱数を生成する</h3>

<p>逆変換法や一般変換法では，一様分布から生成される乱数に何らかの関数を通すことで任意の乱数を生成してきた．しかし，このような直接的な方法で乱数を生成できない分布の場合には，間接的な方法によって乱数を生成する必要がある．そのような場合には，本来求めたい乱数の分布とは違った分布から乱数を生成し，それが受理できる値か棄却できる値かを選り分けることで，間接的に求めたい分布から生成された乱数を表現する．</p>

<ul>
<li>目標密度（target）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=f+></li>
<li>手段密度・候補密度（candidate）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=g+></li>
</ul>


<p>この受理・棄却法では1つの乱数の値<img src=http://chart.apis.google.com/chart?cht=tx&chl=X+>につき，2つの乱数<img src=http://chart.apis.google.com/chart?cht=tx&chl=Y+%5Csim+g+>と<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>を考える．前者は候補密度から乱数を生成したもの，後者は受理・棄却に用いる一様乱数．この2つの乱数を，以下の式にあてはめて受理するか棄却するかを判断する．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Cleq+%5Cfrac%7Bf%28Y%29%7D%7BM+%5Ctimes+g%28Y%29%7D+></p>

<p>ここで登場するMは提案分布と候補密度から見積もった定数で，候補密度の制約の中で登場する値．基本的にある値より大きければ何でも良いのだが，シミュレーションの効率に関わってくる．これが小さい値であればあるほど，シミュレーションで棄却される乱数の候補が少なくて済むので，結果として効率が良くなる．最適なMは以下の式で与えられる（<a href="http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf">UserR!資料pdf</a> p.51）．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=M+%3D+%5Csup_x+%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D+></p>

<br />


<h3>例 2.7, 例2.8 ベータ分布の乱数を生成する(2通り)</h3>

<p>黒の点が一様分布/ベータ分布から生成した乱数，赤の点がアルゴリズムで受理された乱数（今回求めたかった乱数），青の線が極限<img src=http://chart.apis.google.com/chart?cht=tx&chl=M+g%28x%29+>．</p>

<p>受理・棄却の条件</p>

<ul>
<li>例2.7: <img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%3C+f%28Y%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2CM%5D%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=f+%5Csim+%5Cmathcal%7BBe%282.7%2C6.3%29%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g+%3A+1+>

<ul>
<li>ここでgは何らかの分布ではなく「gは1に等しい」としているので，上式の1つ目の式の中にgが含まれていない．この場合，gで生成される乱数は一様乱数．</li>
<li>一様分布のグラフを考えてみるとわかりやすい．区間[0,1]の間で常に値1を取る関数なので，上では1に等しいと表している．</li>
</ul>
</li>
<li>例2.8: <img src=http://chart.apis.google.com/chart?cht=tx&chl=Ug%28Y%29+%3C+f%28Y%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2CM%5D%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=f+%5Csim+%5Cmathcal%7BBe%282.7%2C6.3%29%7D+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g+%5Csim+%5Cmathcal%7BBe%282%2C6%29%7D+></li>
</ul>


<p>例2.8における「提案分布」という言葉は，新しく設定した候補分布のこと．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># 例2.7</span>
</span><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">2500</span>
</span><span class='line'>a <span class="o">&lt;-</span> <span class="m">2.7</span>
</span><span class='line'>b <span class="o">&lt;-</span> <span class="m">6.3</span>
</span><span class='line'>M <span class="o">&lt;-</span> <span class="m">2.67</span>
</span><span class='line'>u <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">,</span> max<span class="o">=</span>M<span class="p">)</span>
</span><span class='line'>y <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>x <span class="o">&lt;-</span> y<span class="p">[</span>u <span class="o">&lt;</span> dbeta<span class="p">(</span>y<span class="p">,</span>a<span class="p">,</span>b<span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>y2 <span class="o">&lt;-</span> rbeta<span class="p">(</span>Nsim<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">)</span>
</span><span class='line'>u2 <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">,</span> max<span class="o">=</span><span class="m">1.67</span><span class="p">)</span> <span class="o">*</span> dbeta<span class="p">(</span>y2<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">)</span>
</span><span class='line'>x2 <span class="o">&lt;-</span> y2<span class="p">[</span>u2 <span class="o">&lt;</span> dbeta<span class="p">(</span>y2<span class="p">,</span><span class="m">2.7</span><span class="p">,</span><span class="m">6.3</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>plot<span class="p">(</span>y<span class="p">,</span> u<span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1.0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2.8</span><span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;u.g(y)&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>x<span class="p">,</span> u<span class="p">[</span>u <span class="o">&lt;</span> dbeta<span class="p">(</span>y<span class="p">,</span>a<span class="p">,</span>b<span class="p">)],</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1.0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">2.8</span><span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;u.g(y)&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span>a<span class="p">,</span>b<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>abline<span class="p">(</span>h<span class="o">=</span>M<span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;blue&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>plot<span class="p">(</span>y2<span class="p">,</span> u2<span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1.0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;u.g(y)&quot;</span><span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>new<span class="o">=</span><span class="k-Variable">T</span><span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>x2<span class="p">,</span> u2<span class="p">[</span>u2 <span class="o">&lt;</span> dbeta<span class="p">(</span>y2<span class="p">,</span><span class="m">2.7</span><span class="p">,</span><span class="m">6.3</span><span class="p">)],</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1.0</span><span class="p">),</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;u.g(y)&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">2.7</span><span class="p">,</span><span class="m">6.3</span><span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">)</span><span class="o">*</span><span class="m">1.67</span><span class="p">,</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;blue&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_6.png" alt="" /></p>

<h4>上の図の解釈</h4>

<p>乱数の値が赤の分布の線より中に入れば受理となる．候補として生成される乱数は青の分布の線の中でランダムに生成されるので，赤と青の線の間の部分が棄却された乱数になる．この赤と青の線の間の部分が少なければ少ないほど，この受理・棄却法の効率も良くなる．じゃあ効率を良くするにはどうすればいいかというと，いじることのできるポイントは2つ</p>

<ul>
<li>提案分布gを良い感じにする（青の線の形を決める）</li>
<li>定数Mを出来るだけ小さくする（青の線の高さを決める，fとgの間の幅を決める）</li>
</ul>


<p>この受理・棄却法の前提として<strong>目標分布（赤の線）から乱数は生成できない</strong>のだから，100％受理されるようなシミュレーションは理論上不可能．だから，乱数が生成できるような候補分布を使って，定数Mを定めて，間接的に乱数を発生させようということ．</p>

<br />


<h3>練習問題 2.7 目標分布fと候補密度gがともにベータ分布だった場合に，どのような制約があるのか</h3>

<h4><img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>が必要なことの証明</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29++%3D+%5Cfrac%7B%5CGamma%28%5Calpha%2B%5Cbeta%29%7D%7B%5CGamma%28%5Calpha%29%5CGamma%28%5Cbeta%29%7D+x%5E%7B%5Calpha-1%7D+%281-x%29%5E%7B%5Cbeta-1%7D+%5Csim+%5Cmathcal%7BBe%7D%28%5Calpha%2C%5Cbeta%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28x%29++%3D+%5Cfrac%7B%5CGamma%28a%2Bb%29%7D%7B%5CGamma%28a%29%5CGamma%28b%29%7D+x%5E%7Ba-1%7D+%281-x%29%5E%7Bb-1%7D+%5Csim+%5Cmathcal%7BBe%7D%28a%2Cb%29+>
より</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%29%7D++%3D+%5Cfrac%7B%5CGamma%28%5Calpha%2B%5Cbeta%29%5CGamma%28a%29%5CGamma%28b%29%7D%7B%5CGamma%28a%2Bb%29%5CGamma%28%5Calpha%29%5CGamma%28%5Cbeta%29%7D+x%5E%7B%5Calpha-a%7D+%281-x%29%5E%7B%5Cbeta-b%7D+></p>

<p>となり，比<img src=http://chart.apis.google.com/chart?cht=tx&chl=f%2Fg+>が有界になる（どっかのxの値が<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cinf+>になったりしない）には，xや(1-x)のベキ数の部分が0以上でである必要がある．よって<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>が必要．</p>

<p>上の細かい証明は省略するが，要するにベータ分布<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBe%7D%28a%2Cb%29+>において，aとbが1未満の時には0と1の両端で値が跳ね上がる．以下の図は，「<a href="http://www.amazon.co.jp/gp/product/4621061224/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4621061224&linkCode=as2&tag=yagays-22">パターン認識と機械学習 上</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4621061224" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」のP.70を参考にベータ分布を作図したもの．これを見ると，aとbが1のときにちょうど一様分布のような形をとり，それより小さいと下に凸，それより大きいと上に凸のような分布の形になることがわかる．なので，ベータ分布が有界であるにはxや(1-x)のベキ数の部分がポイントになってくる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># 練習問題 2.7 ベータ関数の分布を図示してみる</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">0.1</span><span class="p">,</span><span class="m">0.1</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span>lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span>ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span>main<span class="o">=</span><span class="s">&quot;Be(0.1,0.1)&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span>lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span>ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span>main<span class="o">=</span><span class="s">&quot;Be(1,1)&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span>lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span>ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span>main<span class="o">=</span><span class="s">&quot;Be(2,3)&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">),</span>col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span>lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span>ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">),</span>main<span class="o">=</span><span class="s">&quot;Be(8,4)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_beta.png" alt="" /></p>

<h4><img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Cleft%5Clfloor+%5Calpha+%5Cright%5Crfloor+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=b+%3D+%5Cleft%5Clfloor+%5Cbeta+%5Cright%5Crfloor+>の証明</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29%2Fg%28x%29+>を微分して最大値を取る時のxを求めると，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_%7Bmax%7D+%3D+%5Cfrac%7B%5Calpha-a%7D%7B%5Calpha-a%2B%5Cbeta-b%7D+>となる．よって，上で証明した<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%5Cleq+%5Calpha%2C+b+%5Cleq+%5Cbeta+>を満たしつつ自然数aとbが最適な値を取るには，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+%3D+%5Cleft%5Clfloor+%5Calpha+%5Cright%5Crfloor+%2C+b+%3D+%5Cleft%5Clfloor+%5Cbeta+%5Cright%5Crfloor+>となる．これもまあ厳密な証明はできなくても直感的に考えれば明らかだろう．</p>

<br />


<h3>練習問題 2.8 二重指数分布から正規乱数を生成する</h3>

<ul>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=f%28x%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%28-%5Cfrac%7Bx%5E2%7D%7B2%7D%29+%5Csim+%5Cmathcal%7BN%7D%280%2C1%29+></li>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=g%28x%7C%5Calpha%29+%3D+%5Cfrac%7B%5Calpha%7D%7B2%7D%7D%5Cexp%28-%5Calpha+%7Cx%7C%29+></li>
</ul>


<h4>a. 定数Mの取りうる範囲と最小値を求める</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28x%29%7D%7Bg%28x%7C%5Calpha%29%7D+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%5E%7B-1%7D%5Cexp%28-%5Cfrac%7Bx%5E2%7D%7B2%7D+%2B+%5Calpha%7Cx%7C%29+></p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Calpha+>のとき，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7Bf%28%5Calpha%29%7D%7Bg%28%5Calpha%29%7D+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%5E%7B-1%7D%5Cexp%28-%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D+%2B+%5Calpha%5E2%29+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7D%5Calpha%5E%7B-1%7De%5E%7B%5Calpha%5E2%2F2%7D+>となり，与式を満たす．</p>

<p>Mの最小値は，上式を微分すると<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28-%5Calpha%5E2%2B1%29%5Cexp%28-%5Cfrac%7B%5Calpha%5E2%7D%7B2%7D%29+>が出てくるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+%5Cpm+1+>となる．候補分布に課された制約(P.59)より，fとgどちらか一方だけ負になることは無いので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Calpha+%3D+1+>が正解．（二階微分すれば-1のとき最小値，1のとき最大値だとわかる）</p>

<h4>b. 受理確率を求める</h4>

<p>受理確率は1/Mで表される．最適なMの値は<img src=http://chart.apis.google.com/chart?cht=tx&chl=M+%3D+%5Csqrt%7B%5Cfrac%7B2%7D%7B%5Cpi%7D%7De%5E%7B1%2F2%7D+>となるので，<img src=http://chart.apis.google.com/chart?cht=tx&chl=1%2FM+%3D+%5Csqrt%7B%5Cpi%2F2e%7D+%3D+1%2F0.76+%5Csimeq+1.3+>となる．</p>

<h4>c. 候補分布から乱数を生成するために逆変換をする</h4>

<p>受理・棄却法を使うには，当然候補分布から乱数が生成できなければいけない．今回は二重指数分布から乱数を生成して間接的に正規乱数を求めているので，二重指数分布から乱数を生成するために，2章前半で行った逆変換を行う．</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=G%28x%29+%3D+%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D+g%28y%7C%5Calpha%29+dy+%3D+%5Cbegin%7Bcases%7D+%5Cfrac%7B1%7D%7B2%7De%5E%7B%5Calpha+x%7D+%26+%28x+%3C+0%29+%5C%5C+1+-+%5Cfrac%7B1%7D%7B2%7De%5E%7B%5Calpha+x%7D+%26+%28x+%3E+0%29+%5Cend%7Bcases%7D+></p>

<p>より，</p>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbegin%7Bcases%7D+x+%3D+%5Cfrac%7B1%7D%7B%5Calpha%7D%5Clog%282u%29+%26+%28u+%3C+%5Cfrac%7B1%7D%7B2%7D%29+%5C%5C+x+%3D+-%5Cfrac%7B1%7D%7B%5Calpha%7D%5Clog%282%281-u%29%29+%26+%28%5Cfrac%7B1%7D%7B2%7D+%3C+u+%3C+1+%29%5Cend%7Bcases%7D+></p>

<p>となる．あとは<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>で生成される乱数を上式に当てはめて計算すればよい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：2章 逆変換・一般変換法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/21/imcmr-2-1/"/>
    <updated>2012-10-21T06:26:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/21/imcmr-2-1</id>
    <content type="html"><![CDATA[<ul>
<li>読書ノート アーカイブ：<a href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/">http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>内容：一様分布を元にして様々な確率分布に従う乱数を生成する</h3>

<p>統計解析ソフトであるRには，様々な分布に対応した組み込み関数が用意されている．本章では，そういった組み込み関数を使わずに，一様分布から生成される乱数を逆関数で変換することで，他の確率分布の乱数を表現する．</p>

<p>本書で扱う乱数とは，完全なランダム性を持つ乱数ではなく<strong>擬似乱数</strong>である．擬似乱数はset.seed()関数で設定した値を種として乱数を生成するため，どのような環境においてもset.seed()関数で同じ値を使うことで乱数を再現することができる．</p>

<p>今回は，一様乱数を元にして指数乱数を生成し，指数乱数からガンマ分布やベータ分布の乱数へと変換していく．これらの確率分布は全てRの関数で用意されているものなので，一様乱数から生成した乱数とRの関数から生成した乱数を比較することによって，乱数の生成がうまくいっているかどうかを判断する．以下のコードで描写したヒストグラムはすべて，左側が一様分布から生成した乱数，右側がRの関数を用いて生成した乱数(N=10<sup>4</sup> )．赤い曲線はどちらもRの関数を用いて分布を示したもの．</p>

<h3>例 2.1 一様乱数から指数乱数を作成する</h3>

<p>これはテキストにある通りのコードと作図．mcsmパッケージのdemo(Chapter.2)にも同様のコードがある．</p>

<p>以下のコードでは<img src=http://chart.apis.google.com/chart?cht=tx&chl=-%5Clog%7B%281-u%29%7D+>をそのままコードに落とし込んでいる．テキストにもある通り，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%5Csim+%5Cmathcal%7BU%7D_%7B%5B0%2C1%5D%7D+>ならば0から1の間で一様に等しい確率分布なのだがら，<img src=http://chart.apis.google.com/chart?cht=tx&chl=U+>も<img src=http://chart.apis.google.com/chart?cht=tx&chl=1-U+>も一様分布になる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>U <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>X <span class="o">&lt;-</span> <span class="o">-</span>log<span class="p">(</span><span class="m">1</span><span class="o">-</span>U<span class="p">)</span>
</span><span class='line'>Y <span class="o">&lt;-</span> rexp<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>hist<span class="p">(</span>X<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Exp from Uniform&quot;</span><span class="p">,</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dexp<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>Y<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Exp from R&quot;</span><span class="p">,</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dexp<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_1.png" alt="" /></p>

<h3>練習問題 2.2 逆変換法を用いてロジスティック分布とコーシー分布の乱数を生成する</h3>

<p>逆変換法を用いてロジスティック分布とコーシー分布の乱数を生成する．変換で求まる関数はいわゆる逆累積分布関数というもの．</p>

<h4>a.ロジスティック分布</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=u+%3D+%5Cfrac%7B1%7D%7B1%2Be%5E%7B-%5Cfrac%7Bx-%5Cmu%7D%7B%5Cbeta%7D%7D%7D+>を変形して，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+-%5Cbeta+%5Clog%7B%5Cfrac%7B1-u%7D%7Bu%7D%7D+%2B+%5Cmu+></p>

<p>以下のコードは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu%3D0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta%3D1+>の場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>U <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>X <span class="o">&lt;-</span> <span class="o">-</span>log<span class="p">((</span><span class="m">1</span><span class="o">-</span>U<span class="p">)</span><span class="o">/</span>U<span class="p">)</span>
</span><span class='line'>Y <span class="o">&lt;-</span> rlogis<span class="p">(</span>Nsim<span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>X<span class="p">,</span>freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span>main<span class="o">=</span><span class="s">&quot;Logis from Uniform&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dlogis<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>Y<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Logis from R&quot;</span><span class="p">)</span>
</span><span class='line'>curve<span class="p">(</span>dlogis<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_2.png" alt="" /></p>

<h4>b.コーシー分布</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=u+%3D+%5Cfrac%7B1%7D%7B2%7D+%2B+%5Cfrac%7B1%7D%7B%5Cpi%7D+%5Carctan%7B%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D%7D+>を変形して，<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Cmu+%2B+%5Csigma+%5Ctan%7B%5Cpi%28u-%5Cfrac%7B1%7D%7B2%7D%29%7D+></p>

<p>以下のコードは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmu%3D0+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Csigma%3D1+>の場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>U <span class="o">&lt;-</span> runif<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>x <span class="o">&lt;-</span> tan<span class="p">(</span>pi<span class="o">*</span><span class="p">(</span>U<span class="o">-</span><span class="m">0.5</span><span class="p">))</span>
</span><span class='line'>Y <span class="o">&lt;-</span> rcauchy<span class="p">(</span>Nsim<span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>X<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Cauchy from Uniform&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>dcauchy<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>Y<span class="p">[</span>Y<span class="o">&gt;=</span><span class="m">-10</span> <span class="o">&amp;</span> Y<span class="o">&lt;=</span><span class="m">10</span><span class="p">],</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span><span class="s">&quot;Cauchy from R&quot;</span><span class="p">,</span> xlim<span class="o">=</span>c<span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">10</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>dcauchy<span class="p">(</span>x<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># cauchyは値が両端に飛んでヒストグラムが綺麗に書けないので[-10,10]で整えている</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_3.png" alt="" /></p>

<h3>練習問題 2.12 指数分布からガンマ分布とベータ分布の乱数を生成する</h3>

<h4>a.ガンマ乱数</h4>

<p>以下の作図では，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cbeta+>の値を固定して<img src=http://chart.apis.google.com/chart?cht=tx&chl=a+>の値を1,2,5,9と変化させたときの分布の変化を見ている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>beta <span class="o">&lt;-</span> <span class="m">2.0</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'><span class="kr">for</span><span class="p">(</span>a in c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">9</span><span class="p">)){</span>
</span><span class='line'>  U <span class="o">&lt;-</span> runif<span class="p">(</span>a<span class="o">*</span>Nsim<span class="p">)</span>
</span><span class='line'>  m <span class="o">&lt;-</span> matrix<span class="p">(</span>U<span class="p">,</span> nrow<span class="o">=</span>a<span class="p">)</span>
</span><span class='line'>  X <span class="o">&lt;-</span> beta <span class="o">*</span> apply<span class="p">(</span><span class="o">-</span>log<span class="p">(</span>m<span class="p">),</span> <span class="m">2</span><span class="p">,</span> sum<span class="p">)</span>
</span><span class='line'>  Y <span class="o">&lt;-</span> rgamma<span class="p">(</span>Nsim<span class="p">,</span> shape<span class="o">=</span>a<span class="p">,</span> scale<span class="o">=</span>beta<span class="p">)</span>
</span><span class='line'>  hist<span class="p">(</span>X<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Gamma from Uniform:&quot;</span><span class="p">,</span><span class="s">&quot;a=&quot;</span><span class="p">,</span>a<span class="p">,</span><span class="s">&quot; beta=&quot;</span><span class="p">,</span>beta<span class="p">),</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">)</span>
</span><span class='line'>  curve<span class="p">(</span>dgamma<span class="p">(</span>x<span class="p">,</span> shape<span class="o">=</span>a<span class="p">,</span> scale<span class="o">=</span>beta<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>  hist<span class="p">(</span>Y<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Gamma from Uniform:&quot;</span><span class="p">,</span><span class="s">&quot;a=&quot;</span><span class="p">,</span>a<span class="p">,</span><span class="s">&quot; beta=&quot;</span><span class="p">,</span>beta<span class="p">),</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">)</span>
</span><span class='line'>  curve<span class="p">(</span>dgamma<span class="p">(</span>x<span class="p">,</span> shape<span class="o">=</span>a<span class="p">,</span> scale<span class="o">=</span>beta<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_4.png" alt="" /></p>

<h4>a.ベータ乱数</h4>

<p>この手法では<img src=http://chart.apis.google.com/chart?cht=tx&chl=%28a+%5Cin+%5Cmathbb%7BN%5E%2A%7D%29+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathbb%7BN%5E%2A%7D+%3D+1%2C2%2C+%5Cdots+> という制約があるため，<img src=http://chart.apis.google.com/chart?cht=tx&chl=a%3D0.1+>，<img src=http://chart.apis.google.com/chart?cht=tx&chl=b%3D0.1+>のようなベータ分布は作ることが出来ない．以下はa=1,b=1，a=2,b=3，a=8,b=4の場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># a=1,b=1の場合</span>
</span><span class='line'>par<span class="p">(</span>mfrow<span class="o">=</span>c<span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">))</span>
</span><span class='line'>Nsim <span class="o">&lt;-</span> <span class="m">10</span><span class="o">^</span><span class="m">4</span>
</span><span class='line'>a <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class='line'>b <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class='line'>U <span class="o">&lt;-</span> runif<span class="p">((</span>a<span class="o">+</span>b<span class="p">)</span><span class="o">*</span>Nsim<span class="p">)</span>
</span><span class='line'>m <span class="o">&lt;-</span> matrix<span class="p">(</span>U<span class="p">,</span>nrow<span class="o">=</span><span class="p">(</span>a<span class="o">+</span>b<span class="p">))</span>
</span><span class='line'>X <span class="o">&lt;-</span> <span class="o">-</span>log<span class="p">(</span>m<span class="p">[</span>a<span class="p">,])</span> <span class="o">/</span> apply<span class="p">(</span><span class="o">-</span>log<span class="p">(</span>m<span class="p">),</span><span class="m">2</span><span class="p">,</span>sum<span class="p">)</span> <span class="c1"># a&gt;=2の場合はapply(-log(m[1:a,]),2,sum) / apply(-log(m),2,sum)</span>
</span><span class='line'>Y <span class="o">&lt;-</span> rbeta<span class="p">(</span>Nsim<span class="p">,</span>a<span class="p">,</span>b<span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>X<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Beta from Uniform:&quot;</span><span class="p">,</span><span class="s">&quot;a=&quot;</span><span class="p">,</span>a<span class="p">,</span><span class="s">&quot;b=&quot;</span><span class="p">,</span>b<span class="p">),</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span>a<span class="p">,</span>b<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>hist<span class="p">(</span>Y<span class="p">,</span> freq<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> main<span class="o">=</span>paste<span class="p">(</span><span class="s">&quot;Beta from R:&quot;</span><span class="p">,</span><span class="s">&quot;a=&quot;</span><span class="p">,</span>a<span class="p">,</span><span class="s">&quot;b=&quot;</span><span class="p">,</span>b<span class="p">),</span> nclass<span class="o">=</span><span class="m">50</span><span class="p">,</span> ylim<span class="o">=</span>c<span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">))</span>
</span><span class='line'>curve<span class="p">(</span>dbeta<span class="p">(</span>x<span class="p">,</span>a<span class="p">,</span>b<span class="p">),</span> add<span class="o">=</span><span class="k-Variable">T</span><span class="p">,</span> col<span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">,</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://dl.dropbox.com/u/142306/b/imcmr/chp2_5.png" alt="" /></p>

<h4>b. 一様分布から指数乱数を作る(逆変換)</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%3D+e%5E%7B-%5Clambda+x%7D+>より <img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+-+%5Cfrac%7B%5Clog%7BU%7D%7D%7B%5Clambda%7D+></p>

<h4>c. 一様分布からロジスティック乱数を作る(逆変換)</h4>

<p><img src=http://chart.apis.google.com/chart?cht=tx&chl=U+%3D+%5Cfrac%7Be%5Ex%7D%7B1%2Be%5Ex%7D+>より<img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%3D+%5Clog%7B%5Cfrac%7BU%7D%7B1-U%7D%7D+></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Rによるモンテカルロ法入門」読書ノート：アーカイブ]]></title>
    <link href="http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r/"/>
    <updated>2012-10-20T11:13:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/20/archive-introducing-monte-carlo-methods-with-r</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>「Rによるモンテカルロ法入門」</h3>

<p>本書は，モンテカルロ法の実践的な解説書であり，統計解析ソフトのRを用いた豊富な実例と練習問題が組まれている．モンテカルロ法とは乱数を用いて数値計算を行う手法の総称であり，本書で扱う内容は乱数の発生からモンテカルロ積分，そしてマルコフ連鎖モンテカルロ法（MCMC）の各種アルゴリズムに至るまで非常に幅広い．たいていの解説には理論に実践演習が付随した形となっており，数学的な理論を軸にして実際にRを用いたコード例が示される．</p>

<h3>練習問題を解きつつ読書ノートをまとめてみる</h3>

<p><a href="http://yagays.github.com/blog/2012/10/14/review-glm-mcmc/">そんなこんな</a>で，<a href="http://www.amazon.co.jp/gp/product/400006973X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=400006973X&amp;linkCode=as2&amp;tag=yagays-22">久保本</a>と並行する形で「<a href="http://www.amazon.co.jp/gp/product/4621065270/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4621065270&linkCode=as2&tag=yagays-22">Rによるモンテカルロ法入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4621065270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」を読んでいる．一応MCMCの部分だけひと通り目を通したのだが，最終的にMCMCの実装までひと通りやるにしても一連の流れを簡単にでも追っておかなければと思って，最初の乱数の部分からじっくり読み進めている．これがなかなか難しくて，手も足も出ないところをなんとかRのコードを動かして理解を補っているわけなのだが……取り敢えず練習問題を解ける範囲で解きつつRのコードを書いていこうというこでとはセクションごとに小分けてして，じっくり読書ノートを付けて勉強することにしてみた．</p>

<p>以下に，読書ノートのリンクを書き加えていく</p>

<h3>読書ノートまとめ</h3>

<ul>
<li><a href="http://yagays.github.com/blog/2012/10/21/imcmr-2-1/">「Rによるモンテカルロ法入門」読書ノート：2章 逆変換・一般変換法</a>

<ul>
<li>例 2.1，練習問題 2.2，練習問題 2.12</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/22/imcmr-2-2/">「Rによるモンテカルロ法入門」読書ノート：2章 受理・棄却法</a>

<ul>
<li>例 2.7，例 2.8，練習問題 2.7，練習問題 2.8</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/23/imcmr-2-3/">「Rによるモンテカルロ法入門」読書ノート：2章 練習問題</a>

<ul>
<li>練習問題 2.18，練習問題 2.19，練習問題 2.22</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/25/imcmr-3-1/">「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分</a>

<ul>
<li>例 3.3，例 3.4</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/27/imcmr-3-2/">「Rによるモンテカルロ法入門」読書ノート：3章 モンテカルロ積分 その2</a>

<ul>
<li>練習問題 3.1，練習問題 3.9</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/28/imcmr-3-3/">「Rによるモンテカルロ法入門」読書ノート：3章 重点サンプリング</a>

<ul>
<li>例 3.5，練習問題 3.5</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/10/30/imcmr-5-1/">「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 数値的最適化法</a>

<ul>
<li>例 5.1，例 5.2</li>
</ul>
</li>
<li><a href="http://yagays.github.com/blog/2012/11/01/imcmr-5-2/">「Rによるモンテカルロ法入門」読書ノート：5章 モンテカルロ最適化 確率的探索</a>

<ul>
<li>例 5.3，練習問題 5.3</li>
</ul>
</li>
</ul>


<h3>私的正誤表</h3>

<ul>
<li><p>全体的な修正点</p>

<ul>
<li>Rのoptimize()関数で最大値を求める際には「max=T」→「maximum=T」を使う．</li>
</ul>
</li>
<li><p>P143 例題5.1内のコード8行目</p>

<ul>
<li>「maximum=max=T」→「maximum=T」</li>
</ul>
</li>
</ul>


<h3>実行環境</h3>

<p>R version 2.15.1 (2012-06-22)</p>

<h3>お決まりごと</h3>

<p>この読書ノート（上記リンク先を含む）は個人的なメモであって，解答およびコードの正確さや厳密さを保証するものではありません．間違いが多分に含まれている可能性があるので，参考にされる際には十分ご注意下さい．</p>

<h3>参考：サンプルコード</h3>

<p>CRANのmcsmパッケージに，本書の一部コードのスクリプトがデモとして入っている．</p>

<ul>
<li><a href="http://cran.r-project.org/web/packages/mcsm/index.html">http://cran.r-project.org/web/packages/mcsm/index.html</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="o">&gt;</span> install.packages<span class="p">(</span><span class="s">&quot;mcsm&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> library<span class="p">(</span>mcsm<span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> demo<span class="p">(</span>Chapter.1<span class="p">)</span> <span class="c1"># Chapter.8まである</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考：基本的な確率分布の略称</h3>

<ul>
<li>一様分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BU%7D></li>
<li>指数分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BExp%7D></li>
<li>カイ二乗分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7B%5Cchi%5E2%7D></li>
<li>ガンマ分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BG%7D></li>
<li>ベータ分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBe%7D></li>
<li>正規分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BN%7D></li>
<li>二項分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BBin%7D></li>
<li>負の二項分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BNeg%7D></li>
<li>ポアソン分布(※): <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BP%7D></li>
<li>コーシー分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BC%7D></li>
<li>スチューデントのT分布: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BT%7D></li>
<li>二重指数分布（ラプラス分布）: <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BL%7D></li>
</ul>


<p>（※ <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BP%7D>は場合によって変わる）</p>

<h3>参考</h3>

<ul>
<li>(pdf) <a href="http://www.ceremade.dauphine.fr/~xian/shortManual.pdf">http://www.ceremade.dauphine.fr/~xian/shortManual.pdf</a></li>
</ul>


<p>公式ページには，番号が奇数の練習問題だけ解答がある．</p>

<ul>
<li>(pdf) <a href="http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf">http://www.stat.ufl.edu/~casella/ShortCourse/MCMC-UseR.pdf</a></li>
</ul>


<p>UseR!の発表スライドっぽい資料．</p>

<ul>
<li><a href="http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html">http://waxworksmath.com/Authors/N_Z/Robert_N_Casella/robert_n_casella.html</a></li>
</ul>


<p>1章から3章途中までの解説とRのコードがある．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TeXの数式をGoogle Chart APIのURL形式に変換するJekyll/Octopressプラグインを作りました]]></title>
    <link href="http://yagays.github.com/blog/2012/10/19/jekyll-octopress-plugin-googlechart-tex/"/>
    <updated>2012-10-19T12:14:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/19/jekyll-octopress-plugin-googlechart-tex</id>
    <content type="html"><![CDATA[<h3>概要</h3>

<p>Jekyll/Octopressで数式を使った記事の作成を簡単にします．</p>

<p><a href="https://developers.google.com/chart/">Google Chart Tools</a>には，Tex形式で書かれた数式をURLに含めて投げると変換した画像を返してくれるAPIがあります．しかし，URLで数式を投げるには特定の文字のエスケープ(変換)をする必要があり，とても面倒です．ということで，Jekyll/Octopress内に書かれた数式を自動でGoogle Chart APIのURL形式に変換するプラグインを作りました．これを使えば，記事の中で数式を書くときに，面倒なHTMLのタグやURLの変換を気にする必要がありません．</p>

<h3>使い方</h3>

<p>以下のように<strong>gctex</strong>というタグとTex形式の数式を埋め込むと，Google Chart APIの画像のURLに変換されます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% gctex \frac{1}{\sqrt{2\pi}\sigma} \exp(\frac{-(x-\mu)^2}{2\sigma^2}) %}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7D+%5Cexp%28%5Cfrac%7B-%28x-%5Cmu%29%5E2%7D%7B2%5Csigma%5E2%7D%29+></span></code></pre></td></tr></table></div></figure>


<p>また，文字の途中に埋め込むことも可能です．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>これは{% gctex \mathcal{N}(x|\mu,\sigma) %}です．
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>これは<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cmathcal%7BN%7D%28x%7C%5Cmu%2C%5Csigma%29+>です．</span></code></pre></td></tr></table></div></figure>


<h3>注意</h3>

<p>ここで使用しているLiquid Tagプラグインは，中に改行を入れてしまうとコンパイルエラーを起こして正しく変換されません．なので，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% gctex x \\ y \\ z %} </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><img src=http://chart.apis.google.com/chart?cht=tx&chl=x+%5C%5C+y+%5C%5C+z+></span></code></pre></td></tr></table></div></figure>


<p>TeX内で改行を表すことはできますが，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% gctex x \\
</span><span class='line'>         y \\
</span><span class='line'>         z% } </span></code></pre></td></tr></table></div></figure>


<p>のように，実際にテキストの中で改行を含めるような書き方はできません．</p>

<h3>インストールとコード</h3>

<p>以下のgooglechart_tex.rbをダウンロードして，プラグインのコードがあるディレクトリに入れるだけです（Jekyllの場合は_plugins，Octopressの場合はplugins）．</p>

<div><script src='https://gist.github.com/3915940.js?file='></script>
<noscript><pre><code># Convert tex formula into google chart API format (Jekyll/Octopress plugin)
#
# Usage: {% gctex tex_formula %}
#
# Author: yag_ays (yanagi.ayase [at] gmail.com)
# blog  http://yagays.github.com/
#
# Ref : http://d.hatena.ne.jp/repose/20110506/1304612242

require &quot;cgi&quot;

module Jekyll
  class GoogleChartTexTag &lt; Liquid::Tag

    def initialize(tag_name, text, tokens)
      super
      @text = text
    end

    def render(context)
      &quot;&lt;img src=http://chart.apis.google.com/chart?cht=tx&amp;chl=#{CGI.escape(@text)}&gt;&quot;
    end
  end
end

Liquid::Template.register_tag('gctex', Jekyll::GoogleChartTexTag)
</code></pre></noscript></div>


<h3>参考</h3>

<ul>
<li><a href="http://d.hatena.ne.jp/repose/20110506/1304612242">http://d.hatena.ne.jp/repose/20110506/1304612242</a></li>
<li><a href="https://github.com/mojombo/jekyll/wiki/Plugins">https://github.com/mojombo/jekyll/wiki/Plugins</a></li>
<li><a href="https://developers.google.com/chart/infographics/docs/formulas">https://developers.google.com/chart/infographics/docs/formulas</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「デザインする技術 -よりよいデザインのための基礎知識」読了]]></title>
    <link href="http://yagays.github.com/blog/2012/10/18/review-the-art-of-designing/"/>
    <updated>2012-10-18T07:17:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/18/review-the-art-of-designing</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4844358588" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>ウェブデザイン・インフォグラフィクスを含めたデザイン全般に使えるリファレンス的な1冊</h3>

<p>一般の社会人や学生が「デザイン」を意識するのは，プレゼンテーションのスライドを作成するときだろう．エンジニアや研究者などはそれに加えて，ポスターやウェブサイトの作成，そして最近よく言われるようになったUX/UIなどの要素が加わる．そういう人に私が問答無用でお薦めするのが「<strong><a href="http://www.amazon.co.jp/gp/product/4839928401/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4839928401&linkCode=as2&tag=yagays-22">ノンデザイナーズ・デザインブック [フルカラー新装増補版]</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4839928401" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></strong>」なのだが，本書「<strong><a href="http://www.amazon.co.jp/gp/product/4844358588/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4844358588&linkCode=as2&tag=yagays-22">デザインする技術 ~よりよいデザインのための基礎知識</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4844358588" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></strong>」もなかなかの良書だったので紹介してみる．</p>

<p>本書は，デザイナーの仕事としての企画・発案から制作に至るすべての工程におけるデザインの技法を包括的に取り扱った技術書である．それらデザイナーの技法を，5つの要素「考」「図」「文字」「面」「色」に分けて，各要素が含む細かく技法をそれぞれ体系的に解説している．例えば「考」では，アイデアの出し方から組み立て方，そして最終的なカタチに仕上げていく過程に必要な技法が説明される．個人的な創作活動では境界が曖昧になりがちなプロトタイプ・ラフ・カンプにおいて，それぞれの段階で何をすべきでどのような箇所に気をつけなければいけないかが述べられ，それぞれの役割が明確になる．その他にも多人数で知恵を出しあってモノを作っていく方法にも触れられており，ブレインストーミングにおいては相手の1次的な意見に自分の意見を重ねることが大切だといった実践的なテクニックも入っている．そういった形で，本書をひと通り読めばある程度デザイナーの仕事をなぞることができるレベルの内容が詰まっている．</p>

<p>そして本書の最大の特徴は，見開き1ページ単位で各技法が紹介されているところだ．何かデザインしようと思ったら，ペラペラ本をめくりながら自分がやりたいことを探して，そのページの内容をじっくり読むなり他の文献への足がかりにすれば良い．そういったリファレンスとしての使い方ができるというのは，無限の可能性があるデザインの分野において作りたい作品のアタリを付けるために非常に有効である．</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4839928401" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<p>しかし，じゃあそれだけで満足のいくデザインが作れるようになるかといえば，私は必ずしもそれだけでは足りないと考える．そこには，デザインという分野における技法がある程度体系化しながらも，<strong>「やってはいけないこと」という人間の感性に基づいた禁則</strong>があるからだ．デザインは最終的に人間が見て感じて判断するものだから，いくら技法やテクニックが優れていようとも，人間側が受け付けなければ意味がない．色に関して言えば，例えば同系色の背景と文字が重なって読みにくかったりだとか，原色が強すぎて印象が強烈になるだとかいったことは，初心者が陥りがちな部分だ．そういった「やってはいけないこと」という禁則が，デザインには少なからず存在する．そういった部分において，本書はデザインの成功例は豊富に載っているが，失敗例は非常に少ない．</p>

<p>その点，冒頭で私が薦めた「ノンデザイナーズ・デザインブック」は，「やってはいけないこと」に関する情報が充実している．デザインを体系的に学んでいくなかで，ある手法に関してひと通り説明されたあとには必ず，その手法を使った作品の失敗例と，それを改良した成功例が対になって出てくる．そのため，読者は反例を学びながら手法自体の理解を深めていくことができる．そして，自分がいざデザインするというときには，そういった反例と見比べながら自分のデザインを修正することができる．このような真似や反面教師という関係は，初学者にとってはとっつきやすい部分だと思う．</p>

<p>といったように，これ1冊ですべてを網羅できるといったわけではないものの，本書はデザインにおいて網羅的でまとまりのあるリファレンス的な1冊だといえる．プレゼンテーションなどを作る際には，手元に置いておきたい本だ．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「データ解析のための統計モデリング入門」読書ノート]]></title>
    <link href="http://yagays.github.com/blog/2012/10/14/review-glm-mcmc/"/>
    <updated>2012-10-14T04:40:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/14/review-glm-mcmc</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=400006973X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<p><strong>「データ解析のための統計モデリング入門」</strong>をひと通り読んだ．本書はGLMからMCMCによる分布推定までの一連の統計モデリングの流れを，生態学における研究の問題に即したテストデータやRを使った解析例とともに解説した本である．本書を書かれた久保さんの講義資料は前々から拝見していたのだが，今回はそれが全体を通して非常によくまとまっている印象を受けた．やはり実例に沿った例題があって，それを解決するためのストーリーが組まれていると，何が問題で何をすべきなのか，そしてその評価方法を含めてハッキリとしていて読みやすい．Rのコードに関しても，コマンドの実行方法からその解釈の仕方まで丁寧に解説が組まれており，数式とのつながりもわかりやすい．個人的には，後半のMCMCの実験に関しては大部分をWinBUGSにお任せで，シミュレーションの過程が少し不明瞭だった感じもするのだが，限られた紙面でMCMCの細かい実装方法を説明するよりかは既存のツールを使ったほうが全体の流れとしても良かったのだろう．</p>

<br />


<p>さて，本書を読み始める前に必ず目に通すべきなのが，<a href="http://hosho.ees.hokudai.ac.jp/~kubo/ce/IwanamiBook.html">公式ページ</a>にも貼られている各章のつながりや線形モデルの発展の図だ．全体の流れを俯瞰できるほか，実際に中を読みながら今ある問題と図とを照らし合わても，自分が今どういった位置づけの中で何を解いているのかということを把握することができる．</p>

<p>これが非常に参考になったので，個人的にも自分の読書ノートに書きなぐったまとめ図を清書して作ってみた．ほとんど久保さんの図を真似ただけだが，2つの図を組み合わせ感じでストーリーに沿った形で線形モデルの発展をなぞっている．基本的に章の間をつなぐような自問自答の形を取っており，各章には推定するパラメータと手法の代表的なものを付け加えている．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/glm_mcmc.png" alt="" /></p>

<p>以下に簡単な読書ノートを載せておく．Rのコードを使った実験はまだできていないが，とりあえずはMCMCの実装くらいまではやりたいと思う．<strong>なお，このまとめには多分に間違いが含まれている可能性があるので，もし参考にされる際には注意していただきたい．</strong></p>

<!-- more -->


<h3>全体的に</h3>

<ul>
<li>確率の表記の仕方に注意

<ul>
<li><strong>ただ単にパラメータを取る時の確率なのか条件付き確率なのか，文脈に沿ってきちんと把握しておく</strong></li>
<li>ポアソン分布の文脈における%{ gctex p(x|\lambda) %}は，<img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Clambda+>というパラメータ(平均)を取る時のポアソン分布の確率値（他に<img src=http://chart.apis.google.com/chart?cht=tx&chl=p%28x%3B%5Clambda%29+>とも書くパターン）</li>
<li>後半のMCMCに入ると条件付き確率が出てくる</li>
</ul>
</li>
</ul>


<h3>2章</h3>

<ul>
<li>「ある植物の1個体から得られる種子の数に何か法則はあるか？」</li>
<li>確率分布の単純なあてはめ</li>
<li>ポアソン分布を選ぶ理由は，非負の整数で<img src=http://chart.apis.google.com/chart?cht=tx&chl=%280%2C%5Cinfty%5D+>だから</li>
</ul>


<h3>3章</h3>

<ul>
<li>「植物のサイズや施肥効果と種子の数に何か関係はあるか」</li>
<li>説明変数を組み込んだ統計モデル</li>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=log%28%5Clambda_i%29+%3D+%5Cbeta_1+%2B+%5Cbeta_2+x_i+></li>
<li>(リンク関数) = (線形予測子) の関係

<ul>
<li>PRMLでは，リンク関数は連結関数と訳されている</li>
</ul>
</li>
<li>対数リンク関数では，要素の効果が積で表される

<ul>
<li><img src=http://chart.apis.google.com/chart?cht=tx&chl=%5Cexp%28%5Cbeta_1+%2B+%5Cbeta_2+x_i+%2B+%5Cbeta_3%29+%3D+%5Cexp%28%5Cbeta_1%29+%5Ctimes+%5Cexp%28%5Cbeta_2+x_i%29+%5Ctimes+%5Cexp%28%5Cbeta_3%29+></li>
</ul>
</li>
</ul>


<h3>4章</h3>

<ul>
<li>モデル選択</li>
<li>良いモデル/悪いモデルと考えた時に，何が良いモデルなのか</li>
<li>当てはまりの良さだけを考えてはいけない

<ul>
<li>機械学習で言うところの過学習</li>
</ul>
</li>
<li>AIC（赤池情報量基準）</li>
<li>平均対数尤度の推定値 / 最大対数尤度のバイアス補正</li>
<li>最大対数尤度 &lt;=> 最小逸脱度</li>
</ul>


<h3>5章</h3>

<h3>6章</h3>

<ul>
<li>「植物のサイズや施肥効果と種子の生存数に何か関係はあるか」</li>
<li>ロジスティック回帰

<ul>
<li>二項分布とロジットリンク関数の組み合わせ</li>
</ul>
</li>
<li>相互作用項による積の効果<img src=http://chart.apis.google.com/chart?cht=tx&chl=x_i+f_i+>を考える</li>
<li>割り算値の統計モデリングの危険性とオフセット項</li>
</ul>


<h3>7章</h3>

<ul>
<li>複数の確率分布を部品とする統計モデリング

<ul>
<li>個体のばらつき(<strong>個体差</strong>)</li>
</ul>
</li>
<li>GLMMは人間が観測できないけど応答変数(種子の生存数)に効いてそうな部分の効果をGLMに組み込んだもの</li>
<li>固定効果とランダム効果</li>
<li>サンプル数の分だけ必要なパラメータをまとめて最尤推定できないので積分して分布を混ぜる</li>
<li>無限個の二項分布をまぜることで平均よりも分散が大きいような確率分布になる</li>
<li>反復/擬似反復</li>
</ul>


<h3>8章</h3>

<ul>
<li>MCMCで分布を推定

<ul>
<li>ランダム効果を複数組み込んだモデルにすると多重積分の数が多くなり最尤推定に時間が掛かる場合</li>
<li>または最尤推定が解析的に求められない場合</li>
</ul>
</li>
<li>MCMCといっても結局やりたいことはパラメータを知りたいということ

<ul>
<li>Rのglm()関数で一瞬で求まったものを，MCMCのシミュレーションで求めているだけ</li>
</ul>
</li>
<li>MCMCサンプリングにより定常分布が定まる ＆　定常分布は尤度に比例する</li>
<li>マルコフ連鎖からサンプリングすることと事後分布からサンプリングすることが同じ</li>
</ul>


<h3>9章</h3>

<ul>
<li>GLMのベイズモデル化</li>
<li><strong>求めているものが値なのか分布なのかを意識する</strong></li>
<li>無情報事前分布を用いたベイズ統計モデル

<ul>
<li>平べったい分布</li>
<li>「 <img src=http://chart.apis.google.com/chart?cht=tx&chl=%5B%5Cinfty%2C%5Cinfty%5D+>の範囲で好きな値を取っていい」ことを表現するための分布</li>
</ul>
</li>
<li>gibbsサンプリングによるMCMCアルゴリズム（複数パラメータのサンプリング）</li>
</ul>


<h3>10章</h3>

<ul>
<li>「調査場所の差」を考慮にいれる

<ul>
<li>これも結局は個体差</li>
</ul>
</li>
<li>階層事前分布・階層ベイズモデル</li>
<li>階層に関しては「生態学のためのベイズ法」にある図が分かりやすい</li>
</ul>


<h3>11章</h3>

<h3>参考</h3>

<p>「<a href="http://www.amazon.co.jp/gp/product/4320056787/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4320056787&linkCode=as2&tag=yagays-22">生態学のためのベイズ法</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4320056787" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」は実際の生態学の解析事例が豊富に書かれている．具体的にどういう生物を対象にどういった測定値を用いて解析したみたいな話が色々書いてあるので，モデル化の際のイメージがしやすい．しょっぱなからベイジアンなので，慣れてない人には少し抵抗があるかもしれない．久保さんのところ（<a href="http://hosho.ees.hokudai.ac.jp/~kubo/ce/BayesianFrog.html">URL</a>）にも色々と情報あり．この本はRとWinBUGS．</p>

<p>「<a href="http://www.amazon.co.jp/gp/product/4621065270/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4621065270&linkCode=as2&tag=yagays-22">Rによるモンテカルロ法入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4621065270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」は，乱数を発生させて数値計算を行うモンテカルロ法自体について書かれているので，扱っている内容はMCMCに限らずモンテカルロ積分なども含まれている．こちらはWinBUGSを使わず全編Rでコードが書かれているので，RでMCMCを実装するときの参考になる．</p>

<p>久保本であまり触れられていなかった理論方面では，「<a href="http://www.amazon.co.jp/gp/product/4000068520/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4000068520&linkCode=as2&tag=yagays-22">計算統計 2 マルコフ連鎖モンテカルロ法とその周辺 (統計科学のフロンティア 12)</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4000068520" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」と「<a href="http://www.amazon.co.jp/gp/product/4254126972/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4254126972&linkCode=as2&tag=yagays-22">マルコフ連鎖モンテカルロ法 (統計ライブラリー)</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4254126972" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」の2冊あたりが良さそう．前者の計算統計の方は，久保本の編集にも携われた伊庭氏が書かれたMCMCの解説．後者の方は理論寄りながらも後半では社会学方面の研究の実例が色々と載っており，ポアソン回帰やロジスティック回帰など各事例の数式を追ったり実例を見るのに適している．こちらはRとWinBUGSが混じっている．</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4320056787" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621065270" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4000068520" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4254126972" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h3>参考：ランダム効果について</h3>

<ul>
<li><a href="http://hosho.ees.hokudai.ac.jp/~kubo/ce/RandomEffectsCrawley.html">http://hosho.ees.hokudai.ac.jp/~kubo/ce/RandomEffectsCrawley.html</a></li>
<li><a href="http://blog.kzfmix.com/entry/1267928535">http://blog.kzfmix.com/entry/1267928535</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOAPdenovo2のインストール方法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/13/soapdenovo2-install/"/>
    <updated>2012-10-13T07:30:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/13/soapdenovo2-install</id>
    <content type="html"><![CDATA[<p>前回<a href="bhttp://yagays.github.com/blog/2012/10/11/soapdenovo2-stats/">SOAPdenovo2の話</a>を書いたが，そういえばSOAPdenovo2といえばインストールまわりが不親切だったので，ちょっと解説みたいなものを書いてみる．</p>

<h3>ダウンロード</h3>

<p>SOAPdenovoのパッケージがおかれているSourceForgeにアクセスする</p>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
</ul>


<p>まずここで注意しなければいけないのは，緑のアイコンででかでかと表示されている「Download」をクリックしてはいけないということだ．よくよく見ると「GapCloser」と書いてあり，これは本体とは別のプログラムファイルである．欲しいのはSOAPdenovo2の実行ファイルなので，「Browse All File」をクリックしてアップロードされているファイルの中から欲しいものを探す．なお，上部の「File」をクリックしても同じ．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_1.jpg" alt="" /></p>

<p>「bin」をクリックする．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_2.jpg" alt="" /></p>

<p>これでSOAPdenovo2の一連のファイルが表示される．この中で必要なのは「SOAPdenovo2_revision210.tgz」というファイル．</p>

<p><img src="http://dl.dropbox.com/u/142306/b/soapdenovo2_3.jpg" alt="" /></p>

<p>そして「SOAPdenovo2_revision210.tgz」クリックすると，ページが遷移したあと自動でダウンロードが開始される．もしサーバなどにダウンロードしたい場合は，画面上部にある「Direct link」のリンクURLを使って以下のようにwgetなどでダウンロードする．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://downloads.sourceforge.net/project/soapdenovo2/bin/SOAPdenovo2_revision210.tgz
</span></code></pre></td></tr></table></div></figure>


<h3>解凍およびインストール</h3>

<p>あとは，ダウンロードしたSOAPdenovo2_revision210.tgzを解凍するだけでSOAPdenovo2のバイナリが得られる．SOAPdenovo2はまだソースコードの公開をしておらず，プログラムはすべて実行可能なバイナリ形式で配布されている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar zxvf SOAPdenovo2_revision210.tgz
</span></code></pre></td></tr></table></div></figure>


<p>なお，上記のコマンドでは，カレントディレクトリに全てのファイルが展開されるので，もし特定のディレクトリに展開したい場合には，以下のように<strong><code>-C</code></strong>オプションを付ける．展開先のディレクトリが無いとエラーになるので，実行前に<strong><code>mkdir</code></strong>などで作っておく．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar zxvf SOAPdenovo2_revision210.tgz -C path/to/SOAPdenovo2_revision210
</span></code></pre></td></tr></table></div></figure>


<p>展開すると，以下のようになる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>total 7040
</span><span class='line'>-rw-r--r-- 1 yag_ays users   16199 Sep 13 15:54 MANUAL
</span><span class='line'>-rwxr-xr-x 1 yag_ays users 1958292 Sep 13 13:50 pregraph_sparse_127mer.v1.0.3*
</span><span class='line'>-rwxr-xr-x 1 yag_ays users 1941908 Sep 13 13:50 pregraph_sparse_63mer.v1.0.3*
</span><span class='line'>-rwxr-xr-x 1 yag_ays users 1718828 Sep 13 13:49 SOAPdenovo-127mer*
</span><span class='line'>-rwxr-xr-x 1 yag_ays users 1562546 Sep 13 13:49 SOAPdenovo-63mer*
</span></code></pre></td></tr></table></div></figure>


<p><strong>SOAPdenovo-63mer</strong>と<strong>SOAPdenovo-127mer</strong>がSOAPdenovo2の本体になる．ここで少し注意が必要なのだが，SOAPdenovo2なのに実行ファイル名がSOAPdenovoとなっていてややこしいのに加えて，SOAPdenovoは「SOAPdenovo63mer」なのに対し，今回はK-merの値の前にハイフンが入っていて余計混乱を招きそうな名前になっている．パイプラインで処理させている人は，名前の変更に注意しよう．</p>

<p>また，SOAPdenovo2では新たに<strong>pregraph_sparce</strong>というモジュールが追加されている．これは，SOAPdenovo2のアセンブル第1段階で行われるpregraphというコマンドの改良版で，コンティグとしてグラフをつなげていく前段階で候補を減らしておき，後々の処理の無駄を省くというもののようだ．基本的にSOAPdenovo2を実行するだけならpregraph_sparseは必要ないが，高速化をしたいといった場合には試してみてもいいと思われる．pregraph_sparseの詳しい使い方はMANUALに書かれているので，そちらを参考していただきたい．ちなみに，MANUALでは&#8221;consumption&#8221;の綴りが間違っている．</p>

<h3>実行の確認</h3>

<p>ファイルを展開したディレクトリでSOAPdenovo2を実行して，以下のようにバージョンとヘルプが表示されれば，インストールは成功している．なお，いまのところLinuxにしか対応してないようで，Mac OS Xでは実行できないので注意．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./SOAPdenovo-63mer
</span><span class='line'>
</span><span class='line'>Version 2.04: released on July 13th, 2012
</span><span class='line'>Compile Sep 13 2012     12:48:54
</span><span class='line'>
</span><span class='line'>Usage: SOAPdenovo &lt;<span class="nb">command</span>&gt; <span class="o">[</span>option<span class="o">]</span>
</span><span class='line'>    pregraph     construct kmer-graph
</span><span class='line'>    contig       eliminate errors and output contigs
</span><span class='line'>    map          map reads to contigs
</span><span class='line'>    scaff        construct scaffolds
</span><span class='line'>    all          <span class="k">do </span>all the above in turn
</span></code></pre></td></tr></table></div></figure>


<h3>最後に愚痴</h3>

<p>そもそも，SourceForgeは様々なプログラムが配布場所として使用しているが，そもそも色々と不便で分かりにくい．広告が多い上に画面がごちゃごちゃしていて構造を把握しづらいし，ファイルを自動ダウンロードにしてるのもいい迷惑だし，慣れていないとなかなかに辛いものがある．元のプロジェクトの概要を機械翻訳で日本語にしただけの有りもしない日本語版のページなど，Google検索などでのノイズも非常に多い．まあ結論としては，今回はこれが言いたかっただけです，はい．</p>

<h3>参考</h3>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
<li><a href="http://cell-innovation.nig.ac.jp/wiki/tiki-index.php?page=SOAPdenovo%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%AD%E3%82%B0">http://cell-innovation.nig.ac.jp/wiki/tiki-index.php?page=SOAPdenovo%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%AD%E3%82%B0</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「今度こそわかる!? PRMLの学習の学習」に参加しました]]></title>
    <link href="http://yagays.github.com/blog/2012/10/12/prml-talksession/"/>
    <updated>2012-10-12T10:03:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/12/prml-talksession</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621061240" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4621061224" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<p>昨日池袋ジュンク堂で開催されたPRML同人誌トークセッションに参加してました．講演者の皆様お疲れ様でした＆貴重なお話をありがとうございました．</p>

<ul>
<li><a href="http://www.junkudo.co.jp/tenpo/evtalk.html#20121011_talk">http://www.junkudo.co.jp/tenpo/evtalk.html#20121011_talk</a></li>
</ul>


<p>ということで，トークセッションの中で話題に上がった話を私見を交えつつ幾つか．全部の話題を網羅しているわけではないのでご了承下さい．</p>

<br />


<h3>「PRMLの学習」の2版が出た</h3>

<p>なんと「パターン認識と機械学習の学習」が早くも2版ということで，どこかで見覚えのある黄色い表紙．私はもう既に1版を買っているので2版を買おうかどうか悩んでいたら，トークセッションの受付で2版で新たに加わった内容が印刷された小冊子を頂いた．</p>

<h3>PRML翻訳は@shima__shimaさん自らが同僚や出版社に話を持ちかけて実現した</h3>

<p>翻訳に関しては，本の中では分担されているということしか分からなかったので，ちょっとした裏話．あとは，Wikiを立てて訳語の統一をされたということで，fittingやjoint distributionなどで議論が紛糾したという話も．</p>

<h3>モデルというのはモノの見方である</h3>

<p>機械学習全般の話でもよく出てくるが，今回のトークセッションでもやはり話題になったのはモデルに関する問題だった．機械学習では何らかの関数に近似したり分類したりと，未来を予測するためにはモデルを立ててパラメータをチューニングして…ということが必要になるのだが，じゃあどうやってモデルを組み上げていけばいいのか．何が良いモデルで何が悪いモデルなのか．適当にモデルを組んだら機械学習の結果が現実のデータに上手い具合に当てはまった/予想に反して全然当てはまらなかった場合には，どう解釈すればいいのか．モデルを選ぶ以前に特徴量を選ぶところにおいても，どんな工夫をすればいいのか．．．などなど，手法にかぎらず色々な部分で正当性や性能を評価する必要があり，理論が固まった現在でも人が介入する部分というのは多いという話．それを克服(?)したのが今話題のDeep Learningで，膨大なデータ量を元にして，特徴量の選択自体も機械学習の中に含めてしまおうという話とも繋がった．</p>

<h3>贋作を愛でる</h3>

<p>モデルの話に関連して，ノーフリーランチ定理やボックス氏の言葉などが話の中に出てきたが，そういった流れの中で統数研の樋口知之先生が仰られている「贋作」という単語が出てきて，個人的にはそのニュアンスが非常に腑に落ちる感じで印象に残った．最終的には現実問題を解決したいということが根本にあると思うのだが，機械学習なんかは理論などは置いておいて単純に動けばいいやという考えもあり，逆に何でも適用しようとすると論文を量産する機械になってしまったり，SOMみたいな万能性に溺れてしまうという話もあり，なかなか難しい部分ではある．</p>

<ul>
<li><a href="http://d.hatena.ne.jp/what_a_dude/20110902/p1">http://d.hatena.ne.jp/what_a_dude/20110902/p1</a></li>
<li><a href="http://www.ai-gakkai.or.jp/jsai/sig/dmsm/007/discussion.html">http://www.ai-gakkai.or.jp/jsai/sig/dmsm/007/discussion.html</a></li>
<li><a href="http://www.ai-gakkai.or.jp/jsai/activity/241_p162_165.pdf">http://www.ai-gakkai.or.jp/jsai/activity/241_p162_165.pdf</a> (pdf)</li>
</ul>


<h3>余談：PRMLの学習と実装に関する疑問について．</h3>

<p>実装の話はトークセッションではあまり出て来なかったのだが，帰り際の電車の中で実装に関する疑問をふと思いついて「さっき訊いときゃよかった」と思ったので，折角なので書いてみる．</p>

<p>プログラマーなどは，アルゴリズムを自分で実装しないと本当に理解したことにならない，なんてことがよく言われるけれども，そういう環境で育った技術系の人がPRMLを読み始めると「書いてあることをひと通りまんべんなく実装しないといけない」みたいな感じになって，取っ掛かりとしては非常に辛いんじゃないかなーという個人的な印象がある．</p>

<p>例えば，尤度関数でlogを取って対数尤度にするのは小さな確率の値を掛け算していくと非常に小さい値になって計算機で扱うには困るからlogを取って足し算にしているんだよ，という実装上の工夫は非常によくされる説明だけれども，じゃあ他の機械学習の理論においても，実装のことを考慮した勉強をしないといけないんじゃないかという感覚は今でもある．</p>

<p>そのあたり，トークセッションの中で話があったように，理論レベルの難しさと実装レベルの難しさは別物だし，今は良質の機械学習パッケージが充実しているから機械学習を使うだけなら自分で実装する必要性は必ずしも無いけれども，「加減」の問題として，どの程度やったらいいのかという疑問．まあ，現実の問題を解こうと思った時には，やはりその分野（自然言語処理であったりレコメンドであったり）の機械学習本を参考にしたほうが良いのだけれども．</p>

<p>そういえば@Shuyoさんが「数式をnumpyに落としこむコツ」という解説を書かれており，非常に分かりやすくていつも参考にしているのだが，そのあたり「プログラマのためのPRMLの学習」同人誌があるといいんじゃないかと思う．</p>

<ul>
<li><a href="http://d.hatena.ne.jp/n_shuyo/20111016/numpy">http://d.hatena.ne.jp/n_shuyo/20111016/numpy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOAPdenovo2のアセンブル情報を集計するスクリプト]]></title>
    <link href="http://yagays.github.com/blog/2012/10/11/soapdenovo2-stats/"/>
    <updated>2012-10-11T16:08:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/11/soapdenovo2-stats</id>
    <content type="html"><![CDATA[<p>SOAPdenovo2になって，アセンブリで得られた配列の統計情報がscafStatisticsというファイルに出力されるようになった．そのため，自分でアセンブリ結果を解析しなくとも，コンティグ数やN50などの基本情報をチェックすることができる……のだが，scafStatisticsは項目を並べただけのテキストファイルなので，複数のアセンブリ結果を比較しようと思った場合，いちいちファイルを開いて統計情報を集計するのが非常に面倒になる．</p>

<p>ということで，SOAPdenovo2のアセンブルで出力される情報を一つにまとめるスクリプトを簡単に書いてみた．タブ区切りテキストで出力されるので，Excelなどでも見やすいようにしてある．</p>

<br />


<h2>インストール</h2>

<ul>
<li><a href="https://gist.github.com/3870629">https://gist.github.com/3870629</a></li>
</ul>


<p>上記のgistに置いてあるソースコードをダウンロードするか，wgetでソースコードを落としてくる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget --no-check-certificate https://raw.github.com/gist/3870629/6547d69e768e3d87a140d6405fdf19102ff525cb/soapdenovo2_stats.rb
</span></code></pre></td></tr></table></div></figure>


<p>動作確認はRuby 1.8.7および1.9.3で行っているが，まあ変なことはしてないのでどんな環境でもだいたい動くと思う．RubyのバージョンよりかはSOAPdenovo2の未知の部分や仕様変更などが怖いわけで，そもそも以下のデータセットで出てきたscafStatisticsを参考にしているため，SOAPdenovo2のパラメータなどによっては期待通りの動きをしないかもしれない．あと，例外処理などをあまり真面目に書いていないので，入力ファイルが見つからない場合にエラーを吐かなかったりするが，そこらへんは後々修正するかも．</p>

<br />


<h2>使い方</h2>

<h3>基本的な使い方</h3>

<p><strong><code>ruby soapdenovo2_stats.rb</code></strong>のあとにscafStatisticsのファイルを並べるだけ．標準出力に表示される情報は，scafStatistics内のInformation for assembly Scaffoldのうち，重要な統計量のみとなっている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby soapdenovo2_stats.rb path/to/k23.scafStatistics path/to/k25.scafStatistics
</span><span class='line'>Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
</span><span class='line'>k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
</span><span class='line'>k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
</span></code></pre></td></tr></table></div></figure>


<h3>その他の詳細な統計量を出力する</h3>

<p><strong><code>-a</code></strong>または<strong><code>--all</code></strong>オプションをつけることでscafStatistics内のすべての統計量を出力するようにしている．また，<strong><code>-c</code></strong>または<strong><code>--contig</code></strong>オプションをつけることによって，ScaffoldではなくContigの情報（scafStatistics内のInformation for assembly Contig より下側の情報）を出力できる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby soapdenovo2_stats.rb -a -c path/to/k23.scafStatistics
</span><span class='line'>Size_includeN   Size_withoutN   Contig_Num      Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Contig&gt;100      Contig&gt;100 <span class="o">(</span>%<span class="o">)</span>  Contig&gt;500      Contig&gt;500 <span class="o">(</span>%<span class="o">)</span>  Contig&gt;1K       Contig&gt;1K <span class="o">(</span>%<span class="o">)</span>   Contig&gt;10K      Contig&gt;10K <span class="o">(</span>%<span class="o">)</span>  Contig&gt;100K     Contig&gt;100K <span class="o">(</span>%<span class="o">)</span> Contig&gt;1M       Contig&gt;1M <span class="o">(</span>%<span class="o">)</span>   Nucleotide_A    Nucleotide_A <span class="o">(</span>%<span class="o">)</span>        Nucleotide_C    Nucleotide_C <span class="o">(</span>%<span class="o">)</span>    Nucleotide_G    Nucleotide_G <span class="o">(</span>%<span class="o">)</span>        Nucleotide_T    Nucleotide_T <span class="o">(</span>%<span class="o">)</span>        GapContent_N    GapContent_N <span class="o">(</span>%<span class="o">)</span>        Non_ACGTN       Non_ACGTN <span class="o">(</span>%<span class="o">)</span>   GC_Content      N10     Contigs &gt;0 in N10       N20     Contigs &gt;0 in N20       N30     Contigs &gt;0 in N30       N40     Contigs &gt;0 in N40       N50     Contigs &gt;0 in N50       N60     Contigs &gt;0 in N60   N70     Contigs &gt;0 in N70       N80     Contigs &gt;0 in N80       N90     Contigs &gt;0 in N90       NG50    Contigs &gt;0 in NG50      N50_contig-NG50_contig_length_difference        Number_of_contigs_in_scaffolds  Number_of_contigs_not_in_scaffolds<span class="o">(</span>Singleton<span class="o">)</span>   Average_number_of_contigs_per_scaffold
</span><span class='line'>4533843 4533843 845     5365    2919    55290   100     840     99.41   646     76.45   589     69.7    147     17.4    0       0.0     0       0.0     1122311 24.75   1154274 25.46   1146494 25.29   1110764 24.5    0       0.0     0       0.0     50.75   29554   13      21527   31      17094   55      13748   85      11457   121     9180    165     7136    2225257     296     3315    403     NaN     NaN     NaN     0       845     0
</span></code></pre></td></tr></table></div></figure>


<h3>ワイルドカードを使って入力ファイルを複数指定する</h3>

<p>Zshなどのシェルコマンドと同様に，入力ファイルの指定には<strong><code>*</code></strong>や<strong><code>?</code></strong>などのワイルドカードなどが使用できる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby soapdenovo2_stats.rb  path/to/*.scafStatistics
</span><span class='line'>Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
</span><span class='line'>k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
</span><span class='line'>k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
</span><span class='line'>k27.scafStatistics      4539473 4539473 578     7853    3781    79498   100     578     18157
</span><span class='line'>k29.scafStatistics      4544164 4544164 570     7972    3672    103369  100     570     17945
</span><span class='line'>k31.scafStatistics      4550461 4550461 621     7327    3306    77302   100     621     17052
</span><span class='line'>k33.scafStatistics      4582773 4582773 1655    2769    1688    22953   100     1655    5435
</span><span class='line'>k35.scafStatistics      2393501 2393501 16300   146     132     1345    105     16300   142
</span></code></pre></td></tr></table></div></figure>


<h3>特定のカラムでソートする</h3>

<p><strong><code>-s</code></strong>オプションを使うことで，特定のカラムで値をソートした結果を出力することができる．ここではN50を降順で並び替えており，一番右端の列を見るとN50が一番大きいものはk=27であったことがわかる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby soapdenovo2_stats.rb -s N50 path/to/*.scafStatistics
</span><span class='line'>Filename        Size_includeN   Size_withoutN   Scaffold_Num    Mean_Size       Median_Size     Longest_Seq     Shortest_Seq    Singleton_Num   N50
</span><span class='line'>k27.scafStatistics      4539473 4539473 578     7853    3781    79498   100     578     18157
</span><span class='line'>k29.scafStatistics      4544164 4544164 570     7972    3672    103369  100     570     17945
</span><span class='line'>k31.scafStatistics      4550461 4550461 621     7327    3306    77302   100     621     17052
</span><span class='line'>k25.scafStatistics      4536449 4536449 654     6936    3609    71235   100     654     14798
</span><span class='line'>k23.scafStatistics      4533843 4533843 845     5365    2919    55290   100     845     11457
</span><span class='line'>k33.scafStatistics      4582773 4582773 1655    2769    1688    22953   100     1655    5435
</span><span class='line'>k35.scafStatistics      2393501 2393501 16300   146     132     1345    105     16300   142
</span></code></pre></td></tr></table></div></figure>


<h2>今回用いたサンプルデータ</h2>

<p>なお，今回上記で示したデータは，E.coliのSRR001665のデータを用いてSOAPdenovo2_revision210でアセンブルしたものを使用している．アセンブルのコマンドとconfigファイルは以下のとおり．SEQanswersのWikiにあったExampleをそのまま使わせてもらっている（ <a href="http://seqanswers.com/wiki/How-to/de_novo_assembly#SOAP_denovo">http://seqanswers.com/wiki/How-to/de_novo_assembly#SOAP_denovo</a>）．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>SOAPdenovo-63mer all -K 25 -R -s cont.config -o output/k25
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cont.config</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#maximal read length</span>
</span><span class='line'><span class="nv">max_rd_len</span><span class="o">=</span>36
</span><span class='line'><span class="o">[</span>LIB<span class="o">]</span>
</span><span class='line'><span class="c">#average insert size</span>
</span><span class='line'><span class="nv">avg_ins</span><span class="o">=</span>200
</span><span class='line'><span class="c">#if sequence needs to be reversed </span>
</span><span class='line'><span class="nv">reverse_seq</span><span class="o">=</span>0
</span><span class='line'><span class="c">#use for contig building only</span>
</span><span class='line'><span class="nv">asm_flags</span><span class="o">=</span>1
</span><span class='line'><span class="c">#in which order the reads are used while scaffolding</span>
</span><span class='line'><span class="nv">rank</span><span class="o">=</span>1
</span><span class='line'><span class="c">#fastq files</span>
</span><span class='line'><span class="nv">q1</span><span class="o">=</span>/home/yag_ays/tmp/soapdenovo2_testrun/SRR001665_1.fastq
</span><span class='line'><span class="nv">q2</span><span class="o">=</span>/home/yag_ays/tmp/soapdenovo2_testrun/SRR001665_2.fastq
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="http://sourceforge.net/projects/soapdenovo2/">http://sourceforge.net/projects/soapdenovo2/</a></li>
<li><a href="http://www.homolog.us/blogs/2012/07/10/testing-soapdenovo2-prerelease-v-map-and-scaff/">http://www.homolog.us/blogs/2012/07/10/testing-soapdenovo2-prerelease-v-map-and-scaff/</a></li>
</ul>


<h3>ソースコード</h3>

<!-- more -->


<div><script src='https://gist.github.com/3870629.js?file='></script>
<noscript><pre><code>#/usr/bin/env ruby

require &quot;optparse&quot;

def v(s)
  if s == &quot;NaN&quot;
    return s
  elsif s.include?(&quot;%&quot;)
    return s.gsub(&quot;%&quot;,&quot;&quot;).to_f
  else
    return s.to_i
  end
end

def parse_scafstatistics(file)
  stats = []
  header = []
  open(file) { |f|
    header &lt;&lt; &quot;Filename&quot;
    stats &lt;&lt; File.basename(file)
    f.each_line do |line|
      if !line.include?(&quot;&lt;--&quot;) &amp;&amp; line != &quot;\n&quot;
        l = line.chomp.split(&quot;\t&quot;)
        if l[0] == &quot;GC_Content&quot;
          header &lt;&lt; l[0]
          stats &lt;&lt; v(l[1])
        elsif l.length == 3
          if l[2].include?(&quot;%&quot;)
            header &lt;&lt; l[0].strip
            header &lt;&lt; l[0].strip + &quot; (%)&quot;
            stats &lt;&lt; v(l[1])
            stats &lt;&lt; v(l[2])
          else
            header &lt;&lt; l[0]
            header &lt;&lt; &quot;Contigs &gt;0 in &quot; + l[0]
            stats &lt;&lt; v(l[1])
            stats &lt;&lt; v(l[2])
          end
        else
          header &lt;&lt; l[0]
          stats &lt;&lt; v(l[1])
        end
      end
    end
  }
  return header, stats
end

def print_tsv(header, stats, print_all, print_scaffold)
  h = []
  s = []
  if print_scaffold
    if print_all
      h = header[0..57]
      s = stats.map{|a| a[0..57]}
    else
      h = [header[0..8],header[45]]
      s = stats.map{|a| [a[0..8],a[45]]}
    end
  else
    if print_all
      h = header[58..header.length]
      s = stats.map{|a| a[58..a.length]}
    else
      h = [header[58..65].flatten,header[98]]
      s = stats.map{|a| [a[58..65].flatten,a[98]]}
    end
  end
  puts h.join(&quot;\t&quot;)
  s.each do |f|
    puts f.join(&quot;\t&quot;)
  end
end


if __FILE__ == $PROGRAM_NAME
  header = []
  stats = []

  sort_column = nil
  print_all = false
  print_scaffold = true

  ARGV.options do |opt|
    opt.on( &quot;-a&quot;,&quot;--all&quot;) { print_all = true }
    opt.on( &quot;-s VAL&quot;,&quot;--sort&quot;) { |a| sort_column = a }
    opt.on( &quot;-c&quot;, &quot;--contig&quot;) { print_scaffold = false }
    opt.on( &quot;-h&quot;,&quot;--help&quot;) { puts opt ;exit }
    opt.parse!
  end

  Dir.glob(ARGV).each do |f|
    h, s = parse_scafstatistics(f)
    header = h
    stats &lt;&lt; s
  end

  if sort_column
    i = header.index(sort_column)
    if i == nil
      puts &quot;ERROR : unknown column name '#{sort_column}' &quot;
      exit 1
    end
    stats = stats.sort{|a,b| b[i] &lt;=&gt; a[i] }
  end

  print_tsv(header, stats, print_all, print_scaffold)
end
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ウェブページにリストアップされているpdfファイルをwgetでまとめてダウンロードする方法]]></title>
    <link href="http://yagays.github.com/blog/2012/10/10/shut-the-fuck-up-and-download-all-pdf-files/"/>
    <updated>2012-10-10T00:03:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/10/shut-the-fuck-up-and-download-all-pdf-files</id>
    <content type="html"><![CDATA[<h3>pdf中毒者のためのwget入門</h3>

<p>大学の先生方が用意する講義資料やプレゼンテーションのスライドの類なんかは，得てして個人のウェブページにまとまりなくリストアップされているだけの場合が多い．必要なときにダウンロードするようにすると既に持っているファイルを再度ダウンロードしてしまって重複することがあるし，まとめてダウンロードするためにブラウザ上でいちいちクリックするのも面倒くさい．そのため，ウェブページにリストアップされているpdfファイルをコマンド一発でまとめてダウンロードしたい！というときには，wgetコマンドが非常に便利だ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -r -l 1 -A pdf -w 5 -nd http://example.com/hoge/index.html
</span></code></pre></td></tr></table></div></figure>


<p>これだけでいいのだ．このコマンドを使えば，example.com/hoge/index.htmlというウェブページにリストアップされているpdfファイルを一括してダウンロードすることができる．指定したオプションを少し解説しよう．</p>

<h4><code>-r -l 1</code></h4>

<p><strong>-r</strong>と<strong>-l</strong>オプションによって，再帰的に1階層分だけリンクをたどるように指定している．つまり，指定したウェブページに貼ってあるリンクの中から，目的となるファイルだけをダウンロードすることができる．</p>

<h4><code>-A pdf</code></h4>

<p><strong>-A</strong>オプションによって，拡張子がpdfのファイルのみをダウンロードするように指定している．これをpptに変えればパワーポイントのファイルだけダウンロードできるし，pdf,pptのようにコンマ区切りで複数列挙することもできる．</p>

<h4><code>-w 5</code></h4>

<p><strong>-w</strong>オプションによって，ダウンロード処理の間隔を5秒開けている．wgetはダウンロード処理が終わり次第次のダウンロードを実行し始めるため，短時間に大量にダウンロードすると向こうのサーバに負荷をかける可能性がある．そのため，ダウンロード間隔を少し開けることで，集中してアクセスしないようにしている．間隔の秒数には特に意味があるわけではないが，最低でも数秒は開けたほうが良いだろう．「<a href="http://www.amazon.co.jp/gp/product/4873111870/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4873111870&linkCode=as2&tag=yagays-22">Spidering hacks―ウェブ情報ラクラク取得テクニック101選</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4873111870" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />」なんかを見ると，スクリプトによって3秒または5秒開けてる場合が多い．</p>

<h4><code>-nd</code></h4>

<p><strong>-nd</strong>オプションによって，ダウンロードしたファイルを同一ディレクトリ（標準ではカレントディレクトリ）に保存している．これを指定しないと，ウェブページのURL階層通りに/hoge/fuga/piyo/といったディレクトリ構造が作成されてしまう．なお，<code>-P hoge</code>というオプションを追加すると，hogeというディレクトリ以下にダウンロードしたファイルが保存される．</p>

<h3>なお，Mac OS Xの場合にはwgetのインストールが必要</h3>

<p>そういえば，wgetはMacには標準で入っていないので，MacPortsかHomebrewなどを使ってインストールする必要がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo port install wget
</span></code></pre></td></tr></table></div></figure>


<p>または</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install wget
</span></code></pre></td></tr></table></div></figure>


<p>もちろんソースコードをコンパイルして入れることもできる(<a href="http://osxdaily.com/2012/05/22/install-wget-mac-os-x/">http://osxdaily.com/2012/05/22/install-wget-mac-os-x/</a>)</p>

<h3>!注意!</h3>

<p><strong>相手方のサーバ負荷に配慮するのはもちろん，利用規約の有無やダウンロード環境にも注意が必要である．</strong>ウェブページによっては，スクリプトを使った一括ダウンロードなどを制限/禁止している場合がある．上記コマンドを使ったダウンロードを行う際は，そのような利用規約があるかどうかをまず確認し，最大限利用規約を守るよう注意しなければいけない．また，万が一の場合には相手に迷惑を掛けてドメイン/IPアドレス単位でアクセスが禁止される可能性もある．そのため，会社や大学で実行する際には細心の注意を払い，同じIPアドレスを使う同僚や組織に迷惑をかけないよう注意しなければならない．</p>

<h3>参考</h3>

<ul>
<li><a href="http://www.itsenka.com/contents/development/unix-linux/wget.html">http://www.itsenka.com/contents/development/unix-linux/wget.html</a></li>
<li><a href="http://taichino.com/engineer-life/linux/288">http://taichino.com/engineer-life/linux/288</a></li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873111870" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774138169" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「読書の技法 誰でも本物の知識が身につく熟読術・速読術「超」入門」読了]]></title>
    <link href="http://yagays.github.com/blog/2012/10/09/review-art-of-reading/"/>
    <updated>2012-10-09T06:45:00+09:00</updated>
    <id>http://yagays.github.com/blog/2012/10/09/review-art-of-reading</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yagays-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4492044698" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" align="right"></iframe>


<h3>対象は文学・思想・哲学・歴史に偏っているが，読書法としては簡潔で的確</h3>

<p>本書は佐藤優が実践している読書法や勉強法，そして大量の情報をどうやって効率良く捌くかについて論じた本だ．本書前半では，佐藤氏のこれまでの人生における読書遍歴が語られるほか，本書全体を通して文章の端々に彼独自の試行錯誤の跡が見られる．</p>

<p>読書に対する彼の態度は非常に明確で，本や情報の取捨選択をはっきりすることが繰り返し述べられる．それは，どのような本を読むべきでどのような本を読まないべきか，どういう情報を重視してどういう情報を読み飛ばすかということだ．ある事柄に関して読書で知識を得ようと思った時に，まず基本となる本の選び方から，重要な箇所のマーキングや書き込み，そして要約などの情報の整理に至るまで，本の著者の意見や自分の欲しい情報を的確に抜き出す技術が具体的に語られる．このような考えの根本には，時間は有限であるという彼自身の強い考えがあり，多読・速読を勧める上での佐藤氏ならではの理由付けがある．本書の技法に倣って文章を抜き出せば，</p>

<blockquote><p>「読書は有限であり希少財である」という大原則を忘れてはいけない．速読はあくまで熟読する本を精査するための手段にすぎず，熟読できる本の数が限られるからこそ必要となるものだ．速読が熟読よりも効果を上げることは絶対にない．</p>

<p><a href="http://www.amazon.co.jp/gp/product/4492044698/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4492044698&linkCode=as2&tag=yagays-22">読書の技法 誰でも本物の知識が身につく熟読術・速読術「超」入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=yagays-22&l=as2&o=9&a=4492044698" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> (p.88)</p></blockquote>

<p>と，速読をただ単に早く本を読む技術と見なしているわけではないことがわかる．本書の帯には「月平均300冊，多い月は500冊以上」と多読を煽る謳い文句が並んでいるが，中をしっかりと読めばそれが安易な多読を推奨しているわけではないことが理解できるだろう．こういった点においては，読書ありきで自然と知識が身につくという陳腐な読書論と比較して，本書の主張や読書手法は非常に合理的であり，ある程度の訓練を必要としながらも実用的である．</p>

<p>佐藤氏の元外務省主任分析官という経歴や神学部出身という学歴から分かる通り，主に思想や歴史の分野に関わる話が多い．科学や理学系に関しては，数学の勉強法で「テクネー」と呼ばれる繰り返しによる理解の重要性に触れている等ある程度の言及はあるものの，少し物足りなさは感じる．しかし，だからといって彼の技法が理学系に通用しないというわけではなく，全体を通して読書法や勉強法は首尾一貫しており応用が効くようなものだ．また，漫画や小説の読み方もそれぞれ読み方があり，漫画のデフォルメされた主張を鵜呑みにし過ぎないことや小説から何を汲み取るべきかなど，学問以外の読書に関しても言及があるのが本書の良いところだ．読書技法の基本から応用まで幅広く網羅した，誰でも読める幅広い年齢層向けの本として，かなり良くまとまっていてクオリティが高い1冊だと思う．</p>
]]></content>
  </entry>
  
</feed>
